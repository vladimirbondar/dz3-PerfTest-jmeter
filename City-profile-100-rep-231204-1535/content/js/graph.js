/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 2366.0, "series": [{"data": [[0.0, 40.0], [0.1, 42.0], [0.2, 42.0], [0.3, 42.0], [0.4, 42.0], [0.5, 43.0], [0.6, 43.0], [0.7, 43.0], [0.8, 43.0], [0.9, 43.0], [1.0, 43.0], [1.1, 43.0], [1.2, 43.0], [1.3, 43.0], [1.4, 43.0], [1.5, 43.0], [1.6, 43.0], [1.7, 43.0], [1.8, 43.0], [1.9, 43.0], [2.0, 43.0], [2.1, 43.0], [2.2, 44.0], [2.3, 44.0], [2.4, 44.0], [2.5, 44.0], [2.6, 44.0], [2.7, 44.0], [2.8, 44.0], [2.9, 44.0], [3.0, 44.0], [3.1, 44.0], [3.2, 44.0], [3.3, 44.0], [3.4, 44.0], [3.5, 44.0], [3.6, 44.0], [3.7, 44.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 44.0], [5.0, 44.0], [5.1, 44.0], [5.2, 44.0], [5.3, 44.0], [5.4, 44.0], [5.5, 44.0], [5.6, 44.0], [5.7, 44.0], [5.8, 44.0], [5.9, 44.0], [6.0, 44.0], [6.1, 44.0], [6.2, 44.0], [6.3, 44.0], [6.4, 45.0], [6.5, 45.0], [6.6, 45.0], [6.7, 45.0], [6.8, 45.0], [6.9, 45.0], [7.0, 45.0], [7.1, 45.0], [7.2, 45.0], [7.3, 45.0], [7.4, 45.0], [7.5, 45.0], [7.6, 45.0], [7.7, 45.0], [7.8, 45.0], [7.9, 45.0], [8.0, 45.0], [8.1, 45.0], [8.2, 45.0], [8.3, 45.0], [8.4, 45.0], [8.5, 45.0], [8.6, 45.0], [8.7, 45.0], [8.8, 45.0], [8.9, 45.0], [9.0, 45.0], [9.1, 45.0], [9.2, 45.0], [9.3, 45.0], [9.4, 45.0], [9.5, 45.0], [9.6, 45.0], [9.7, 45.0], [9.8, 45.0], [9.9, 45.0], [10.0, 45.0], [10.1, 45.0], [10.2, 45.0], [10.3, 45.0], [10.4, 45.0], [10.5, 45.0], [10.6, 45.0], [10.7, 45.0], [10.8, 45.0], [10.9, 45.0], [11.0, 45.0], [11.1, 45.0], [11.2, 45.0], [11.3, 45.0], [11.4, 45.0], [11.5, 45.0], [11.6, 45.0], [11.7, 45.0], [11.8, 45.0], [11.9, 45.0], [12.0, 45.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 46.0], [13.5, 46.0], [13.6, 46.0], [13.7, 46.0], [13.8, 46.0], [13.9, 46.0], [14.0, 46.0], [14.1, 46.0], [14.2, 46.0], [14.3, 46.0], [14.4, 46.0], [14.5, 46.0], [14.6, 46.0], [14.7, 46.0], [14.8, 46.0], [14.9, 46.0], [15.0, 46.0], [15.1, 46.0], [15.2, 46.0], [15.3, 46.0], [15.4, 46.0], [15.5, 46.0], [15.6, 46.0], [15.7, 46.0], [15.8, 46.0], [15.9, 46.0], [16.0, 46.0], [16.1, 46.0], [16.2, 46.0], [16.3, 46.0], [16.4, 46.0], [16.5, 46.0], [16.6, 46.0], [16.7, 46.0], [16.8, 46.0], [16.9, 46.0], [17.0, 46.0], [17.1, 46.0], [17.2, 46.0], [17.3, 46.0], [17.4, 46.0], [17.5, 46.0], [17.6, 46.0], [17.7, 46.0], [17.8, 46.0], [17.9, 46.0], [18.0, 46.0], [18.1, 46.0], [18.2, 46.0], [18.3, 46.0], [18.4, 46.0], [18.5, 46.0], [18.6, 46.0], [18.7, 46.0], [18.8, 46.0], [18.9, 46.0], [19.0, 46.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 46.0], [19.9, 46.0], [20.0, 46.0], [20.1, 46.0], [20.2, 46.0], [20.3, 46.0], [20.4, 46.0], [20.5, 46.0], [20.6, 46.0], [20.7, 46.0], [20.8, 46.0], [20.9, 47.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 47.0], [21.7, 47.0], [21.8, 47.0], [21.9, 47.0], [22.0, 47.0], [22.1, 47.0], [22.2, 47.0], [22.3, 47.0], [22.4, 47.0], [22.5, 47.0], [22.6, 47.0], [22.7, 47.0], [22.8, 47.0], [22.9, 47.0], [23.0, 47.0], [23.1, 47.0], [23.2, 47.0], [23.3, 47.0], [23.4, 47.0], [23.5, 47.0], [23.6, 47.0], [23.7, 47.0], [23.8, 47.0], [23.9, 47.0], [24.0, 47.0], [24.1, 47.0], [24.2, 47.0], [24.3, 47.0], [24.4, 47.0], [24.5, 47.0], [24.6, 47.0], [24.7, 47.0], [24.8, 47.0], [24.9, 47.0], [25.0, 47.0], [25.1, 47.0], [25.2, 47.0], [25.3, 47.0], [25.4, 47.0], [25.5, 47.0], [25.6, 47.0], [25.7, 47.0], [25.8, 47.0], [25.9, 47.0], [26.0, 47.0], [26.1, 47.0], [26.2, 47.0], [26.3, 48.0], [26.4, 48.0], [26.5, 48.0], [26.6, 48.0], [26.7, 48.0], [26.8, 48.0], [26.9, 48.0], [27.0, 48.0], [27.1, 48.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 48.0], [28.4, 48.0], [28.5, 48.0], [28.6, 48.0], [28.7, 48.0], [28.8, 48.0], [28.9, 48.0], [29.0, 48.0], [29.1, 48.0], [29.2, 48.0], [29.3, 48.0], [29.4, 48.0], [29.5, 48.0], [29.6, 48.0], [29.7, 48.0], [29.8, 48.0], [29.9, 49.0], [30.0, 49.0], [30.1, 49.0], [30.2, 49.0], [30.3, 49.0], [30.4, 49.0], [30.5, 49.0], [30.6, 49.0], [30.7, 49.0], [30.8, 49.0], [30.9, 49.0], [31.0, 49.0], [31.1, 49.0], [31.2, 49.0], [31.3, 49.0], [31.4, 49.0], [31.5, 49.0], [31.6, 49.0], [31.7, 50.0], [31.8, 50.0], [31.9, 50.0], [32.0, 50.0], [32.1, 50.0], [32.2, 50.0], [32.3, 50.0], [32.4, 50.0], [32.5, 50.0], [32.6, 50.0], [32.7, 51.0], [32.8, 51.0], [32.9, 51.0], [33.0, 51.0], [33.1, 51.0], [33.2, 51.0], [33.3, 51.0], [33.4, 52.0], [33.5, 52.0], [33.6, 52.0], [33.7, 52.0], [33.8, 53.0], [33.9, 53.0], [34.0, 54.0], [34.1, 55.0], [34.2, 56.0], [34.3, 57.0], [34.4, 59.0], [34.5, 59.0], [34.6, 61.0], [34.7, 63.0], [34.8, 65.0], [34.9, 66.0], [35.0, 68.0], [35.1, 74.0], [35.2, 104.0], [35.3, 112.0], [35.4, 113.0], [35.5, 114.0], [35.6, 114.0], [35.7, 114.0], [35.8, 115.0], [35.9, 115.0], [36.0, 115.0], [36.1, 115.0], [36.2, 115.0], [36.3, 116.0], [36.4, 116.0], [36.5, 116.0], [36.6, 116.0], [36.7, 116.0], [36.8, 116.0], [36.9, 116.0], [37.0, 117.0], [37.1, 117.0], [37.2, 117.0], [37.3, 117.0], [37.4, 117.0], [37.5, 117.0], [37.6, 117.0], [37.7, 117.0], [37.8, 118.0], [37.9, 118.0], [38.0, 118.0], [38.1, 118.0], [38.2, 118.0], [38.3, 118.0], [38.4, 118.0], [38.5, 118.0], [38.6, 118.0], [38.7, 118.0], [38.8, 119.0], [38.9, 119.0], [39.0, 119.0], [39.1, 119.0], [39.2, 119.0], [39.3, 119.0], [39.4, 119.0], [39.5, 119.0], [39.6, 119.0], [39.7, 119.0], [39.8, 119.0], [39.9, 120.0], [40.0, 120.0], [40.1, 120.0], [40.2, 120.0], [40.3, 120.0], [40.4, 120.0], [40.5, 120.0], [40.6, 120.0], [40.7, 120.0], [40.8, 120.0], [40.9, 120.0], [41.0, 120.0], [41.1, 121.0], [41.2, 121.0], [41.3, 121.0], [41.4, 121.0], [41.5, 121.0], [41.6, 121.0], [41.7, 121.0], [41.8, 121.0], [41.9, 121.0], [42.0, 121.0], [42.1, 121.0], [42.2, 121.0], [42.3, 122.0], [42.4, 122.0], [42.5, 122.0], [42.6, 122.0], [42.7, 122.0], [42.8, 122.0], [42.9, 122.0], [43.0, 122.0], [43.1, 122.0], [43.2, 122.0], [43.3, 123.0], [43.4, 123.0], [43.5, 123.0], [43.6, 123.0], [43.7, 123.0], [43.8, 123.0], [43.9, 123.0], [44.0, 123.0], [44.1, 123.0], [44.2, 123.0], [44.3, 124.0], [44.4, 124.0], [44.5, 124.0], [44.6, 124.0], [44.7, 124.0], [44.8, 124.0], [44.9, 124.0], [45.0, 124.0], [45.1, 124.0], [45.2, 125.0], [45.3, 125.0], [45.4, 125.0], [45.5, 125.0], [45.6, 125.0], [45.7, 125.0], [45.8, 125.0], [45.9, 126.0], [46.0, 126.0], [46.1, 126.0], [46.2, 126.0], [46.3, 126.0], [46.4, 126.0], [46.5, 127.0], [46.6, 127.0], [46.7, 127.0], [46.8, 127.0], [46.9, 127.0], [47.0, 128.0], [47.1, 128.0], [47.2, 128.0], [47.3, 128.0], [47.4, 128.0], [47.5, 129.0], [47.6, 129.0], [47.7, 129.0], [47.8, 130.0], [47.9, 130.0], [48.0, 130.0], [48.1, 130.0], [48.2, 131.0], [48.3, 131.0], [48.4, 131.0], [48.5, 132.0], [48.6, 132.0], [48.7, 132.0], [48.8, 133.0], [48.9, 133.0], [49.0, 134.0], [49.1, 134.0], [49.2, 135.0], [49.3, 136.0], [49.4, 136.0], [49.5, 137.0], [49.6, 137.0], [49.7, 138.0], [49.8, 139.0], [49.9, 139.0], [50.0, 140.0], [50.1, 141.0], [50.2, 142.0], [50.3, 143.0], [50.4, 144.0], [50.5, 145.0], [50.6, 146.0], [50.7, 148.0], [50.8, 149.0], [50.9, 150.0], [51.0, 151.0], [51.1, 152.0], [51.2, 154.0], [51.3, 155.0], [51.4, 156.0], [51.5, 157.0], [51.6, 158.0], [51.7, 160.0], [51.8, 161.0], [51.9, 162.0], [52.0, 163.0], [52.1, 164.0], [52.2, 166.0], [52.3, 167.0], [52.4, 168.0], [52.5, 169.0], [52.6, 170.0], [52.7, 171.0], [52.8, 172.0], [52.9, 173.0], [53.0, 174.0], [53.1, 175.0], [53.2, 176.0], [53.3, 177.0], [53.4, 178.0], [53.5, 178.0], [53.6, 180.0], [53.7, 181.0], [53.8, 182.0], [53.9, 183.0], [54.0, 184.0], [54.1, 185.0], [54.2, 186.0], [54.3, 187.0], [54.4, 188.0], [54.5, 189.0], [54.6, 190.0], [54.7, 191.0], [54.8, 192.0], [54.9, 193.0], [55.0, 193.0], [55.1, 194.0], [55.2, 195.0], [55.3, 196.0], [55.4, 196.0], [55.5, 197.0], [55.6, 198.0], [55.7, 199.0], [55.8, 200.0], [55.9, 200.0], [56.0, 201.0], [56.1, 202.0], [56.2, 203.0], [56.3, 203.0], [56.4, 204.0], [56.5, 205.0], [56.6, 205.0], [56.7, 206.0], [56.8, 207.0], [56.9, 208.0], [57.0, 209.0], [57.1, 210.0], [57.2, 211.0], [57.3, 212.0], [57.4, 213.0], [57.5, 214.0], [57.6, 215.0], [57.7, 216.0], [57.8, 216.0], [57.9, 217.0], [58.0, 219.0], [58.1, 220.0], [58.2, 221.0], [58.3, 223.0], [58.4, 224.0], [58.5, 225.0], [58.6, 227.0], [58.7, 228.0], [58.8, 229.0], [58.9, 230.0], [59.0, 231.0], [59.1, 232.0], [59.2, 233.0], [59.3, 235.0], [59.4, 236.0], [59.5, 237.0], [59.6, 239.0], [59.7, 241.0], [59.8, 243.0], [59.9, 244.0], [60.0, 246.0], [60.1, 248.0], [60.2, 250.0], [60.3, 252.0], [60.4, 254.0], [60.5, 256.0], [60.6, 257.0], [60.7, 260.0], [60.8, 262.0], [60.9, 264.0], [61.0, 265.0], [61.1, 267.0], [61.2, 268.0], [61.3, 270.0], [61.4, 271.0], [61.5, 273.0], [61.6, 274.0], [61.7, 276.0], [61.8, 277.0], [61.9, 279.0], [62.0, 281.0], [62.1, 283.0], [62.2, 285.0], [62.3, 287.0], [62.4, 289.0], [62.5, 290.0], [62.6, 292.0], [62.7, 294.0], [62.8, 295.0], [62.9, 297.0], [63.0, 298.0], [63.1, 299.0], [63.2, 301.0], [63.3, 302.0], [63.4, 303.0], [63.5, 304.0], [63.6, 305.0], [63.7, 307.0], [63.8, 308.0], [63.9, 309.0], [64.0, 311.0], [64.1, 313.0], [64.2, 315.0], [64.3, 317.0], [64.4, 319.0], [64.5, 322.0], [64.6, 325.0], [64.7, 327.0], [64.8, 330.0], [64.9, 332.0], [65.0, 334.0], [65.1, 337.0], [65.2, 339.0], [65.3, 342.0], [65.4, 346.0], [65.5, 350.0], [65.6, 354.0], [65.7, 359.0], [65.8, 362.0], [65.9, 365.0], [66.0, 369.0], [66.1, 374.0], [66.2, 378.0], [66.3, 383.0], [66.4, 387.0], [66.5, 392.0], [66.6, 396.0], [66.7, 399.0], [66.8, 402.0], [66.9, 406.0], [67.0, 408.0], [67.1, 413.0], [67.2, 417.0], [67.3, 422.0], [67.4, 426.0], [67.5, 430.0], [67.6, 436.0], [67.7, 442.0], [67.8, 448.0], [67.9, 457.0], [68.0, 464.0], [68.1, 475.0], [68.2, 484.0], [68.3, 495.0], [68.4, 504.0], [68.5, 511.0], [68.6, 519.0], [68.7, 529.0], [68.8, 538.0], [68.9, 550.0], [69.0, 564.0], [69.1, 570.0], [69.2, 589.0], [69.3, 600.0], [69.4, 613.0], [69.5, 628.0], [69.6, 646.0], [69.7, 660.0], [69.8, 682.0], [69.9, 707.0], [70.0, 736.0], [70.1, 756.0], [70.2, 776.0], [70.3, 802.0], [70.4, 825.0], [70.5, 850.0], [70.6, 873.0], [70.7, 909.0], [70.8, 942.0], [70.9, 974.0], [71.0, 1010.0], [71.1, 1022.0], [71.2, 1022.0], [71.3, 1022.0], [71.4, 1022.0], [71.5, 1023.0], [71.6, 1023.0], [71.7, 1023.0], [71.8, 1023.0], [71.9, 1023.0], [72.0, 1023.0], [72.1, 1023.0], [72.2, 1023.0], [72.3, 1023.0], [72.4, 1023.0], [72.5, 1023.0], [72.6, 1023.0], [72.7, 1023.0], [72.8, 1023.0], [72.9, 1023.0], [73.0, 1023.0], [73.1, 1023.0], [73.2, 1023.0], [73.3, 1023.0], [73.4, 1023.0], [73.5, 1023.0], [73.6, 1023.0], [73.7, 1023.0], [73.8, 1023.0], [73.9, 1023.0], [74.0, 1023.0], [74.1, 1023.0], [74.2, 1023.0], [74.3, 1023.0], [74.4, 1024.0], [74.5, 1024.0], [74.6, 1024.0], [74.7, 1024.0], [74.8, 1024.0], [74.9, 1024.0], [75.0, 1024.0], [75.1, 1024.0], [75.2, 1024.0], [75.3, 1024.0], [75.4, 1024.0], [75.5, 1024.0], [75.6, 1024.0], [75.7, 1024.0], [75.8, 1024.0], [75.9, 1024.0], [76.0, 1024.0], [76.1, 1024.0], [76.2, 1024.0], [76.3, 1024.0], [76.4, 1024.0], [76.5, 1024.0], [76.6, 1024.0], [76.7, 1024.0], [76.8, 1024.0], [76.9, 1024.0], [77.0, 1024.0], [77.1, 1024.0], [77.2, 1024.0], [77.3, 1024.0], [77.4, 1024.0], [77.5, 1024.0], [77.6, 1024.0], [77.7, 1024.0], [77.8, 1024.0], [77.9, 1024.0], [78.0, 1024.0], [78.1, 1024.0], [78.2, 1024.0], [78.3, 1024.0], [78.4, 1024.0], [78.5, 1024.0], [78.6, 1024.0], [78.7, 1024.0], [78.8, 1024.0], [78.9, 1024.0], [79.0, 1024.0], [79.1, 1024.0], [79.2, 1024.0], [79.3, 1024.0], [79.4, 1024.0], [79.5, 1024.0], [79.6, 1024.0], [79.7, 1024.0], [79.8, 1024.0], [79.9, 1024.0], [80.0, 1024.0], [80.1, 1024.0], [80.2, 1024.0], [80.3, 1024.0], [80.4, 1024.0], [80.5, 1024.0], [80.6, 1024.0], [80.7, 1024.0], [80.8, 1024.0], [80.9, 1024.0], [81.0, 1024.0], [81.1, 1025.0], [81.2, 1025.0], [81.3, 1025.0], [81.4, 1025.0], [81.5, 1025.0], [81.6, 1025.0], [81.7, 1025.0], [81.8, 1025.0], [81.9, 1025.0], [82.0, 1025.0], [82.1, 1025.0], [82.2, 1025.0], [82.3, 1025.0], [82.4, 1025.0], [82.5, 1025.0], [82.6, 1025.0], [82.7, 1025.0], [82.8, 1025.0], [82.9, 1025.0], [83.0, 1025.0], [83.1, 1025.0], [83.2, 1025.0], [83.3, 1025.0], [83.4, 1025.0], [83.5, 1025.0], [83.6, 1025.0], [83.7, 1025.0], [83.8, 1025.0], [83.9, 1025.0], [84.0, 1025.0], [84.1, 1025.0], [84.2, 1025.0], [84.3, 1025.0], [84.4, 1025.0], [84.5, 1025.0], [84.6, 1025.0], [84.7, 1025.0], [84.8, 1025.0], [84.9, 1025.0], [85.0, 1025.0], [85.1, 1025.0], [85.2, 1025.0], [85.3, 1025.0], [85.4, 1025.0], [85.5, 1025.0], [85.6, 1025.0], [85.7, 1025.0], [85.8, 1025.0], [85.9, 1025.0], [86.0, 1025.0], [86.1, 1025.0], [86.2, 1025.0], [86.3, 1025.0], [86.4, 1025.0], [86.5, 1025.0], [86.6, 1025.0], [86.7, 1025.0], [86.8, 1025.0], [86.9, 1025.0], [87.0, 1025.0], [87.1, 1025.0], [87.2, 1025.0], [87.3, 1025.0], [87.4, 1025.0], [87.5, 1025.0], [87.6, 1025.0], [87.7, 1025.0], [87.8, 1025.0], [87.9, 1025.0], [88.0, 1025.0], [88.1, 1025.0], [88.2, 1025.0], [88.3, 1025.0], [88.4, 1025.0], [88.5, 1025.0], [88.6, 1025.0], [88.7, 1025.0], [88.8, 1025.0], [88.9, 1025.0], [89.0, 1025.0], [89.1, 1025.0], [89.2, 1025.0], [89.3, 1026.0], [89.4, 1026.0], [89.5, 1026.0], [89.6, 1026.0], [89.7, 1026.0], [89.8, 1026.0], [89.9, 1026.0], [90.0, 1026.0], [90.1, 1026.0], [90.2, 1026.0], [90.3, 1026.0], [90.4, 1026.0], [90.5, 1026.0], [90.6, 1026.0], [90.7, 1026.0], [90.8, 1026.0], [90.9, 1026.0], [91.0, 1026.0], [91.1, 1026.0], [91.2, 1026.0], [91.3, 1026.0], [91.4, 1026.0], [91.5, 1026.0], [91.6, 1026.0], [91.7, 1026.0], [91.8, 1026.0], [91.9, 1026.0], [92.0, 1026.0], [92.1, 1026.0], [92.2, 1026.0], [92.3, 1026.0], [92.4, 1026.0], [92.5, 1026.0], [92.6, 1026.0], [92.7, 1026.0], [92.8, 1026.0], [92.9, 1026.0], [93.0, 1026.0], [93.1, 1026.0], [93.2, 1026.0], [93.3, 1026.0], [93.4, 1026.0], [93.5, 1026.0], [93.6, 1026.0], [93.7, 1026.0], [93.8, 1026.0], [93.9, 1026.0], [94.0, 1026.0], [94.1, 1026.0], [94.2, 1026.0], [94.3, 1026.0], [94.4, 1026.0], [94.5, 1026.0], [94.6, 1026.0], [94.7, 1027.0], [94.8, 1027.0], [94.9, 1027.0], [95.0, 1027.0], [95.1, 1027.0], [95.2, 1027.0], [95.3, 1027.0], [95.4, 1027.0], [95.5, 1027.0], [95.6, 1027.0], [95.7, 1027.0], [95.8, 1027.0], [95.9, 1027.0], [96.0, 1027.0], [96.1, 1027.0], [96.2, 1027.0], [96.3, 1027.0], [96.4, 1027.0], [96.5, 1027.0], [96.6, 1027.0], [96.7, 1027.0], [96.8, 1028.0], [96.9, 1028.0], [97.0, 1028.0], [97.1, 1028.0], [97.2, 1028.0], [97.3, 1028.0], [97.4, 1028.0], [97.5, 1028.0], [97.6, 1028.0], [97.7, 1028.0], [97.8, 1029.0], [97.9, 1029.0], [98.0, 1029.0], [98.1, 1029.0], [98.2, 1030.0], [98.3, 1030.0], [98.4, 1030.0], [98.5, 1031.0], [98.6, 1031.0], [98.7, 1032.0], [98.8, 1034.0], [98.9, 1036.0], [99.0, 1038.0], [99.1, 1041.0], [99.2, 1044.0], [99.3, 1049.0], [99.4, 1069.0], [99.5, 1100.0], [99.6, 1128.0], [99.7, 1151.0], [99.8, 1192.0], [99.9, 1317.0], [100.0, 2366.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 10773.0, "series": [{"data": [[0.0, 10773.0], [2300.0, 1.0], [600.0, 178.0], [700.0, 126.0], [200.0, 2254.0], [800.0, 117.0], [900.0, 96.0], [1000.0, 8737.0], [1100.0, 96.0], [300.0, 1102.0], [1200.0, 23.0], [1300.0, 19.0], [1400.0, 10.0], [1500.0, 4.0], [100.0, 6311.0], [400.0, 500.0], [1600.0, 1.0], [500.0, 284.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 20007.0, "series": [{"data": [[0.0, 9871.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 748.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20007.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.701693345E12, "maxY": 100.0, "series": [{"data": [[1.70169349E12, 100.0], [1.70169383E12, 100.0], [1.701693535E12, 100.0], [1.70169392E12, 100.0], [1.701693875E12, 100.0], [1.7016934E12, 100.0], [1.701693355E12, 100.0], [1.70169374E12, 100.0], [1.701693445E12, 100.0], [1.701693785E12, 100.0], [1.70169367E12, 100.0], [1.701693375E12, 100.0], [1.70169376E12, 100.0], [1.701693715E12, 100.0], [1.70169358E12, 100.0], [1.701693625E12, 100.0], [1.701693895E12, 100.0], [1.70169351E12, 100.0], [1.7016936E12, 100.0], [1.701693555E12, 100.0], [1.70169394E12, 100.0], [1.701693805E12, 100.0], [1.70169342E12, 100.0], [1.70169385E12, 100.0], [1.701693465E12, 100.0], [1.701693735E12, 100.0], [1.70169335E12, 100.0], [1.70169344E12, 100.0], [1.701693395E12, 100.0], [1.70169378E12, 100.0], [1.701693645E12, 100.0], [1.70169369E12, 100.0], [1.701693405E12, 100.0], [1.701693745E12, 100.0], [1.70169345E12, 100.0], [1.70169379E12, 100.0], [1.701693655E12, 100.0], [1.70169336E12, 100.0], [1.7016937E12, 100.0], [1.701693585E12, 100.0], [1.70169363E12, 100.0], [1.701693495E12, 100.0], [1.70169388E12, 100.0], [1.701693835E12, 100.0], [1.701693925E12, 100.0], [1.70169354E12, 100.0], [1.70169381E12, 100.0], [1.701693425E12, 100.0], [1.701693855E12, 100.0], [1.70169347E12, 100.0], [1.70169372E12, 100.0], [1.701693675E12, 100.0], [1.701693765E12, 100.0], [1.70169338E12, 100.0], [1.70169365E12, 100.0], [1.701693695E12, 100.0], [1.70169356E12, 100.0], [1.701693515E12, 100.0], [1.7016939E12, 100.0], [1.701693605E12, 100.0], [1.701693945E12, 100.0], [1.70169366E12, 100.0], [1.701693365E12, 100.0], [1.701693705E12, 100.0], [1.70169357E12, 100.0], [1.70169391E12, 100.0], [1.701693615E12, 100.0], [1.701693955E12, 100.0], [1.701693885E12, 100.0], [1.7016935E12, 100.0], [1.70169393E12, 100.0], [1.701693545E12, 100.0], [1.70169341E12, 100.0], [1.70169375E12, 100.0], [1.701693455E12, 100.0], [1.70169384E12, 100.0], [1.701693795E12, 100.0], [1.701693725E12, 100.0], [1.70169377E12, 100.0], [1.701693385E12, 100.0], [1.70169359E12, 100.0], [1.70169368E12, 100.0], [1.701693635E12, 100.0], [1.701693565E12, 100.0], [1.701693905E12, 100.0], [1.70169361E12, 100.0], [1.70169395E12, 100.0], [1.701693815E12, 100.0], [1.70169343E12, 100.0], [1.70169352E12, 100.0], [1.701693475E12, 100.0], [1.70169386E12, 100.0], [1.701693575E12, 100.0], [1.70169396E12, 100.0], [1.701693915E12, 100.0], [1.70169362E12, 100.0], [1.701693485E12, 100.0], [1.701693825E12, 100.0], [1.70169353E12, 100.0], [1.70169387E12, 100.0], [1.701693415E12, 100.0], [1.7016938E12, 100.0], [1.701693755E12, 100.0], [1.701693845E12, 100.0], [1.70169346E12, 100.0], [1.701693665E12, 100.0], [1.70169337E12, 100.0], [1.70169371E12, 100.0], [1.70169364E12, 100.0], [1.701693595E12, 100.0], [1.701693685E12, 100.0], [1.70169389E12, 100.0], [1.701693505E12, 100.0], [1.701693935E12, 100.0], [1.70169355E12, 100.0], [1.70169348E12, 100.0], [1.701693435E12, 100.0], [1.70169382E12, 100.0], [1.701693525E12, 100.0], [1.701693865E12, 100.0], [1.70169373E12, 100.0], [1.701693345E12, 100.0], [1.701693775E12, 100.0], [1.70169339E12, 100.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70169396E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 398.52059937320456, "minX": 100.0, "maxY": 398.52059937320456, "series": [{"data": [[100.0, 398.52059937320456]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[100.0, 398.52059937320456]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.701693345E12, "maxY": 7757824.0, "series": [{"data": [[1.70169349E12, 3454333.2], [1.70169383E12, 24019.8], [1.701693535E12, 4700141.8], [1.70169392E12, 26847.0], [1.701693875E12, 149989.8], [1.7016934E12, 1444008.2], [1.701693355E12, 141569.2], [1.70169374E12, 171684.0], [1.701693445E12, 2463348.8], [1.701693785E12, 191873.4], [1.70169367E12, 7559682.2], [1.701693375E12, 113252.6], [1.70169376E12, 19608.0], [1.701693715E12, 550707.8], [1.70169358E12, 5521218.6], [1.701693625E12, 6738656.8], [1.701693895E12, 232092.6], [1.70169351E12, 3907375.0], [1.7016936E12, 6002542.0], [1.701693555E12, 4898276.0], [1.70169394E12, 33948.0], [1.701693805E12, 21717.0], [1.70169342E12, 1812093.2], [1.70169385E12, 111948.0], [1.701693465E12, 3001284.0], [1.701693735E12, 172527.6], [1.70169335E12, 84941.4], [1.70169344E12, 2265135.6], [1.701693395E12, 1274104.0], [1.70169378E12, 40606.8], [1.701693645E12, 7021726.6], [1.70169369E12, 6958723.8], [1.701693405E12, 1500644.8], [1.701693745E12, 175012.8], [1.70169345E12, 2576605.8], [1.70169379E12, 166223.4], [1.701693655E12, 7418068.8], [1.70169336E12, 56633.6], [1.7016937E12, 5820338.0], [1.701693585E12, 5719404.2], [1.70169363E12, 6738660.6], [1.701693495E12, 3624199.0], [1.70169388E12, 27679.2], [1.701693835E12, 213784.2], [1.701693925E12, 28124.8], [1.70169354E12, 4558558.2], [1.70169381E12, 21945.0], [1.701693425E12, 1897070.8], [1.701693855E12, 23940.0], [1.70169347E12, 2944711.2], [1.70169372E12, 166633.8], [1.701693675E12, 7757824.0], [1.701693765E12, 19722.0], [1.70169338E12, 198198.8], [1.70169365E12, 7248229.8], [1.701693695E12, 6653122.6], [1.70169356E12, 5011551.0], [1.701693515E12, 4048946.8], [1.7016939E12, 240551.4], [1.701693605E12, 6229004.2], [1.701693945E12, 33948.0], [1.70169366E12, 7474777.0], [1.701693365E12, 141570.2], [1.701693705E12, 4316648.2], [1.70169357E12, 5407930.0], [1.70169391E12, 26505.0], [1.701693615E12, 6455549.8], [1.701693955E12, 13800.0], [1.701693885E12, 232001.4], [1.7016935E12, 3624149.0], [1.70169393E12, 28680.0], [1.701693545E12, 4700100.6], [1.70169341E12, 1557284.2], [1.70169375E12, 116337.0], [1.701693455E12, 2661523.8], [1.70169384E12, 127828.2], [1.701693795E12, 191485.8], [1.701693725E12, 167705.4], [1.70169377E12, 19630.8], [1.701693385E12, 198197.8], [1.70169359E12, 5747690.4], [1.70169368E12, 7281906.6], [1.701693635E12, 6795266.0], [1.701693565E12, 5011612.0], [1.701693905E12, 79116.0], [1.70169361E12, 6370549.4], [1.70169395E12, 25254.0], [1.701693815E12, 22230.0], [1.70169343E12, 2095264.6], [1.70169352E12, 4105541.4], [1.701693475E12, 3142913.2], [1.70169386E12, 32170.8], [1.701693575E12, 5436289.8], [1.70169396E12, 2415.0], [1.701693915E12, 26847.0], [1.70169362E12, 6455548.2], [1.701693485E12, 3312736.0], [1.701693825E12, 92248.8], [1.70169353E12, 4247090.2], [1.70169387E12, 232537.2], [1.701693415E12, 1783790.0], [1.7016938E12, 88851.6], [1.701693755E12, 19380.0], [1.701693845E12, 122401.8], [1.70169346E12, 2774761.8], [1.701693665E12, 7616296.0], [1.70169337E12, 113252.0], [1.70169371E12, 2492469.8], [1.70169364E12, 6993376.2], [1.701693595E12, 5861491.8], [1.701693685E12, 7455497.6], [1.70169389E12, 222642.0], [1.701693505E12, 3765791.0], [1.701693935E12, 33534.0], [1.70169355E12, 4869971.0], [1.70169348E12, 3199459.8], [1.701693435E12, 2265113.2], [1.70169382E12, 84816.0], [1.701693525E12, 4360391.2], [1.701693865E12, 218925.6], [1.70169373E12, 169369.8], [1.701693345E12, 56629.0], [1.701693775E12, 181180.2], [1.70169339E12, 1217480.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70169349E12, 3220.8], [1.70169383E12, 8395.2], [1.701693535E12, 4382.4], [1.70169392E12, 12434.4], [1.701693875E12, 7180.8], [1.7016934E12, 1346.4], [1.701693355E12, 132.0], [1.70169374E12, 105.6], [1.701693445E12, 2296.8], [1.701693785E12, 26.4], [1.70169367E12, 7048.8], [1.701693375E12, 105.6], [1.70169376E12, 9081.6], [1.701693715E12, 369.6], [1.70169358E12, 5148.0], [1.701693625E12, 6283.2], [1.701693895E12, 290.4], [1.70169351E12, 3643.2], [1.7016936E12, 5596.8], [1.701693555E12, 4567.2], [1.70169394E12, 12988.8], [1.701693805E12, 10058.4], [1.70169342E12, 1689.6], [1.70169385E12, 8421.6], [1.701693465E12, 2798.4], [1.701693735E12, 0.0], [1.70169335E12, 79.2], [1.70169344E12, 2112.0], [1.701693395E12, 1188.0], [1.70169378E12, 6151.2], [1.701693645E12, 6547.2], [1.70169369E12, 6468.0], [1.701693405E12, 1399.2], [1.701693745E12, 158.4], [1.70169345E12, 2402.4], [1.70169379E12, 1795.2], [1.701693655E12, 6916.8], [1.70169336E12, 52.8], [1.7016937E12, 5385.6], [1.701693585E12, 5332.8], [1.70169363E12, 6283.2], [1.701693495E12, 3379.2], [1.70169388E12, 9345.6], [1.701693835E12, 0.0], [1.701693925E12, 12566.4], [1.70169354E12, 4250.4], [1.70169381E12, 10164.0], [1.701693425E12, 1768.8], [1.701693855E12, 11088.0], [1.70169347E12, 2745.6], [1.70169372E12, 0.0], [1.701693675E12, 7233.6], [1.701693765E12, 9134.4], [1.70169338E12, 184.8], [1.70169365E12, 6758.4], [1.701693695E12, 6177.6], [1.70169356E12, 4672.8], [1.701693515E12, 3775.2], [1.7016939E12, 237.6], [1.701693605E12, 5808.0], [1.701693945E12, 12988.8], [1.70169366E12, 6969.6], [1.701693365E12, 132.0], [1.701693705E12, 3960.0], [1.70169357E12, 5042.4], [1.70169391E12, 12276.0], [1.701693615E12, 6019.2], [1.701693955E12, 5280.0], [1.701693885E12, 0.0], [1.7016935E12, 3379.2], [1.70169393E12, 12672.0], [1.701693545E12, 4382.4], [1.70169341E12, 1452.0], [1.70169375E12, 5491.2], [1.701693455E12, 2481.6], [1.70169384E12, 7339.2], [1.701693795E12, 343.2], [1.701693725E12, 0.0], [1.70169377E12, 7603.2], [1.701693385E12, 184.8], [1.70169359E12, 5359.2], [1.70169368E12, 6784.8], [1.701693635E12, 6336.0], [1.701693565E12, 4672.8], [1.701693905E12, 11827.2], [1.70169361E12, 5940.0], [1.70169395E12, 9662.4], [1.701693815E12, 10296.0], [1.70169343E12, 1953.6], [1.70169352E12, 3828.0], [1.701693475E12, 2930.4], [1.70169386E12, 8448.0], [1.701693575E12, 5068.8], [1.70169396E12, 924.0], [1.701693915E12, 12434.4], [1.70169362E12, 6019.2], [1.701693485E12, 3088.8], [1.701693825E12, 8976.0], [1.70169353E12, 3960.0], [1.70169387E12, 0.0], [1.701693415E12, 1663.2], [1.7016938E12, 8395.2], [1.701693755E12, 8976.0], [1.701693845E12, 3088.8], [1.70169346E12, 2587.2], [1.701693665E12, 7101.6], [1.70169337E12, 105.6], [1.70169371E12, 2217.6], [1.70169364E12, 6520.8], [1.701693595E12, 5464.8], [1.701693685E12, 6943.2], [1.70169389E12, 1372.8], [1.701693505E12, 3511.2], [1.701693935E12, 12830.4], [1.70169355E12, 4540.8], [1.70169348E12, 2983.2], [1.701693435E12, 2112.0], [1.70169382E12, 4540.8], [1.701693525E12, 4065.6], [1.701693865E12, 396.0], [1.70169373E12, 26.4], [1.701693345E12, 52.8], [1.701693775E12, 2270.4], [1.70169339E12, 1135.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70169396E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 44.64499999999999, "minX": 1.701693345E12, "maxY": 1032.4751552795046, "series": [{"data": [[1.70169349E12, 176.05737704918036], [1.70169383E12, 80.1793313069909], [1.701693535E12, 166.9518072289158], [1.70169392E12, 46.76645435244161], [1.701693875E12, 517.4971319311663], [1.7016934E12, 125.03921568627455], [1.701693355E12, 211.0], [1.70169374E12, 1012.753086419753], [1.701693445E12, 128.33333333333334], [1.701693785E12, 1023.0167130919216], [1.70169367E12, 314.621722846442], [1.701693375E12, 131.75], [1.70169376E12, 46.28197674418608], [1.701693715E12, 1028.6854304635765], [1.70169358E12, 174.77948717948715], [1.701693625E12, 213.53361344537822], [1.701693895E12, 1001.0812641083526], [1.70169351E12, 141.15217391304344], [1.7016936E12, 191.59433962264148], [1.701693555E12, 131.12138728323694], [1.70169394E12, 47.23983739837397], [1.701693805E12, 46.666666666666664], [1.70169342E12, 126.515625], [1.70169385E12, 446.2854251012148], [1.701693465E12, 134.00000000000006], [1.701693735E12, 1032.4751552795046], [1.70169335E12, 169.66666666666666], [1.70169344E12, 137.63749999999996], [1.701693395E12, 142.68888888888887], [1.70169378E12, 222.30281690140842], [1.701693645E12, 265.80241935483866], [1.70169369E12, 566.6223776223774], [1.701693405E12, 126.15094339622637], [1.701693745E12, 1007.1325301204824], [1.70169345E12, 129.5494505494506], [1.70169379E12, 912.0700808625336], [1.701693655E12, 279.1259541984731], [1.70169336E12, 160.5], [1.7016937E12, 605.91637630662], [1.701693585E12, 164.43069306930704], [1.70169363E12, 194.79411764705893], [1.701693495E12, 137.5156249999999], [1.70169388E12, 84.39945652173914], [1.701693835E12, 1026.2531328320797], [1.701693925E12, 48.294979079497914], [1.70169354E12, 155.5031055900621], [1.70169381E12, 46.48311688311689], [1.701693425E12, 124.53731343283582], [1.701693855E12, 62.14047619047615], [1.70169347E12, 128.79807692307693], [1.70169372E12, 1025.028938906752], [1.701693675E12, 305.98175182481737], [1.701693765E12, 46.50578034682081], [1.70169338E12, 169.28571428571428], [1.70169365E12, 261.7109375000002], [1.701693695E12, 565.5419580419576], [1.70169356E12, 130.135593220339], [1.701693515E12, 146.53146853146848], [1.7016939E12, 1005.7964989059084], [1.701693605E12, 230.30454545454546], [1.701693945E12, 47.1890243902439], [1.70169366E12, 226.92424242424235], [1.701693365E12, 289.8], [1.701693705E12, 795.0607142857144], [1.70169357E12, 148.95287958115185], [1.70169391E12, 47.124731182795635], [1.701693615E12, 175.82894736842104], [1.701693955E12, 44.64499999999999], [1.701693885E12, 1025.838337182449], [1.7016935E12, 134.75781249999997], [1.70169393E12, 47.51041666666663], [1.701693545E12, 148.46385542168676], [1.70169341E12, 126.41818181818181], [1.70169375E12, 600.2531017369729], [1.701693455E12, 142.21276595744686], [1.70169384E12, 557.8542094455856], [1.701693795E12, 999.0813008130082], [1.701693725E12, 1024.9265175718845], [1.70169377E12, 66.19047619047622], [1.701693385E12, 205.85714285714286], [1.70169359E12, 215.9802955665025], [1.70169368E12, 419.4569288389517], [1.701693635E12, 242.12499999999997], [1.701693565E12, 165.98305084745772], [1.701693905E12, 226.01459854014632], [1.70169361E12, 256.54222222222216], [1.70169395E12, 46.01366120218578], [1.701693815E12, 46.784615384615414], [1.70169343E12, 159.9864864864865], [1.70169352E12, 150.7172413793103], [1.701693475E12, 134.13513513513516], [1.70169386E12, 120.48843930635837], [1.701693575E12, 154.91666666666657], [1.70169396E12, 45.11428571428571], [1.701693915E12, 62.19532908704884], [1.70169362E12, 173.50438596491225], [1.701693485E12, 136.81196581196585], [1.701693825E12, 409.39495798319285], [1.70169353E12, 147.68666666666667], [1.70169387E12, 1025.4032258064517], [1.701693415E12, 124.25396825396822], [1.7016938E12, 350.2933333333331], [1.701693755E12, 46.005882352941164], [1.701693845E12, 681.8228228228224], [1.70169346E12, 131.173469387755], [1.701693665E12, 269.3903345724907], [1.70169337E12, 141.25], [1.70169371E12, 1024.9090909090914], [1.70169364E12, 294.19028340080985], [1.701693595E12, 271.06730769230774], [1.701693685E12, 550.3749999999999], [1.70169389E12, 969.6147186147189], [1.701693505E12, 145.03007518796989], [1.701693935E12, 47.444444444444436], [1.70169355E12, 183.35465116279067], [1.70169348E12, 127.63716814159291], [1.701693435E12, 132.70000000000002], [1.70169382E12, 486.5801282051281], [1.701693525E12, 155.33766233766235], [1.701693865E12, 992.1777251184842], [1.70169373E12, 1023.744479495268], [1.701693345E12, 417.5], [1.701693775E12, 823.390361445783], [1.70169339E12, 148.7209302325581]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70169396E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.701693345E12, "maxY": 367.44642857142867, "series": [{"data": [[1.70169349E12, 90.94262295081968], [1.70169383E12, 45.86018237082067], [1.701693535E12, 97.03012048192774], [1.70169392E12, 46.764331210191095], [1.701693875E12, 25.447418738049723], [1.7016934E12, 61.37254901960785], [1.701693355E12, 147.8], [1.70169374E12, 0.5617283950617281], [1.701693445E12, 62.71264367816093], [1.701693785E12, 0.1253481894150417], [1.70169367E12, 199.10112359550558], [1.701693375E12, 67.5], [1.70169376E12, 46.2761627906977], [1.701693715E12, 33.28145695364239], [1.70169358E12, 102.53333333333339], [1.701693625E12, 137.5714285714285], [1.701693895E12, 1.1331828442437921], [1.70169351E12, 72.73188405797104], [1.7016936E12, 118.6745283018868], [1.701693555E12, 64.5086705202312], [1.70169394E12, 47.23577235772357], [1.701693805E12, 46.65879265091862], [1.70169342E12, 61.65625000000001], [1.70169385E12, 82.75101214574896], [1.701693465E12, 68.00000000000001], [1.701693735E12, 0.0], [1.70169335E12, 106.66666666666667], [1.70169344E12, 70.46249999999998], [1.701693395E12, 77.97777777777776], [1.70169378E12, 37.65845070422535], [1.701693645E12, 184.76612903225808], [1.70169369E12, 305.83216783216807], [1.701693405E12, 61.69811320754717], [1.701693745E12, 0.8222891566265058], [1.70169345E12, 62.351648351648336], [1.70169379E12, 74.53099730458221], [1.701693655E12, 198.91221374045801], [1.70169336E12, 97.5], [1.7016937E12, 224.66550522648095], [1.701693585E12, 94.84158415841586], [1.70169363E12, 123.2731092436975], [1.701693495E12, 71.03125000000001], [1.70169388E12, 45.4021739130434], [1.701693835E12, 0.0], [1.701693925E12, 46.19037656903764], [1.70169354E12, 86.1366459627329], [1.70169381E12, 46.47272727272727], [1.701693425E12, 60.2537313432836], [1.701693855E12, 62.13095238095237], [1.70169347E12, 62.288461538461554], [1.70169372E12, 0.0], [1.701693675E12, 225.02554744525537], [1.701693765E12, 46.50289017341043], [1.70169338E12, 106.28571428571428], [1.70169365E12, 184.04687499999994], [1.701693695E12, 268.10839160839157], [1.70169356E12, 63.58757062146893], [1.701693515E12, 78.07692307692312], [1.7016939E12, 0.8884026258205686], [1.701693605E12, 152.52272727272722], [1.701693945E12, 47.18089430894309], [1.70169366E12, 150.88636363636348], [1.701693365E12, 171.4], [1.701693705E12, 239.77142857142843], [1.70169357E12, 78.77486910994759], [1.70169391E12, 47.11182795698925], [1.701693615E12, 105.25877192982458], [1.701693955E12, 44.635000000000005], [1.701693885E12, 0.0], [1.7016935E12, 68.40625000000001], [1.70169393E12, 47.50624999999999], [1.701693545E12, 80.5120481927711], [1.70169341E12, 61.618181818181824], [1.70169375E12, 104.41439205955338], [1.701693455E12, 74.52127659574467], [1.70169384E12, 117.81724845995892], [1.701693795E12, 2.281842818428183], [1.701693725E12, 0.0], [1.70169377E12, 45.25510204081635], [1.701693385E12, 141.42857142857142], [1.70169359E12, 138.3940886699507], [1.70169368E12, 270.07865168539337], [1.701693635E12, 161.85833333333343], [1.701693565E12, 96.11864406779662], [1.701693905E12, 38.91423357664234], [1.70169361E12, 165.62666666666678], [1.70169395E12, 46.01092896174864], [1.701693815E12, 46.77435897435898], [1.70169343E12, 84.77027027027025], [1.70169352E12, 80.42758620689656], [1.701693475E12, 67.14414414414412], [1.70169386E12, 43.39884393063581], [1.701693575E12, 83.73437500000011], [1.70169396E12, 45.11428571428571], [1.701693915E12, 62.1847133757961], [1.70169362E12, 103.03070175438587], [1.701693485E12, 67.42735042735046], [1.701693825E12, 116.26470588235294], [1.70169353E12, 74.66000000000001], [1.70169387E12, 0.0], [1.701693415E12, 60.57142857142859], [1.7016938E12, 49.633333333333375], [1.701693755E12, 45.9941176470588], [1.701693845E12, 16.336336336336306], [1.70169346E12, 66.37755102040813], [1.701693665E12, 186.27509293680296], [1.70169337E12, 78.5], [1.70169371E12, 214.96969696969697], [1.70169364E12, 215.02024291497978], [1.701693595E12, 185.06249999999997], [1.701693685E12, 367.44642857142867], [1.70169389E12, 59.64935064935063], [1.701693505E12, 76.90225563909776], [1.701693935E12, 47.436213991769534], [1.70169355E12, 103.56395348837212], [1.70169348E12, 60.63716814159296], [1.701693435E12, 66.10000000000001], [1.70169382E12, 26.054487179487197], [1.701693525E12, 85.18181818181814], [1.701693865E12, 1.632701421800949], [1.70169373E12, 2.315457413249212], [1.701693345E12, 358.5], [1.701693775E12, 10.566265060240971], [1.70169339E12, 83.09302325581395]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70169396E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.41955835962142, "minX": 1.701693345E12, "maxY": 77.8, "series": [{"data": [[1.70169349E12, 28.262295081967213], [1.70169383E12, 24.817629179331306], [1.701693535E12, 24.632530120481913], [1.70169392E12, 24.61146496815285], [1.701693875E12, 23.957934990439764], [1.7016934E12, 23.74509803921569], [1.701693355E12, 26.2], [1.70169374E12, 23.660493827160494], [1.701693445E12, 23.827586206896548], [1.701693785E12, 24.314763231197777], [1.70169367E12, 33.19475655430709], [1.701693375E12, 23.5], [1.70169376E12, 24.122093023255808], [1.701693715E12, 23.771523178807946], [1.70169358E12, 25.11794871794871], [1.701693625E12, 25.44537815126051], [1.701693895E12, 24.05191873589165], [1.70169351E12, 24.40579710144928], [1.7016936E12, 25.08018867924526], [1.701693555E12, 24.734104046242773], [1.70169394E12, 24.924796747967477], [1.701693805E12, 24.241469816272975], [1.70169342E12, 23.421875000000007], [1.70169385E12, 24.38259109311741], [1.701693465E12, 24.05660377358491], [1.701693735E12, 31.248447204968926], [1.70169335E12, 24.0], [1.70169344E12, 24.275], [1.701693395E12, 23.511111111111113], [1.70169378E12, 24.45422535211268], [1.701693645E12, 25.750000000000004], [1.70169369E12, 25.660839160839156], [1.701693405E12, 23.924528301886784], [1.701693745E12, 23.572289156626503], [1.70169345E12, 23.868131868131872], [1.70169379E12, 23.91105121293803], [1.701693655E12, 25.68702290076336], [1.70169336E12, 24.0], [1.7016937E12, 25.56445993031359], [1.701693585E12, 24.584158415841586], [1.70169363E12, 26.542016806722685], [1.701693495E12, 24.312500000000004], [1.70169388E12, 24.654891304347828], [1.701693835E12, 24.922305764411014], [1.701693925E12, 26.228033472803364], [1.70169354E12, 25.02484472049689], [1.70169381E12, 24.241558441558443], [1.701693425E12, 24.25373134328358], [1.701693855E12, 33.82380952380952], [1.70169347E12, 24.02884615384615], [1.70169372E12, 23.64630225080387], [1.701693675E12, 25.635036496350374], [1.701693765E12, 24.098265895953755], [1.70169338E12, 26.71428571428571], [1.70169365E12, 26.304687500000007], [1.701693695E12, 25.751748251748253], [1.70169356E12, 24.943502824858747], [1.701693515E12, 24.56643356643357], [1.7016939E12, 23.894967177242894], [1.701693605E12, 25.21818181818182], [1.701693945E12, 24.888211382113816], [1.70169366E12, 25.90151515151516], [1.701693365E12, 77.8], [1.701693705E12, 24.825], [1.70169357E12, 24.544502617801047], [1.70169391E12, 24.84731182795698], [1.701693615E12, 25.250000000000004], [1.701693955E12, 23.525], [1.701693885E12, 24.429561200923814], [1.7016935E12, 24.367187499999993], [1.70169393E12, 24.962500000000006], [1.701693545E12, 24.795180722891565], [1.70169341E12, 23.599999999999994], [1.70169375E12, 23.49875930521092], [1.701693455E12, 24.351063829787236], [1.70169384E12, 24.0164271047228], [1.701693795E12, 32.002710027100285], [1.701693725E12, 23.702875399361044], [1.70169377E12, 24.156462585033992], [1.701693385E12, 27.285714285714285], [1.70169359E12, 25.29064039408867], [1.70169368E12, 25.771535580524333], [1.701693635E12, 27.279166666666683], [1.701693565E12, 25.000000000000004], [1.701693905E12, 24.28832116788321], [1.70169361E12, 30.084444444444436], [1.70169395E12, 24.23497267759563], [1.701693815E12, 24.435897435897438], [1.70169343E12, 34.999999999999986], [1.70169352E12, 24.77241379310345], [1.701693475E12, 24.063063063063062], [1.70169386E12, 24.552023121387275], [1.701693575E12, 24.828125000000007], [1.70169396E12, 24.171428571428567], [1.701693915E12, 32.6263269639066], [1.70169362E12, 25.0438596491228], [1.701693485E12, 24.794871794871806], [1.701693825E12, 24.491596638655466], [1.70169353E12, 24.90666666666667], [1.70169387E12, 24.05299539170507], [1.701693415E12, 23.492063492063497], [1.7016938E12, 24.0088888888889], [1.701693755E12, 23.938235294117657], [1.701693845E12, 24.58858858858858], [1.70169346E12, 24.520408163265298], [1.701693665E12, 25.739776951672866], [1.70169337E12, 24.0], [1.70169371E12, 24.484848484848488], [1.70169364E12, 26.22672064777329], [1.701693595E12, 24.865384615384617], [1.701693685E12, 26.042857142857166], [1.70169389E12, 23.824675324675336], [1.701693505E12, 24.142857142857135], [1.701693935E12, 25.039094650205744], [1.70169355E12, 31.13953488372096], [1.70169348E12, 24.699115044247787], [1.701693435E12, 23.787499999999998], [1.70169382E12, 24.657051282051288], [1.701693525E12, 24.863636363636374], [1.701693865E12, 25.635071090047393], [1.70169373E12, 23.41955835962142], [1.701693345E12, 38.5], [1.701693775E12, 24.13975903614458], [1.70169339E12, 23.48837209302325]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70169396E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.701693345E12, "maxY": 2366.0, "series": [{"data": [[1.70169349E12, 590.0], [1.70169366E12, 770.0], [1.701693535E12, 661.0], [1.701693365E12, 544.0], [1.701693705E12, 1357.0], [1.70169357E12, 436.0], [1.7016934E12, 197.0], [1.701693355E12, 376.0], [1.701693615E12, 440.0], [1.701693445E12, 233.0], [1.70169367E12, 1175.0], [1.7016935E12, 253.0], [1.701693375E12, 170.0], [1.701693715E12, 2366.0], [1.701693545E12, 489.0], [1.70169341E12, 232.0], [1.70169358E12, 472.0], [1.701693455E12, 407.0], [1.701693625E12, 467.0], [1.70169351E12, 309.0], [1.7016936E12, 426.0], [1.701693555E12, 287.0], [1.701693385E12, 293.0], [1.70169359E12, 657.0], [1.70169342E12, 200.0], [1.70169368E12, 1174.0], [1.701693635E12, 703.0], [1.701693465E12, 303.0], [1.701693565E12, 471.0], [1.70169335E12, 213.0], [1.70169361E12, 948.0], [1.70169344E12, 284.0], [1.701693395E12, 301.0], [1.701693645E12, 738.0], [1.70169343E12, 418.0], [1.70169369E12, 1501.0], [1.70169352E12, 295.0], [1.701693475E12, 224.0], [1.701693575E12, 349.0], [1.701693405E12, 237.0], [1.70169345E12, 205.0], [1.70169362E12, 402.0], [1.701693655E12, 914.0], [1.701693485E12, 429.0], [1.70169353E12, 734.0], [1.70169336E12, 200.0], [1.7016937E12, 1671.0], [1.701693415E12, 191.0], [1.701693585E12, 466.0], [1.70169363E12, 564.0], [1.70169346E12, 359.0], [1.701693495E12, 287.0], [1.701693665E12, 719.0], [1.70169337E12, 164.0], [1.70169371E12, 1569.0], [1.70169354E12, 526.0], [1.70169364E12, 1042.0], [1.701693595E12, 1032.0], [1.701693425E12, 245.0], [1.701693685E12, 1425.0], [1.70169347E12, 204.0], [1.701693675E12, 722.0], [1.701693505E12, 518.0], [1.70169355E12, 530.0], [1.70169338E12, 289.0], [1.70169365E12, 713.0], [1.70169348E12, 275.0], [1.701693435E12, 224.0], [1.701693695E12, 1454.0], [1.701693525E12, 406.0], [1.70169356E12, 278.0], [1.701693515E12, 376.0], [1.701693345E12, 507.0], [1.701693605E12, 955.0], [1.70169339E12, 303.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70169349E12, 111.0], [1.70169366E12, 114.0], [1.701693535E12, 113.0], [1.701693365E12, 121.0], [1.701693705E12, 196.0], [1.70169357E12, 113.0], [1.7016934E12, 113.0], [1.701693355E12, 119.0], [1.701693615E12, 112.0], [1.701693445E12, 113.0], [1.70169367E12, 118.0], [1.7016935E12, 112.0], [1.701693375E12, 116.0], [1.701693715E12, 760.0], [1.701693545E12, 109.0], [1.70169341E12, 114.0], [1.70169358E12, 113.0], [1.701693455E12, 112.0], [1.701693625E12, 116.0], [1.70169351E12, 111.0], [1.7016936E12, 115.0], [1.701693555E12, 112.0], [1.701693385E12, 119.0], [1.70169359E12, 117.0], [1.70169342E12, 114.0], [1.70169368E12, 117.0], [1.701693635E12, 114.0], [1.701693465E12, 112.0], [1.701693565E12, 112.0], [1.70169335E12, 123.0], [1.70169361E12, 111.0], [1.70169344E12, 112.0], [1.701693395E12, 115.0], [1.701693645E12, 114.0], [1.70169343E12, 113.0], [1.70169369E12, 131.0], [1.70169352E12, 113.0], [1.701693475E12, 113.0], [1.701693575E12, 113.0], [1.701693405E12, 113.0], [1.70169345E12, 112.0], [1.70169362E12, 112.0], [1.701693655E12, 117.0], [1.701693485E12, 113.0], [1.70169353E12, 114.0], [1.70169336E12, 121.0], [1.7016937E12, 124.0], [1.701693415E12, 112.0], [1.701693585E12, 114.0], [1.70169363E12, 113.0], [1.70169346E12, 112.0], [1.701693495E12, 112.0], [1.701693665E12, 115.0], [1.70169337E12, 120.0], [1.70169371E12, 514.0], [1.70169354E12, 113.0], [1.70169364E12, 115.0], [1.701693595E12, 115.0], [1.701693425E12, 113.0], [1.701693685E12, 160.0], [1.70169347E12, 114.0], [1.701693675E12, 122.0], [1.701693505E12, 114.0], [1.70169355E12, 112.0], [1.70169338E12, 113.0], [1.70169365E12, 115.0], [1.70169348E12, 112.0], [1.701693435E12, 114.0], [1.701693695E12, 117.0], [1.701693525E12, 113.0], [1.70169356E12, 113.0], [1.701693515E12, 112.0], [1.701693345E12, 328.0], [1.701693605E12, 113.0], [1.70169339E12, 113.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70169349E12, 324.80000000000007], [1.70169366E12, 341.0], [1.701693535E12, 267.7000000000001], [1.701693365E12, 544.0], [1.701693705E12, 975.1000000000001], [1.70169357E12, 204.0], [1.7016934E12, 147.6000000000001], [1.701693355E12, 376.0], [1.701693615E12, 288.1], [1.701693445E12, 163.20000000000002], [1.70169367E12, 546.8000000000004], [1.7016935E12, 189.20000000000002], [1.701693375E12, 170.0], [1.701693715E12, 1842.0], [1.701693545E12, 200.90000000000003], [1.70169341E12, 138.99999999999997], [1.70169358E12, 270.4], [1.701693455E12, 209.5], [1.701693625E12, 312.5], [1.70169351E12, 199.20000000000002], [1.7016936E12, 284.70000000000005], [1.701693555E12, 150.6], [1.701693385E12, 293.0], [1.70169359E12, 358.4], [1.70169342E12, 156.0], [1.70169368E12, 802.8000000000001], [1.701693635E12, 435.40000000000003], [1.701693465E12, 186.3], [1.701693565E12, 266.80000000000007], [1.70169335E12, 213.0], [1.70169361E12, 495.8000000000001], [1.70169344E12, 191.50000000000003], [1.701693395E12, 213.2], [1.701693645E12, 428.1], [1.70169343E12, 288.0], [1.70169369E12, 1020.0], [1.70169352E12, 204.20000000000002], [1.701693475E12, 185.59999999999997], [1.701693575E12, 233.10000000000005], [1.701693405E12, 141.4], [1.70169345E12, 170.8], [1.70169362E12, 271.99999999999994], [1.701693655E12, 434.70000000000005], [1.701693485E12, 171.20000000000002], [1.70169353E12, 196.0], [1.70169336E12, 200.0], [1.7016937E12, 983.0], [1.701693415E12, 129.0], [1.701693585E12, 243.70000000000002], [1.70169363E12, 307.1], [1.70169346E12, 155.80000000000007], [1.701693495E12, 193.0], [1.701693665E12, 406.0], [1.70169337E12, 164.0], [1.70169371E12, 1296.0], [1.70169354E12, 219.8], [1.70169364E12, 445.80000000000007], [1.701693595E12, 472.0000000000001], [1.701693425E12, 132.40000000000003], [1.701693685E12, 828.4], [1.70169347E12, 162.0], [1.701693675E12, 443.5], [1.701693505E12, 194.40000000000003], [1.70169355E12, 307.5000000000001], [1.70169338E12, 289.0], [1.70169365E12, 411.50000000000006], [1.70169348E12, 146.80000000000007], [1.701693435E12, 178.0], [1.701693695E12, 1126.0], [1.701693525E12, 233.5], [1.70169356E12, 148.40000000000003], [1.701693515E12, 213.79999999999995], [1.701693345E12, 507.0], [1.701693605E12, 398.6000000000001], [1.70169339E12, 215.40000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70169349E12, 586.78], [1.70169366E12, 576.3000000000004], [1.701693535E12, 536.3800000000024], [1.701693365E12, 544.0], [1.701693705E12, 1265.2000000000016], [1.70169357E12, 427.71999999999986], [1.7016934E12, 197.0], [1.701693355E12, 376.0], [1.701693615E12, 401.5400000000006], [1.701693445E12, 233.0], [1.70169367E12, 1034.3599999999994], [1.7016935E12, 247.19999999999987], [1.701693375E12, 170.0], [1.701693715E12, 2366.0], [1.701693545E12, 397.21000000000174], [1.70169341E12, 232.0], [1.70169358E12, 394.2399999999993], [1.701693455E12, 407.0], [1.701693625E12, 439.63999999999965], [1.70169351E12, 302.75999999999976], [1.7016936E12, 415.9000000000003], [1.701693555E12, 245.5599999999995], [1.701693385E12, 293.0], [1.70169359E12, 537.6000000000001], [1.70169342E12, 200.0], [1.70169368E12, 1128.0999999999992], [1.701693635E12, 657.54], [1.701693465E12, 302.1599999999999], [1.701693565E12, 387.53999999999985], [1.70169335E12, 213.0], [1.70169361E12, 715.44], [1.70169344E12, 284.0], [1.701693395E12, 301.0], [1.701693645E12, 614.4399999999996], [1.70169343E12, 418.0], [1.70169369E12, 1441.4199999999998], [1.70169352E12, 293.15999999999997], [1.701693475E12, 222.79999999999995], [1.701693575E12, 307.1499999999997], [1.701693405E12, 237.0], [1.70169345E12, 205.0], [1.70169362E12, 363.2700000000003], [1.701693655E12, 691.6200000000001], [1.701693485E12, 399.8399999999989], [1.70169353E12, 691.1600000000008], [1.70169336E12, 200.0], [1.7016937E12, 1500.0999999999995], [1.701693415E12, 191.0], [1.701693585E12, 426.28], [1.70169363E12, 531.5699999999995], [1.70169346E12, 359.0], [1.701693495E12, 281.1999999999999], [1.701693665E12, 639.0000000000003], [1.70169337E12, 164.0], [1.70169371E12, 1569.0], [1.70169354E12, 411.91999999999916], [1.70169364E12, 739.9200000000018], [1.701693595E12, 857.8399999999993], [1.701693425E12, 245.0], [1.701693685E12, 1253.4400000000014], [1.70169347E12, 203.95], [1.701693675E12, 595.75], [1.701693505E12, 506.77999999999986], [1.70169355E12, 516.1300000000002], [1.70169338E12, 289.0], [1.70169365E12, 688.0600000000003], [1.70169348E12, 262.67999999999995], [1.701693435E12, 224.0], [1.701693695E12, 1443.65], [1.701693525E12, 396.6499999999998], [1.70169356E12, 261.62], [1.701693515E12, 366.32000000000005], [1.701693345E12, 507.0], [1.701693605E12, 733.4799999999999], [1.70169339E12, 303.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70169349E12, 124.0], [1.70169366E12, 210.0], [1.701693535E12, 128.0], [1.701693365E12, 133.0], [1.701693705E12, 579.5], [1.70169357E12, 127.0], [1.7016934E12, 120.0], [1.701693355E12, 179.0], [1.701693615E12, 143.5], [1.701693445E12, 120.0], [1.70169367E12, 271.0], [1.7016935E12, 123.0], [1.701693375E12, 120.5], [1.701693715E12, 1039.5], [1.701693545E12, 126.5], [1.70169341E12, 121.0], [1.70169358E12, 143.0], [1.701693455E12, 123.0], [1.701693625E12, 206.5], [1.70169351E12, 124.0], [1.7016936E12, 182.5], [1.701693555E12, 123.0], [1.701693385E12, 178.0], [1.70169359E12, 196.0], [1.70169342E12, 120.0], [1.70169368E12, 316.0], [1.701693635E12, 206.5], [1.701693465E12, 122.0], [1.701693565E12, 136.0], [1.70169335E12, 173.0], [1.70169361E12, 205.0], [1.70169344E12, 121.0], [1.701693395E12, 120.0], [1.701693645E12, 252.0], [1.70169343E12, 122.0], [1.70169369E12, 360.0], [1.70169352E12, 129.0], [1.701693475E12, 122.0], [1.701693575E12, 128.0], [1.701693405E12, 120.0], [1.70169345E12, 120.0], [1.70169362E12, 146.5], [1.701693655E12, 269.5], [1.701693485E12, 124.0], [1.70169353E12, 126.0], [1.70169336E12, 160.5], [1.7016937E12, 320.0], [1.701693415E12, 120.0], [1.701693585E12, 131.0], [1.70169363E12, 174.0], [1.70169346E12, 121.0], [1.701693495E12, 123.0], [1.701693665E12, 255.0], [1.70169337E12, 140.5], [1.70169371E12, 1044.5], [1.70169354E12, 127.0], [1.70169364E12, 281.0], [1.701693595E12, 228.0], [1.701693425E12, 120.0], [1.701693685E12, 478.0], [1.70169347E12, 121.0], [1.701693675E12, 296.5], [1.701693505E12, 124.0], [1.70169355E12, 137.5], [1.70169338E12, 121.0], [1.70169365E12, 231.0], [1.70169348E12, 122.0], [1.701693435E12, 121.0], [1.701693695E12, 303.5], [1.701693525E12, 126.0], [1.70169356E12, 123.0], [1.701693515E12, 125.0], [1.701693345E12, 417.5], [1.701693605E12, 192.5], [1.70169339E12, 121.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70169349E12, 404.9499999999998], [1.70169366E12, 401.0], [1.701693535E12, 333.6], [1.701693365E12, 544.0], [1.701693705E12, 1080.3499999999997], [1.70169357E12, 237.5999999999998], [1.7016934E12, 175.6], [1.701693355E12, 376.0], [1.701693615E12, 301.0], [1.701693445E12, 176.79999999999998], [1.70169367E12, 661.1999999999998], [1.7016935E12, 207.84999999999997], [1.701693375E12, 170.0], [1.701693715E12, 2366.0], [1.701693545E12, 244.3], [1.70169341E12, 180.1999999999999], [1.70169358E12, 333.0], [1.701693455E12, 234.25], [1.701693625E12, 344.49999999999983], [1.70169351E12, 216.0], [1.7016936E12, 312.49999999999994], [1.701693555E12, 194.59999999999997], [1.701693385E12, 293.0], [1.70169359E12, 418.9999999999999], [1.70169342E12, 184.25], [1.70169368E12, 873.5], [1.701693635E12, 518.0], [1.701693465E12, 215.49999999999974], [1.701693565E12, 290.2], [1.70169335E12, 213.0], [1.70169361E12, 561.5999999999999], [1.70169344E12, 209.70000000000002], [1.701693395E12, 276.7999999999998], [1.701693645E12, 483.54999999999995], [1.70169343E12, 406.25], [1.70169369E12, 1215.0], [1.70169352E12, 230.7], [1.701693475E12, 196.39999999999998], [1.701693575E12, 272.7], [1.701693405E12, 164.49999999999994], [1.70169345E12, 189.2], [1.70169362E12, 300.65], [1.701693655E12, 535.25], [1.701693485E12, 199.39999999999992], [1.70169353E12, 230.4999999999999], [1.70169336E12, 200.0], [1.7016937E12, 1147.0], [1.701693415E12, 169.99999999999994], [1.701693585E12, 297.7], [1.70169363E12, 371.7999999999997], [1.70169346E12, 192.59999999999997], [1.701693495E12, 215.69999999999996], [1.701693665E12, 444.0], [1.70169337E12, 164.0], [1.70169371E12, 1402.5], [1.70169354E12, 252.40000000000003], [1.70169364E12, 524.8], [1.701693595E12, 579.0], [1.701693425E12, 158.79999999999993], [1.701693685E12, 919.8], [1.70169347E12, 189.0], [1.701693675E12, 524.5], [1.701693505E12, 223.29999999999995], [1.70169355E12, 389.54999999999995], [1.70169338E12, 289.0], [1.70169365E12, 508.29999999999995], [1.70169348E12, 174.3], [1.701693435E12, 198.8], [1.701693695E12, 1310.5], [1.701693525E12, 286.75], [1.70169356E12, 194.39999999999998], [1.701693515E12, 265.3999999999997], [1.701693345E12, 507.0], [1.701693605E12, 488.84999999999997], [1.70169339E12, 290.4]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701693715E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 1127.0, "series": [{"data": [[2.0, 189.0], [3.0, 130.0], [4.0, 124.0], [5.0, 177.0], [7.0, 178.0], [8.0, 122.5], [9.0, 120.0], [10.0, 120.0], [11.0, 121.0], [12.0, 121.0], [13.0, 120.0], [14.0, 119.0], [15.0, 121.0], [16.0, 121.0], [17.0, 122.0], [18.0, 120.0], [19.0, 121.0], [20.0, 121.0], [21.0, 121.0], [22.0, 123.0], [23.0, 123.0], [24.0, 125.0], [25.0, 123.0], [26.0, 123.0], [27.0, 132.5], [28.0, 125.0], [29.0, 124.0], [30.0, 128.0], [31.0, 128.0], [33.0, 126.0], [32.0, 123.0], [34.0, 129.0], [35.0, 124.0], [36.0, 127.0], [37.0, 130.0], [38.0, 139.0], [39.0, 127.5], [41.0, 159.0], [40.0, 165.0], [42.0, 177.5], [43.0, 199.0], [45.0, 196.0], [44.0, 162.0], [47.0, 215.0], [46.0, 201.5], [49.0, 236.5], [48.0, 210.0], [50.0, 244.0], [51.0, 265.0], [53.0, 303.0], [52.0, 231.5], [54.0, 277.0], [55.0, 283.0], [57.0, 333.5], [56.0, 271.5], [58.0, 326.5], [59.0, 336.0], [60.0, 339.0], [61.0, 560.0], [62.0, 1127.0], [63.0, 1043.0], [65.0, 441.0], [67.0, 329.5], [69.0, 646.0], [80.0, 375.0], [1.0, 328.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[7.0, 46.0], [13.0, 45.0], [14.0, 44.0], [17.0, 1025.0], [18.0, 51.0], [20.0, 46.0], [24.0, 49.5], [27.0, 46.0], [33.0, 48.0], [36.0, 1025.0], [41.0, 44.0], [44.0, 1028.0], [47.0, 1032.0], [46.0, 44.0], [48.0, 1025.0], [49.0, 1026.0], [50.0, 1028.0], [53.0, 47.0], [52.0, 1025.5], [55.0, 1027.0], [54.0, 1026.0], [57.0, 1025.0], [56.0, 1026.0], [59.0, 1025.0], [58.0, 1025.0], [61.0, 1024.0], [60.0, 1025.0], [62.0, 1025.0], [63.0, 1025.0], [65.0, 1024.0], [67.0, 46.0], [64.0, 1025.0], [66.0, 1024.0], [69.0, 47.0], [68.0, 46.0], [70.0, 72.0], [71.0, 47.0], [75.0, 1023.0], [72.0, 46.0], [74.0, 1025.0], [73.0, 70.5], [77.0, 47.0], [76.0, 47.0], [78.0, 46.0], [79.0, 46.0], [80.0, 47.0], [81.0, 1025.0], [83.0, 48.0], [82.0, 47.0], [84.0, 53.0], [87.0, 1025.0], [85.0, 1024.0], [86.0, 1025.0], [88.0, 48.0], [89.0, 1024.0], [91.0, 1025.0], [90.0, 59.0], [93.0, 47.0], [92.0, 1024.0], [94.0, 46.0], [95.0, 48.0], [99.0, 46.0], [96.0, 46.0], [97.0, 46.5], [98.0, 47.0], [103.0, 918.0], [100.0, 47.0], [112.0, 955.5], [134.0, 920.0], [130.0, 49.5], [147.0, 262.0], [156.0, 754.5], [161.0, 377.0], [173.0, 59.0], [174.0, 1023.0], [1.0, 43.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 174.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 809.5, "series": [{"data": [[2.0, 127.0], [3.0, 67.5], [4.0, 61.0], [5.0, 106.0], [7.0, 115.0], [8.0, 59.0], [9.0, 56.0], [10.0, 56.0], [11.0, 56.0], [12.0, 56.0], [13.0, 56.0], [14.0, 56.0], [15.0, 56.0], [16.0, 56.0], [17.0, 57.0], [18.0, 55.0], [19.0, 56.0], [20.0, 56.0], [21.0, 56.0], [22.0, 57.0], [23.0, 56.0], [24.0, 57.0], [25.0, 57.0], [26.0, 57.0], [27.0, 61.0], [28.0, 57.0], [29.0, 57.0], [30.0, 60.0], [31.0, 59.0], [33.0, 58.5], [32.0, 57.0], [34.0, 59.0], [35.0, 57.0], [36.0, 59.0], [37.0, 60.0], [38.0, 63.5], [39.0, 59.0], [41.0, 79.0], [40.0, 92.5], [42.0, 111.0], [43.0, 130.5], [45.0, 125.0], [44.0, 88.0], [47.0, 141.0], [46.0, 134.5], [49.0, 156.0], [48.0, 137.0], [50.0, 164.5], [51.0, 183.0], [53.0, 220.0], [52.0, 157.5], [54.0, 201.5], [55.0, 205.0], [57.0, 235.5], [56.0, 189.0], [58.0, 236.0], [59.0, 231.0], [60.0, 254.0], [61.0, 412.0], [62.0, 809.5], [63.0, 792.0], [65.0, 333.0], [67.0, 240.5], [69.0, 474.5], [80.0, 251.0], [1.0, 271.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[7.0, 46.0], [13.0, 45.0], [14.0, 44.0], [17.0, 0.0], [18.0, 47.0], [20.0, 46.0], [24.0, 47.0], [27.0, 45.0], [33.0, 43.0], [36.0, 0.0], [41.0, 44.0], [44.0, 0.0], [47.0, 0.0], [46.0, 44.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [53.0, 43.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [61.0, 0.0], [60.0, 0.0], [62.0, 0.0], [63.0, 0.0], [65.0, 0.0], [67.0, 45.0], [64.0, 0.0], [66.0, 0.0], [69.0, 45.0], [68.0, 45.0], [70.0, 42.0], [71.0, 45.0], [75.0, 0.0], [72.0, 44.0], [74.0, 0.0], [73.0, 41.5], [77.0, 45.0], [76.0, 45.0], [78.0, 45.0], [79.0, 46.0], [80.0, 45.0], [81.0, 0.0], [83.0, 46.0], [82.0, 45.0], [84.0, 45.0], [87.0, 0.0], [85.0, 0.0], [86.0, 0.0], [88.0, 44.0], [89.0, 0.0], [91.0, 0.0], [90.0, 43.0], [93.0, 46.0], [92.0, 0.0], [94.0, 46.0], [95.0, 46.0], [99.0, 46.0], [96.0, 46.0], [97.0, 46.0], [98.0, 47.0], [103.0, 44.0], [100.0, 47.0], [112.0, 45.0], [134.0, 47.5], [130.0, 43.0], [147.0, 45.0], [156.0, 72.0], [161.0, 48.0], [173.0, 44.0], [174.0, 0.0], [1.0, 43.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 174.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701693345E12, "maxY": 98.4, "series": [{"data": [[1.70169349E12, 24.6], [1.70169383E12, 80.8], [1.701693535E12, 32.2], [1.70169392E12, 94.2], [1.701693875E12, 87.6], [1.7016934E12, 10.2], [1.701693355E12, 1.0], [1.70169374E12, 64.8], [1.701693445E12, 17.4], [1.701693785E12, 72.2], [1.70169367E12, 54.0], [1.701693375E12, 0.8], [1.70169376E12, 69.0], [1.701693715E12, 60.2], [1.70169358E12, 39.4], [1.701693625E12, 47.2], [1.701693895E12, 90.4], [1.70169351E12, 28.0], [1.7016936E12, 42.8], [1.701693555E12, 34.8], [1.70169394E12, 98.4], [1.701693805E12, 76.2], [1.70169342E12, 13.2], [1.70169385E12, 83.2], [1.701693465E12, 20.6], [1.701693735E12, 64.4], [1.70169335E12, 0.4], [1.70169344E12, 15.8], [1.701693395E12, 9.2], [1.70169378E12, 70.6], [1.701693645E12, 49.8], [1.70169369E12, 57.4], [1.701693405E12, 10.4], [1.701693745E12, 66.8], [1.70169345E12, 18.2], [1.70169379E12, 73.6], [1.701693655E12, 52.0], [1.70169336E12, 0.4], [1.7016937E12, 58.4], [1.701693585E12, 40.4], [1.70169363E12, 48.0], [1.701693495E12, 25.4], [1.70169388E12, 88.6], [1.701693835E12, 80.6], [1.701693925E12, 95.6], [1.70169354E12, 31.8], [1.70169381E12, 77.0], [1.701693425E12, 13.6], [1.701693855E12, 84.0], [1.70169347E12, 21.0], [1.70169372E12, 62.4], [1.701693675E12, 54.8], [1.701693765E12, 69.0], [1.70169338E12, 1.4], [1.70169365E12, 51.4], [1.701693695E12, 57.4], [1.70169356E12, 35.4], [1.701693515E12, 28.2], [1.7016939E12, 92.4], [1.701693605E12, 44.2], [1.701693945E12, 98.4], [1.70169366E12, 52.8], [1.701693365E12, 1.6], [1.701693705E12, 59.8], [1.70169357E12, 37.6], [1.70169391E12, 93.0], [1.701693615E12, 45.4], [1.701693955E12, 39.6], [1.701693885E12, 89.2], [1.7016935E12, 25.8], [1.70169393E12, 96.2], [1.701693545E12, 33.6], [1.70169341E12, 11.2], [1.70169375E12, 67.6], [1.701693455E12, 19.0], [1.70169384E12, 81.8], [1.701693795E12, 74.8], [1.701693725E12, 63.0], [1.70169377E12, 70.4], [1.701693385E12, 1.6], [1.70169359E12, 40.8], [1.70169368E12, 55.8], [1.701693635E12, 48.6], [1.701693565E12, 36.2], [1.701693905E12, 91.6], [1.70169361E12, 44.6], [1.70169395E12, 72.8], [1.701693815E12, 78.0], [1.70169343E12, 14.6], [1.70169352E12, 29.4], [1.701693475E12, 22.4], [1.70169386E12, 84.6], [1.701693575E12, 38.4], [1.70169396E12, 6.8], [1.701693915E12, 94.2], [1.70169362E12, 46.2], [1.701693485E12, 23.4], [1.701693825E12, 79.6], [1.70169353E12, 31.4], [1.70169387E12, 87.0], [1.701693415E12, 12.4], [1.7016938E12, 75.6], [1.701693755E12, 68.0], [1.701693845E12, 82.2], [1.70169346E12, 20.0], [1.701693665E12, 53.4], [1.70169337E12, 0.2], [1.70169371E12, 60.6], [1.70169364E12, 49.4], [1.701693595E12, 41.4], [1.701693685E12, 56.8], [1.70169389E12, 90.0], [1.701693505E12, 26.4], [1.701693935E12, 97.2], [1.70169355E12, 34.0], [1.70169348E12, 22.4], [1.701693435E12, 16.0], [1.70169382E12, 77.8], [1.701693525E12, 30.6], [1.701693865E12, 85.8], [1.70169373E12, 63.6], [1.701693345E12, 0.6], [1.701693775E12, 71.4], [1.70169339E12, 8.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70169396E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701693345E12, "maxY": 98.4, "series": [{"data": [[1.70169349E12, 24.4], [1.70169366E12, 52.8], [1.701693535E12, 33.2], [1.701693365E12, 1.0], [1.701693705E12, 30.0], [1.70169357E12, 38.2], [1.7016934E12, 10.2], [1.701693355E12, 1.0], [1.701693615E12, 45.6], [1.701693445E12, 17.4], [1.70169367E12, 53.4], [1.7016935E12, 25.6], [1.701693375E12, 0.8], [1.701693715E12, 2.8], [1.701693545E12, 33.2], [1.70169341E12, 11.0], [1.70169358E12, 39.0], [1.701693455E12, 18.8], [1.701693625E12, 47.6], [1.70169351E12, 27.6], [1.7016936E12, 42.4], [1.701693555E12, 34.6], [1.701693385E12, 1.4], [1.70169359E12, 40.6], [1.70169342E12, 12.8], [1.70169368E12, 51.4], [1.701693635E12, 48.0], [1.701693465E12, 21.2], [1.701693565E12, 35.4], [1.70169335E12, 0.6], [1.70169361E12, 45.0], [1.70169344E12, 16.0], [1.701693395E12, 9.0], [1.701693645E12, 49.6], [1.70169343E12, 14.8], [1.70169369E12, 49.0], [1.70169352E12, 29.0], [1.701693475E12, 22.2], [1.701693575E12, 38.4], [1.701693405E12, 10.6], [1.70169345E12, 18.2], [1.70169362E12, 45.6], [1.701693655E12, 52.4], [1.701693485E12, 23.4], [1.70169353E12, 30.0], [1.70169336E12, 0.4], [1.7016937E12, 40.8], [1.701693415E12, 12.6], [1.701693585E12, 40.4], [1.70169363E12, 47.6], [1.70169346E12, 19.6], [1.701693495E12, 25.6], [1.701693665E12, 53.8], [1.70169337E12, 0.8], [1.70169371E12, 16.8], [1.70169354E12, 32.2], [1.70169364E12, 49.4], [1.701693595E12, 41.4], [1.701693425E12, 13.4], [1.701693685E12, 52.6], [1.70169347E12, 20.8], [1.701693675E12, 54.8], [1.701693505E12, 26.6], [1.70169355E12, 34.4], [1.70169338E12, 1.4], [1.70169365E12, 51.2], [1.70169348E12, 22.6], [1.701693435E12, 16.0], [1.701693695E12, 46.8], [1.701693525E12, 30.8], [1.70169356E12, 35.4], [1.701693515E12, 28.6], [1.701693345E12, 0.4], [1.701693605E12, 44.0], [1.70169339E12, 8.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70169383E12, 2.2], [1.701693745E12, 65.2], [1.70169379E12, 60.6], [1.701693875E12, 50.2], [1.701693705E12, 26.0], [1.70169374E12, 64.0], [1.701693825E12, 27.2], [1.70169387E12, 86.8], [1.7016937E12, 16.6], [1.701693785E12, 71.6], [1.7016938E12, 26.4], [1.701693885E12, 86.6], [1.701693845E12, 43.2], [1.701693715E12, 57.6], [1.70169388E12, 2.8], [1.70169375E12, 39.0], [1.701693835E12, 79.8], [1.70169384E12, 41.8], [1.70169371E12, 42.6], [1.701693795E12, 71.2], [1.701693895E12, 86.4], [1.701693725E12, 62.6], [1.701693595E12, 0.2], [1.70169377E12, 1.2], [1.701693685E12, 3.4], [1.70169389E12, 82.0], [1.70169372E12, 62.2], [1.70169385E12, 35.0], [1.70169368E12, 2.0], [1.701693735E12, 64.4], [1.70169382E12, 28.0], [1.701693905E12, 20.0], [1.701693695E12, 10.4], [1.70169378E12, 10.2], [1.701693865E12, 81.4], [1.70169373E12, 63.2], [1.7016939E12, 89.6], [1.70169369E12, 8.2], [1.701693775E12, 65.8], [1.70169386E12, 5.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.70169383E12, 63.6], [1.701693915E12, 94.2], [1.701693745E12, 1.2], [1.70169392E12, 94.2], [1.70169379E12, 13.6], [1.701693875E12, 54.4], [1.70169391E12, 93.0], [1.70169374E12, 0.8], [1.701693825E12, 68.0], [1.701693785E12, 0.2], [1.7016938E12, 63.6], [1.701693755E12, 68.0], [1.70169393E12, 74.0], [1.70169376E12, 68.8], [1.701693845E12, 23.4], [1.70169388E12, 70.8], [1.70169375E12, 41.6], [1.70169384E12, 55.6], [1.701693925E12, 95.2], [1.701693795E12, 2.6], [1.70169381E12, 77.0], [1.701693895E12, 2.2], [1.70169377E12, 57.6], [1.701693855E12, 84.0], [1.70169389E12, 10.4], [1.701693805E12, 76.2], [1.70169385E12, 63.8], [1.701693765E12, 69.2], [1.70169382E12, 34.4], [1.701693905E12, 89.6], [1.70169378E12, 46.6], [1.701693865E12, 3.0], [1.70169373E12, 0.2], [1.701693815E12, 78.0], [1.7016939E12, 1.8], [1.701693775E12, 17.2], [1.70169386E12, 64.0]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.70169396E12, 7.0], [1.70169393E12, 22.0], [1.70169395E12, 73.2], [1.70169394E12, 98.4], [1.701693935E12, 97.2], [1.701693955E12, 40.0], [1.701693945E12, 98.4]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.701693925E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70169396E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701693345E12, "maxY": 109.6, "series": [{"data": [[1.70169349E12, 24.4], [1.70169366E12, 52.8], [1.701693535E12, 33.2], [1.701693365E12, 1.0], [1.701693705E12, 30.0], [1.70169357E12, 38.2], [1.7016934E12, 10.2], [1.701693355E12, 1.0], [1.701693615E12, 45.6], [1.701693445E12, 17.4], [1.70169367E12, 53.4], [1.7016935E12, 25.6], [1.701693375E12, 0.8], [1.701693715E12, 2.8], [1.701693545E12, 33.2], [1.70169341E12, 11.0], [1.70169358E12, 39.0], [1.701693455E12, 18.8], [1.701693625E12, 47.6], [1.70169351E12, 27.6], [1.7016936E12, 42.4], [1.701693555E12, 34.6], [1.701693385E12, 1.4], [1.70169359E12, 40.6], [1.70169342E12, 12.8], [1.70169368E12, 51.4], [1.701693635E12, 48.0], [1.701693465E12, 21.2], [1.701693565E12, 35.4], [1.70169335E12, 0.6], [1.70169361E12, 45.0], [1.70169344E12, 16.0], [1.701693395E12, 9.0], [1.701693645E12, 49.6], [1.70169343E12, 14.8], [1.70169369E12, 49.0], [1.70169352E12, 29.0], [1.701693475E12, 22.2], [1.701693575E12, 38.4], [1.701693405E12, 10.6], [1.70169345E12, 18.2], [1.70169362E12, 45.6], [1.701693655E12, 52.4], [1.701693485E12, 23.4], [1.70169353E12, 30.0], [1.70169336E12, 0.4], [1.7016937E12, 40.8], [1.701693415E12, 12.6], [1.701693585E12, 40.4], [1.70169363E12, 47.6], [1.70169346E12, 19.6], [1.701693495E12, 25.6], [1.701693665E12, 53.8], [1.70169337E12, 0.8], [1.70169371E12, 16.8], [1.70169354E12, 32.2], [1.70169364E12, 49.4], [1.701693595E12, 41.4], [1.701693425E12, 13.4], [1.701693685E12, 52.6], [1.70169347E12, 20.8], [1.701693675E12, 54.8], [1.701693505E12, 26.6], [1.70169355E12, 34.4], [1.70169338E12, 1.4], [1.70169365E12, 51.2], [1.70169348E12, 22.6], [1.701693435E12, 16.0], [1.701693695E12, 46.8], [1.701693525E12, 30.8], [1.70169356E12, 35.4], [1.701693515E12, 28.6], [1.701693345E12, 0.4], [1.701693605E12, 44.0], [1.70169339E12, 8.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70169383E12, 65.8], [1.70169392E12, 94.2], [1.701693875E12, 104.6], [1.701693705E12, 26.0], [1.70169391E12, 93.0], [1.70169374E12, 64.8], [1.701693955E12, 40.0], [1.701693785E12, 71.8], [1.701693885E12, 86.6], [1.70169393E12, 96.0], [1.70169376E12, 68.8], [1.701693715E12, 57.6], [1.70169375E12, 80.6], [1.70169384E12, 97.4], [1.701693795E12, 73.8], [1.701693895E12, 88.6], [1.701693725E12, 62.6], [1.70169377E12, 58.8], [1.70169394E12, 98.4], [1.701693805E12, 76.2], [1.70169385E12, 98.8], [1.70169368E12, 2.0], [1.701693735E12, 64.4], [1.701693905E12, 109.6], [1.70169395E12, 73.2], [1.70169378E12, 56.8], [1.701693815E12, 78.0], [1.70169369E12, 8.2], [1.70169386E12, 69.2], [1.70169396E12, 7.0], [1.701693915E12, 94.2], [1.701693745E12, 66.4], [1.70169379E12, 74.2], [1.701693825E12, 95.2], [1.70169387E12, 86.8], [1.7016937E12, 16.6], [1.7016938E12, 90.0], [1.701693755E12, 68.0], [1.701693845E12, 66.6], [1.70169388E12, 73.6], [1.701693835E12, 79.8], [1.701693925E12, 95.6], [1.70169371E12, 42.6], [1.70169381E12, 77.0], [1.701693595E12, 0.2], [1.701693855E12, 84.0], [1.701693685E12, 3.4], [1.70169389E12, 92.4], [1.70169372E12, 62.2], [1.701693935E12, 97.2], [1.701693765E12, 69.2], [1.70169382E12, 62.4], [1.701693695E12, 10.4], [1.701693865E12, 84.4], [1.70169373E12, 63.4], [1.7016939E12, 91.4], [1.701693775E12, 83.0], [1.701693945E12, 98.4]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70169396E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701693345E12, "maxY": 109.6, "series": [{"data": [[1.70169349E12, 24.4], [1.70169366E12, 52.8], [1.701693535E12, 33.2], [1.701693365E12, 1.0], [1.701693705E12, 30.0], [1.70169357E12, 38.2], [1.7016934E12, 10.2], [1.701693355E12, 1.0], [1.701693615E12, 45.6], [1.701693445E12, 17.4], [1.70169367E12, 53.4], [1.7016935E12, 25.6], [1.701693375E12, 0.8], [1.701693715E12, 2.8], [1.701693545E12, 33.2], [1.70169341E12, 11.0], [1.70169358E12, 39.0], [1.701693455E12, 18.8], [1.701693625E12, 47.6], [1.70169351E12, 27.6], [1.7016936E12, 42.4], [1.701693555E12, 34.6], [1.701693385E12, 1.4], [1.70169359E12, 40.6], [1.70169342E12, 12.8], [1.70169368E12, 51.4], [1.701693635E12, 48.0], [1.701693465E12, 21.2], [1.701693565E12, 35.4], [1.70169335E12, 0.6], [1.70169361E12, 45.0], [1.70169344E12, 16.0], [1.701693395E12, 9.0], [1.701693645E12, 49.6], [1.70169343E12, 14.8], [1.70169369E12, 49.0], [1.70169352E12, 29.0], [1.701693475E12, 22.2], [1.701693575E12, 38.4], [1.701693405E12, 10.6], [1.70169345E12, 18.2], [1.70169362E12, 45.6], [1.701693655E12, 52.4], [1.701693485E12, 23.4], [1.70169353E12, 30.0], [1.70169336E12, 0.4], [1.7016937E12, 40.8], [1.701693415E12, 12.6], [1.701693585E12, 40.4], [1.70169363E12, 47.6], [1.70169346E12, 19.6], [1.701693495E12, 25.6], [1.701693665E12, 53.8], [1.70169337E12, 0.8], [1.70169371E12, 16.8], [1.70169354E12, 32.2], [1.70169364E12, 49.4], [1.701693595E12, 41.4], [1.701693425E12, 13.4], [1.701693685E12, 52.6], [1.70169347E12, 20.8], [1.701693675E12, 54.8], [1.701693505E12, 26.6], [1.70169355E12, 34.4], [1.70169338E12, 1.4], [1.70169365E12, 51.2], [1.70169348E12, 22.6], [1.701693435E12, 16.0], [1.701693695E12, 46.8], [1.701693525E12, 30.8], [1.70169356E12, 35.4], [1.701693515E12, 28.6], [1.701693345E12, 0.4], [1.701693605E12, 44.0], [1.70169339E12, 8.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70169383E12, 65.8], [1.70169392E12, 94.2], [1.701693875E12, 104.6], [1.701693705E12, 26.0], [1.70169391E12, 93.0], [1.70169374E12, 64.8], [1.701693955E12, 40.0], [1.701693785E12, 71.8], [1.701693885E12, 86.6], [1.70169393E12, 96.0], [1.70169376E12, 68.8], [1.701693715E12, 57.6], [1.70169375E12, 80.6], [1.70169384E12, 97.4], [1.701693795E12, 73.8], [1.701693895E12, 88.6], [1.701693725E12, 62.6], [1.70169377E12, 58.8], [1.70169394E12, 98.4], [1.701693805E12, 76.2], [1.70169385E12, 98.8], [1.70169368E12, 2.0], [1.701693735E12, 64.4], [1.701693905E12, 109.6], [1.70169395E12, 73.2], [1.70169378E12, 56.8], [1.701693815E12, 78.0], [1.70169369E12, 8.2], [1.70169386E12, 69.2], [1.70169396E12, 7.0], [1.701693915E12, 94.2], [1.701693745E12, 66.4], [1.70169379E12, 74.2], [1.701693825E12, 95.2], [1.70169387E12, 86.8], [1.7016937E12, 16.6], [1.7016938E12, 90.0], [1.701693755E12, 68.0], [1.701693845E12, 66.6], [1.70169388E12, 73.6], [1.701693835E12, 79.8], [1.701693925E12, 95.6], [1.70169371E12, 42.6], [1.70169381E12, 77.0], [1.701693595E12, 0.2], [1.701693855E12, 84.0], [1.701693685E12, 3.4], [1.70169389E12, 92.4], [1.70169372E12, 62.2], [1.701693935E12, 97.2], [1.701693765E12, 69.2], [1.70169382E12, 62.4], [1.701693695E12, 10.4], [1.701693865E12, 84.4], [1.70169373E12, 63.4], [1.7016939E12, 91.4], [1.701693775E12, 83.0], [1.701693945E12, 98.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70169396E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

