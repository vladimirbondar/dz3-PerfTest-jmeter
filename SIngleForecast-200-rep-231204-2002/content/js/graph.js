/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 1190.0, "series": [{"data": [[0.0, 40.0], [0.1, 42.0], [0.2, 42.0], [0.3, 43.0], [0.4, 43.0], [0.5, 43.0], [0.6, 43.0], [0.7, 43.0], [0.8, 43.0], [0.9, 43.0], [1.0, 44.0], [1.1, 44.0], [1.2, 44.0], [1.3, 44.0], [1.4, 44.0], [1.5, 44.0], [1.6, 44.0], [1.7, 44.0], [1.8, 44.0], [1.9, 44.0], [2.0, 44.0], [2.1, 44.0], [2.2, 44.0], [2.3, 44.0], [2.4, 44.0], [2.5, 44.0], [2.6, 45.0], [2.7, 45.0], [2.8, 45.0], [2.9, 45.0], [3.0, 45.0], [3.1, 45.0], [3.2, 45.0], [3.3, 45.0], [3.4, 45.0], [3.5, 45.0], [3.6, 45.0], [3.7, 45.0], [3.8, 45.0], [3.9, 45.0], [4.0, 45.0], [4.1, 45.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 45.0], [4.6, 45.0], [4.7, 45.0], [4.8, 45.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 45.0], [5.4, 45.0], [5.5, 45.0], [5.6, 45.0], [5.7, 45.0], [5.8, 45.0], [5.9, 45.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 46.0], [6.8, 46.0], [6.9, 46.0], [7.0, 46.0], [7.1, 46.0], [7.2, 46.0], [7.3, 46.0], [7.4, 46.0], [7.5, 46.0], [7.6, 46.0], [7.7, 46.0], [7.8, 46.0], [7.9, 46.0], [8.0, 46.0], [8.1, 46.0], [8.2, 46.0], [8.3, 46.0], [8.4, 46.0], [8.5, 46.0], [8.6, 46.0], [8.7, 46.0], [8.8, 46.0], [8.9, 46.0], [9.0, 46.0], [9.1, 46.0], [9.2, 46.0], [9.3, 46.0], [9.4, 46.0], [9.5, 46.0], [9.6, 46.0], [9.7, 46.0], [9.8, 46.0], [9.9, 46.0], [10.0, 46.0], [10.1, 46.0], [10.2, 46.0], [10.3, 46.0], [10.4, 46.0], [10.5, 46.0], [10.6, 46.0], [10.7, 46.0], [10.8, 46.0], [10.9, 46.0], [11.0, 46.0], [11.1, 46.0], [11.2, 46.0], [11.3, 46.0], [11.4, 46.0], [11.5, 46.0], [11.6, 46.0], [11.7, 46.0], [11.8, 46.0], [11.9, 46.0], [12.0, 46.0], [12.1, 46.0], [12.2, 46.0], [12.3, 46.0], [12.4, 46.0], [12.5, 47.0], [12.6, 47.0], [12.7, 47.0], [12.8, 47.0], [12.9, 47.0], [13.0, 47.0], [13.1, 47.0], [13.2, 47.0], [13.3, 47.0], [13.4, 47.0], [13.5, 47.0], [13.6, 47.0], [13.7, 47.0], [13.8, 47.0], [13.9, 47.0], [14.0, 47.0], [14.1, 47.0], [14.2, 47.0], [14.3, 47.0], [14.4, 47.0], [14.5, 47.0], [14.6, 47.0], [14.7, 47.0], [14.8, 47.0], [14.9, 47.0], [15.0, 47.0], [15.1, 47.0], [15.2, 47.0], [15.3, 47.0], [15.4, 47.0], [15.5, 47.0], [15.6, 47.0], [15.7, 47.0], [15.8, 47.0], [15.9, 47.0], [16.0, 47.0], [16.1, 47.0], [16.2, 47.0], [16.3, 47.0], [16.4, 47.0], [16.5, 47.0], [16.6, 47.0], [16.7, 47.0], [16.8, 47.0], [16.9, 47.0], [17.0, 47.0], [17.1, 47.0], [17.2, 47.0], [17.3, 47.0], [17.4, 47.0], [17.5, 47.0], [17.6, 47.0], [17.7, 47.0], [17.8, 47.0], [17.9, 47.0], [18.0, 47.0], [18.1, 47.0], [18.2, 47.0], [18.3, 47.0], [18.4, 47.0], [18.5, 47.0], [18.6, 47.0], [18.7, 47.0], [18.8, 47.0], [18.9, 47.0], [19.0, 47.0], [19.1, 47.0], [19.2, 47.0], [19.3, 47.0], [19.4, 47.0], [19.5, 47.0], [19.6, 47.0], [19.7, 47.0], [19.8, 47.0], [19.9, 47.0], [20.0, 47.0], [20.1, 47.0], [20.2, 47.0], [20.3, 47.0], [20.4, 47.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 47.0], [20.9, 47.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 48.0], [21.7, 48.0], [21.8, 48.0], [21.9, 48.0], [22.0, 48.0], [22.1, 48.0], [22.2, 48.0], [22.3, 48.0], [22.4, 48.0], [22.5, 48.0], [22.6, 48.0], [22.7, 48.0], [22.8, 48.0], [22.9, 48.0], [23.0, 48.0], [23.1, 48.0], [23.2, 48.0], [23.3, 48.0], [23.4, 48.0], [23.5, 48.0], [23.6, 48.0], [23.7, 48.0], [23.8, 48.0], [23.9, 48.0], [24.0, 48.0], [24.1, 48.0], [24.2, 48.0], [24.3, 48.0], [24.4, 48.0], [24.5, 48.0], [24.6, 48.0], [24.7, 48.0], [24.8, 48.0], [24.9, 48.0], [25.0, 48.0], [25.1, 48.0], [25.2, 48.0], [25.3, 48.0], [25.4, 48.0], [25.5, 48.0], [25.6, 48.0], [25.7, 48.0], [25.8, 48.0], [25.9, 48.0], [26.0, 48.0], [26.1, 48.0], [26.2, 48.0], [26.3, 48.0], [26.4, 48.0], [26.5, 48.0], [26.6, 48.0], [26.7, 48.0], [26.8, 48.0], [26.9, 48.0], [27.0, 48.0], [27.1, 48.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 48.0], [28.4, 48.0], [28.5, 48.0], [28.6, 48.0], [28.7, 48.0], [28.8, 48.0], [28.9, 48.0], [29.0, 48.0], [29.1, 48.0], [29.2, 48.0], [29.3, 48.0], [29.4, 48.0], [29.5, 48.0], [29.6, 48.0], [29.7, 48.0], [29.8, 48.0], [29.9, 48.0], [30.0, 48.0], [30.1, 48.0], [30.2, 48.0], [30.3, 48.0], [30.4, 48.0], [30.5, 48.0], [30.6, 48.0], [30.7, 48.0], [30.8, 48.0], [30.9, 48.0], [31.0, 48.0], [31.1, 48.0], [31.2, 48.0], [31.3, 48.0], [31.4, 48.0], [31.5, 48.0], [31.6, 48.0], [31.7, 49.0], [31.8, 49.0], [31.9, 49.0], [32.0, 49.0], [32.1, 49.0], [32.2, 49.0], [32.3, 49.0], [32.4, 49.0], [32.5, 49.0], [32.6, 49.0], [32.7, 49.0], [32.8, 49.0], [32.9, 49.0], [33.0, 49.0], [33.1, 49.0], [33.2, 49.0], [33.3, 49.0], [33.4, 49.0], [33.5, 49.0], [33.6, 49.0], [33.7, 49.0], [33.8, 49.0], [33.9, 49.0], [34.0, 49.0], [34.1, 49.0], [34.2, 49.0], [34.3, 49.0], [34.4, 49.0], [34.5, 49.0], [34.6, 49.0], [34.7, 49.0], [34.8, 49.0], [34.9, 49.0], [35.0, 49.0], [35.1, 49.0], [35.2, 49.0], [35.3, 49.0], [35.4, 49.0], [35.5, 49.0], [35.6, 49.0], [35.7, 49.0], [35.8, 49.0], [35.9, 49.0], [36.0, 49.0], [36.1, 49.0], [36.2, 49.0], [36.3, 49.0], [36.4, 49.0], [36.5, 49.0], [36.6, 49.0], [36.7, 49.0], [36.8, 49.0], [36.9, 49.0], [37.0, 49.0], [37.1, 49.0], [37.2, 49.0], [37.3, 49.0], [37.4, 49.0], [37.5, 49.0], [37.6, 49.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 49.0], [38.5, 49.0], [38.6, 49.0], [38.7, 49.0], [38.8, 49.0], [38.9, 49.0], [39.0, 49.0], [39.1, 49.0], [39.2, 49.0], [39.3, 49.0], [39.4, 49.0], [39.5, 49.0], [39.6, 49.0], [39.7, 49.0], [39.8, 49.0], [39.9, 49.0], [40.0, 49.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 49.0], [40.8, 49.0], [40.9, 49.0], [41.0, 49.0], [41.1, 49.0], [41.2, 49.0], [41.3, 49.0], [41.4, 49.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 50.0], [43.5, 50.0], [43.6, 50.0], [43.7, 50.0], [43.8, 50.0], [43.9, 50.0], [44.0, 50.0], [44.1, 50.0], [44.2, 50.0], [44.3, 50.0], [44.4, 50.0], [44.5, 50.0], [44.6, 50.0], [44.7, 50.0], [44.8, 50.0], [44.9, 50.0], [45.0, 50.0], [45.1, 50.0], [45.2, 50.0], [45.3, 50.0], [45.4, 50.0], [45.5, 50.0], [45.6, 50.0], [45.7, 50.0], [45.8, 50.0], [45.9, 50.0], [46.0, 50.0], [46.1, 50.0], [46.2, 50.0], [46.3, 50.0], [46.4, 50.0], [46.5, 50.0], [46.6, 50.0], [46.7, 50.0], [46.8, 50.0], [46.9, 50.0], [47.0, 50.0], [47.1, 50.0], [47.2, 50.0], [47.3, 50.0], [47.4, 50.0], [47.5, 50.0], [47.6, 50.0], [47.7, 50.0], [47.8, 50.0], [47.9, 50.0], [48.0, 50.0], [48.1, 50.0], [48.2, 50.0], [48.3, 50.0], [48.4, 50.0], [48.5, 50.0], [48.6, 50.0], [48.7, 50.0], [48.8, 50.0], [48.9, 50.0], [49.0, 50.0], [49.1, 50.0], [49.2, 50.0], [49.3, 51.0], [49.4, 51.0], [49.5, 51.0], [49.6, 51.0], [49.7, 51.0], [49.8, 51.0], [49.9, 51.0], [50.0, 51.0], [50.1, 51.0], [50.2, 51.0], [50.3, 51.0], [50.4, 51.0], [50.5, 51.0], [50.6, 51.0], [50.7, 51.0], [50.8, 51.0], [50.9, 51.0], [51.0, 51.0], [51.1, 51.0], [51.2, 51.0], [51.3, 51.0], [51.4, 51.0], [51.5, 51.0], [51.6, 51.0], [51.7, 51.0], [51.8, 51.0], [51.9, 51.0], [52.0, 51.0], [52.1, 51.0], [52.2, 51.0], [52.3, 51.0], [52.4, 51.0], [52.5, 51.0], [52.6, 51.0], [52.7, 51.0], [52.8, 51.0], [52.9, 51.0], [53.0, 51.0], [53.1, 51.0], [53.2, 51.0], [53.3, 51.0], [53.4, 51.0], [53.5, 51.0], [53.6, 51.0], [53.7, 51.0], [53.8, 51.0], [53.9, 51.0], [54.0, 51.0], [54.1, 51.0], [54.2, 51.0], [54.3, 51.0], [54.4, 51.0], [54.5, 51.0], [54.6, 51.0], [54.7, 51.0], [54.8, 51.0], [54.9, 51.0], [55.0, 52.0], [55.1, 52.0], [55.2, 52.0], [55.3, 52.0], [55.4, 52.0], [55.5, 52.0], [55.6, 52.0], [55.7, 52.0], [55.8, 52.0], [55.9, 52.0], [56.0, 52.0], [56.1, 52.0], [56.2, 52.0], [56.3, 52.0], [56.4, 52.0], [56.5, 52.0], [56.6, 52.0], [56.7, 52.0], [56.8, 52.0], [56.9, 52.0], [57.0, 52.0], [57.1, 52.0], [57.2, 52.0], [57.3, 52.0], [57.4, 52.0], [57.5, 52.0], [57.6, 52.0], [57.7, 52.0], [57.8, 52.0], [57.9, 52.0], [58.0, 52.0], [58.1, 52.0], [58.2, 52.0], [58.3, 52.0], [58.4, 52.0], [58.5, 52.0], [58.6, 52.0], [58.7, 52.0], [58.8, 52.0], [58.9, 53.0], [59.0, 53.0], [59.1, 53.0], [59.2, 53.0], [59.3, 53.0], [59.4, 53.0], [59.5, 53.0], [59.6, 53.0], [59.7, 53.0], [59.8, 53.0], [59.9, 53.0], [60.0, 53.0], [60.1, 53.0], [60.2, 53.0], [60.3, 53.0], [60.4, 53.0], [60.5, 53.0], [60.6, 53.0], [60.7, 53.0], [60.8, 53.0], [60.9, 53.0], [61.0, 53.0], [61.1, 53.0], [61.2, 53.0], [61.3, 53.0], [61.4, 54.0], [61.5, 54.0], [61.6, 54.0], [61.7, 54.0], [61.8, 54.0], [61.9, 54.0], [62.0, 54.0], [62.1, 54.0], [62.2, 54.0], [62.3, 54.0], [62.4, 54.0], [62.5, 54.0], [62.6, 54.0], [62.7, 54.0], [62.8, 54.0], [62.9, 54.0], [63.0, 55.0], [63.1, 55.0], [63.2, 55.0], [63.3, 55.0], [63.4, 55.0], [63.5, 55.0], [63.6, 55.0], [63.7, 55.0], [63.8, 55.0], [63.9, 55.0], [64.0, 56.0], [64.1, 56.0], [64.2, 56.0], [64.3, 56.0], [64.4, 56.0], [64.5, 57.0], [64.6, 57.0], [64.7, 57.0], [64.8, 57.0], [64.9, 57.0], [65.0, 57.0], [65.1, 58.0], [65.2, 58.0], [65.3, 58.0], [65.4, 59.0], [65.5, 59.0], [65.6, 59.0], [65.7, 59.0], [65.8, 60.0], [65.9, 60.0], [66.0, 61.0], [66.1, 61.0], [66.2, 62.0], [66.3, 63.0], [66.4, 63.0], [66.5, 64.0], [66.6, 64.0], [66.7, 65.0], [66.8, 66.0], [66.9, 66.0], [67.0, 67.0], [67.1, 67.0], [67.2, 68.0], [67.3, 69.0], [67.4, 70.0], [67.5, 71.0], [67.6, 72.0], [67.7, 73.0], [67.8, 73.0], [67.9, 74.0], [68.0, 75.0], [68.1, 77.0], [68.2, 78.0], [68.3, 80.0], [68.4, 81.0], [68.5, 83.0], [68.6, 86.0], [68.7, 88.0], [68.8, 90.0], [68.9, 95.0], [69.0, 97.0], [69.1, 98.0], [69.2, 99.0], [69.3, 100.0], [69.4, 101.0], [69.5, 101.0], [69.6, 102.0], [69.7, 103.0], [69.8, 103.0], [69.9, 104.0], [70.0, 104.0], [70.1, 105.0], [70.2, 106.0], [70.3, 106.0], [70.4, 107.0], [70.5, 107.0], [70.6, 108.0], [70.7, 108.0], [70.8, 109.0], [70.9, 109.0], [71.0, 110.0], [71.1, 111.0], [71.2, 112.0], [71.3, 113.0], [71.4, 115.0], [71.5, 117.0], [71.6, 118.0], [71.7, 119.0], [71.8, 121.0], [71.9, 124.0], [72.0, 126.0], [72.1, 129.0], [72.2, 132.0], [72.3, 134.0], [72.4, 136.0], [72.5, 138.0], [72.6, 139.0], [72.7, 141.0], [72.8, 144.0], [72.9, 146.0], [73.0, 148.0], [73.1, 150.0], [73.2, 151.0], [73.3, 153.0], [73.4, 153.0], [73.5, 155.0], [73.6, 158.0], [73.7, 162.0], [73.8, 167.0], [73.9, 178.0], [74.0, 183.0], [74.1, 189.0], [74.2, 194.0], [74.3, 197.0], [74.4, 199.0], [74.5, 200.0], [74.6, 202.0], [74.7, 204.0], [74.8, 208.0], [74.9, 212.0], [75.0, 216.0], [75.1, 219.0], [75.2, 229.0], [75.3, 240.0], [75.4, 248.0], [75.5, 255.0], [75.6, 267.0], [75.7, 286.0], [75.8, 300.0], [75.9, 317.0], [76.0, 342.0], [76.1, 383.0], [76.2, 432.0], [76.3, 500.0], [76.4, 584.0], [76.5, 668.0], [76.6, 766.0], [76.7, 898.0], [76.8, 1021.0], [76.9, 1022.0], [77.0, 1022.0], [77.1, 1022.0], [77.2, 1022.0], [77.3, 1022.0], [77.4, 1022.0], [77.5, 1022.0], [77.6, 1022.0], [77.7, 1022.0], [77.8, 1022.0], [77.9, 1022.0], [78.0, 1022.0], [78.1, 1022.0], [78.2, 1023.0], [78.3, 1023.0], [78.4, 1023.0], [78.5, 1023.0], [78.6, 1023.0], [78.7, 1023.0], [78.8, 1023.0], [78.9, 1023.0], [79.0, 1023.0], [79.1, 1023.0], [79.2, 1023.0], [79.3, 1023.0], [79.4, 1023.0], [79.5, 1023.0], [79.6, 1023.0], [79.7, 1023.0], [79.8, 1023.0], [79.9, 1023.0], [80.0, 1023.0], [80.1, 1023.0], [80.2, 1023.0], [80.3, 1023.0], [80.4, 1023.0], [80.5, 1023.0], [80.6, 1023.0], [80.7, 1023.0], [80.8, 1023.0], [80.9, 1023.0], [81.0, 1023.0], [81.1, 1023.0], [81.2, 1023.0], [81.3, 1023.0], [81.4, 1023.0], [81.5, 1023.0], [81.6, 1023.0], [81.7, 1023.0], [81.8, 1023.0], [81.9, 1023.0], [82.0, 1023.0], [82.1, 1023.0], [82.2, 1023.0], [82.3, 1023.0], [82.4, 1023.0], [82.5, 1023.0], [82.6, 1023.0], [82.7, 1023.0], [82.8, 1023.0], [82.9, 1023.0], [83.0, 1024.0], [83.1, 1024.0], [83.2, 1024.0], [83.3, 1024.0], [83.4, 1024.0], [83.5, 1024.0], [83.6, 1024.0], [83.7, 1024.0], [83.8, 1024.0], [83.9, 1024.0], [84.0, 1024.0], [84.1, 1024.0], [84.2, 1024.0], [84.3, 1024.0], [84.4, 1024.0], [84.5, 1024.0], [84.6, 1024.0], [84.7, 1024.0], [84.8, 1024.0], [84.9, 1024.0], [85.0, 1024.0], [85.1, 1024.0], [85.2, 1024.0], [85.3, 1024.0], [85.4, 1024.0], [85.5, 1024.0], [85.6, 1024.0], [85.7, 1024.0], [85.8, 1024.0], [85.9, 1024.0], [86.0, 1024.0], [86.1, 1024.0], [86.2, 1024.0], [86.3, 1024.0], [86.4, 1024.0], [86.5, 1024.0], [86.6, 1024.0], [86.7, 1024.0], [86.8, 1024.0], [86.9, 1024.0], [87.0, 1024.0], [87.1, 1024.0], [87.2, 1024.0], [87.3, 1024.0], [87.4, 1024.0], [87.5, 1024.0], [87.6, 1024.0], [87.7, 1024.0], [87.8, 1024.0], [87.9, 1024.0], [88.0, 1024.0], [88.1, 1024.0], [88.2, 1024.0], [88.3, 1024.0], [88.4, 1024.0], [88.5, 1024.0], [88.6, 1024.0], [88.7, 1024.0], [88.8, 1024.0], [88.9, 1024.0], [89.0, 1024.0], [89.1, 1024.0], [89.2, 1024.0], [89.3, 1024.0], [89.4, 1024.0], [89.5, 1025.0], [89.6, 1025.0], [89.7, 1025.0], [89.8, 1025.0], [89.9, 1025.0], [90.0, 1025.0], [90.1, 1025.0], [90.2, 1025.0], [90.3, 1025.0], [90.4, 1025.0], [90.5, 1025.0], [90.6, 1025.0], [90.7, 1025.0], [90.8, 1025.0], [90.9, 1025.0], [91.0, 1025.0], [91.1, 1025.0], [91.2, 1025.0], [91.3, 1025.0], [91.4, 1025.0], [91.5, 1025.0], [91.6, 1025.0], [91.7, 1025.0], [91.8, 1025.0], [91.9, 1025.0], [92.0, 1025.0], [92.1, 1025.0], [92.2, 1025.0], [92.3, 1025.0], [92.4, 1025.0], [92.5, 1025.0], [92.6, 1025.0], [92.7, 1025.0], [92.8, 1025.0], [92.9, 1025.0], [93.0, 1025.0], [93.1, 1025.0], [93.2, 1025.0], [93.3, 1025.0], [93.4, 1025.0], [93.5, 1025.0], [93.6, 1026.0], [93.7, 1026.0], [93.8, 1026.0], [93.9, 1026.0], [94.0, 1026.0], [94.1, 1026.0], [94.2, 1026.0], [94.3, 1026.0], [94.4, 1026.0], [94.5, 1026.0], [94.6, 1026.0], [94.7, 1026.0], [94.8, 1026.0], [94.9, 1026.0], [95.0, 1026.0], [95.1, 1026.0], [95.2, 1026.0], [95.3, 1026.0], [95.4, 1026.0], [95.5, 1026.0], [95.6, 1026.0], [95.7, 1026.0], [95.8, 1027.0], [95.9, 1027.0], [96.0, 1027.0], [96.1, 1027.0], [96.2, 1027.0], [96.3, 1027.0], [96.4, 1027.0], [96.5, 1027.0], [96.6, 1027.0], [96.7, 1027.0], [96.8, 1027.0], [96.9, 1027.0], [97.0, 1027.0], [97.1, 1028.0], [97.2, 1028.0], [97.3, 1028.0], [97.4, 1028.0], [97.5, 1028.0], [97.6, 1028.0], [97.7, 1028.0], [97.8, 1028.0], [97.9, 1029.0], [98.0, 1029.0], [98.1, 1029.0], [98.2, 1029.0], [98.3, 1029.0], [98.4, 1030.0], [98.5, 1030.0], [98.6, 1030.0], [98.7, 1031.0], [98.8, 1031.0], [98.9, 1032.0], [99.0, 1033.0], [99.1, 1033.0], [99.2, 1034.0], [99.3, 1035.0], [99.4, 1037.0], [99.5, 1040.0], [99.6, 1044.0], [99.7, 1052.0], [99.8, 1069.0], [99.9, 1125.0], [100.0, 1190.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 37054.0, "series": [{"data": [[0.0, 37054.0], [1100.0, 75.0], [300.0, 205.0], [600.0, 62.0], [700.0, 52.0], [400.0, 74.0], [100.0, 2764.0], [200.0, 723.0], [800.0, 42.0], [900.0, 29.0], [500.0, 61.0], [1000.0, 12361.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 172.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 35049.0, "series": [{"data": [[0.0, 35049.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 172.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18281.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 98.5, "minX": 1.70170932E12, "maxY": 100.0, "series": [{"data": [[1.7017098E12, 100.0], [1.701709415E12, 100.0], [1.701709755E12, 100.0], [1.701709845E12, 100.0], [1.70170946E12, 100.0], [1.701709325E12, 100.0], [1.701709665E12, 100.0], [1.70170937E12, 100.0], [1.70170971E12, 100.0], [1.701709575E12, 100.0], [1.701709915E12, 100.0], [1.70170962E12, 100.0], [1.701709485E12, 100.0], [1.701709825E12, 100.0], [1.70170953E12, 100.0], [1.70170987E12, 100.0], [1.70170948E12, 100.0], [1.70170982E12, 100.0], [1.701709435E12, 100.0], [1.701709525E12, 100.0], [1.701709865E12, 100.0], [1.70170973E12, 100.0], [1.701709345E12, 100.0], [1.701709775E12, 100.0], [1.70170939E12, 100.0], [1.70170964E12, 100.0], [1.701709595E12, 100.0], [1.701709685E12, 100.0], [1.70170989E12, 100.0], [1.701709505E12, 100.0], [1.701709935E12, 100.0], [1.70170955E12, 100.0], [1.70170933E12, 100.0], [1.70170967E12, 100.0], [1.70170976E12, 100.0], [1.701709375E12, 100.0], [1.701709715E12, 100.0], [1.70170958E12, 100.0], [1.701709625E12, 100.0], [1.70170949E12, 100.0], [1.70170983E12, 100.0], [1.701709535E12, 100.0], [1.70170992E12, 100.0], [1.701709875E12, 100.0], [1.7017094E12, 100.0], [1.70170974E12, 100.0], [1.701709355E12, 100.0], [1.701709445E12, 100.0], [1.701709785E12, 100.0], [1.701709735E12, 100.0], [1.70170944E12, 100.0], [1.70170978E12, 100.0], [1.701709395E12, 100.0], [1.701709645E12, 100.0], [1.70170969E12, 100.0], [1.701709895E12, 100.0], [1.70170951E12, 100.0], [1.7017096E12, 100.0], [1.701709555E12, 100.0], [1.70170994E12, 98.5], [1.701709805E12, 100.0], [1.70170942E12, 100.0], [1.70170985E12, 100.0], [1.701709465E12, 100.0], [1.701709585E12, 100.0], [1.70170963E12, 100.0], [1.701709495E12, 100.0], [1.70170988E12, 100.0], [1.701709835E12, 100.0], [1.701709925E12, 100.0], [1.70170954E12, 100.0], [1.701709405E12, 100.0], [1.701709745E12, 100.0], [1.70170945E12, 100.0], [1.70170979E12, 100.0], [1.701709655E12, 100.0], [1.70170936E12, 100.0], [1.7017097E12, 100.0], [1.70170965E12, 100.0], [1.701709695E12, 100.0], [1.70170956E12, 100.0], [1.701709515E12, 100.0], [1.7017099E12, 100.0], [1.701709605E12, 100.0], [1.70170981E12, 100.0], [1.701709425E12, 100.0], [1.701709855E12, 100.0], [1.70170947E12, 100.0], [1.70170972E12, 100.0], [1.701709335E12, 100.0], [1.701709675E12, 100.0], [1.701709765E12, 100.0], [1.70170938E12, 100.0], [1.701709885E12, 100.0], [1.7017095E12, 100.0], [1.70170993E12, 100.0], [1.701709545E12, 100.0], [1.70170941E12, 100.0], [1.70170975E12, 100.0], [1.70170984E12, 100.0], [1.701709455E12, 100.0], [1.701709795E12, 100.0], [1.70170932E12, 100.0], [1.70170966E12, 100.0], [1.701709365E12, 100.0], [1.701709705E12, 100.0], [1.70170957E12, 100.0], [1.70170991E12, 100.0], [1.701709615E12, 100.0], [1.701709565E12, 100.0], [1.701709905E12, 100.0], [1.70170961E12, 100.0], [1.701709815E12, 100.0], [1.70170943E12, 100.0], [1.70170952E12, 100.0], [1.70170986E12, 100.0], [1.701709475E12, 100.0], [1.701709725E12, 100.0], [1.70170934E12, 100.0], [1.70170977E12, 100.0], [1.701709385E12, 100.0], [1.70170959E12, 100.0], [1.70170968E12, 100.0], [1.701709635E12, 100.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70170994E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 288.2823551401871, "minX": 98.0, "maxY": 1023.0, "series": [{"data": [[99.0, 1023.0], [98.0, 1023.0], [100.0, 288.2823551401871]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[99.99994392732982, 288.3098201936378]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.70170932E12, "maxY": 276062.4, "series": [{"data": [[1.7017098E12, 41951.4], [1.701709415E12, 8437.2], [1.701709755E12, 61188.6], [1.701709845E12, 254790.0], [1.70170946E12, 12442.2], [1.701709325E12, 213.6], [1.701709665E12, 30277.8], [1.70170937E12, 4432.2], [1.70170971E12, 34229.4], [1.701709575E12, 22321.2], [1.701709915E12, 207841.2], [1.70170962E12, 26486.4], [1.701709485E12, 14685.0], [1.701709825E12, 267900.0], [1.70170953E12, 18529.8], [1.70170987E12, 264605.4], [1.70170948E12, 13990.8], [1.70170982E12, 267900.0], [1.701709435E12, 10252.8], [1.701709525E12, 18102.6], [1.701709865E12, 264149.4], [1.70170973E12, 182310.0], [1.701709345E12, 320.4], [1.701709775E12, 248824.8], [1.70170939E12, 6247.8], [1.70170964E12, 28867.6], [1.701709595E12, 24190.2], [1.701709685E12, 31239.0], [1.70170989E12, 247049.4], [1.701709505E12, 16340.4], [1.701709935E12, 77976.0], [1.70170955E12, 20238.6], [1.70170933E12, 267.0], [1.70170967E12, 30811.8], [1.70170976E12, 213186.2], [1.701709375E12, 4325.4], [1.701709715E12, 34389.6], [1.70170958E12, 22855.2], [1.701709625E12, 26860.2], [1.70170949E12, 15005.4], [1.70170983E12, 250708.8], [1.701709535E12, 18957.0], [1.70170992E12, 269028.6], [1.701709875E12, 261470.4], [1.7017094E12, 7155.6], [1.70170974E12, 96975.0], [1.701709355E12, 2403.0], [1.701709445E12, 11053.8], [1.701709785E12, 89254.2], [1.701709735E12, 146190.6], [1.70170944E12, 10626.6], [1.70170978E12, 223581.0], [1.701709395E12, 6728.4], [1.701709645E12, 28408.8], [1.70170969E12, 66552.0], [1.701709895E12, 263077.8], [1.70170951E12, 16767.6], [1.7017096E12, 24564.0], [1.701709555E12, 20772.6], [1.70170994E12, 1071.6], [1.701709805E12, 40904.4], [1.70170942E12, 8864.4], [1.70170985E12, 49533.0], [1.701709465E12, 12655.8], [1.701709585E12, 23175.6], [1.70170963E12, 27127.2], [1.701709495E12, 15539.4], [1.70170988E12, 244246.0], [1.701709835E12, 268755.0], [1.701709925E12, 46979.4], [1.70170954E12, 19330.8], [1.701709405E12, 7529.4], [1.701709745E12, 37433.4], [1.70170945E12, 11587.8], [1.70170979E12, 42163.6], [1.701709655E12, 29637.0], [1.70170936E12, 2563.2], [1.7017097E12, 33161.4], [1.70170965E12, 29103.0], [1.701709695E12, 32734.2], [1.70170956E12, 21146.4], [1.701709515E12, 17301.6], [1.7017099E12, 266292.6], [1.701709605E12, 25311.6], [1.70170981E12, 228357.6], [1.701709425E12, 9238.2], [1.701709855E12, 50502.0], [1.70170947E12, 13189.8], [1.70170972E12, 67947.6], [1.701709335E12, 213.6], [1.701709675E12, 31452.6], [1.701709765E12, 217254.6], [1.70170938E12, 5393.4], [1.701709885E12, 265756.8], [1.7017095E12, 15859.8], [1.70170993E12, 25707.0], [1.701709545E12, 19704.6], [1.70170941E12, 7956.6], [1.70170975E12, 37486.8], [1.70170984E12, 258631.8], [1.701709455E12, 11854.8], [1.701709795E12, 41377.2], [1.70170932E12, 53.4], [1.70170966E12, 29850.6], [1.701709365E12, 2830.2], [1.701709705E12, 33962.4], [1.70170957E12, 23122.2], [1.70170991E12, 68157.6], [1.701709615E12, 26059.2], [1.701709565E12, 20505.6], [1.701709905E12, 276062.4], [1.70170961E12, 25578.6], [1.701709815E12, 253969.2], [1.70170943E12, 9718.8], [1.70170952E12, 17675.4], [1.70170986E12, 52475.2], [1.701709475E12, 13777.2], [1.701709725E12, 208003.8], [1.70170934E12, 213.6], [1.70170977E12, 225004.6], [1.701709385E12, 5820.6], [1.70170959E12, 23656.2], [1.70170968E12, 31666.2], [1.701709635E12, 27821.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7017098E12, 21352.0], [1.701709415E12, 4297.6], [1.701709755E12, 16156.8], [1.701709845E12, 7806.4], [1.70170946E12, 6337.6], [1.701709325E12, 108.8], [1.701709665E12, 15422.4], [1.70170937E12, 2257.6], [1.70170971E12, 17435.2], [1.701709575E12, 11369.6], [1.701709915E12, 2937.6], [1.70170962E12, 13491.2], [1.701709485E12, 7480.0], [1.701709825E12, 0.0], [1.70170953E12, 9438.4], [1.70170987E12, 217.6], [1.70170948E12, 7126.4], [1.70170982E12, 0.0], [1.701709435E12, 5222.4], [1.701709525E12, 9220.8], [1.701709865E12, 0.0], [1.70170973E12, 11532.8], [1.701709345E12, 163.2], [1.701709775E12, 3372.8], [1.70170939E12, 3182.4], [1.70170964E12, 14198.4], [1.701709595E12, 12321.6], [1.701709685E12, 15912.0], [1.70170989E12, 788.8], [1.701709505E12, 8323.2], [1.701709935E12, 136.0], [1.70170955E12, 10308.8], [1.70170933E12, 136.0], [1.70170967E12, 15694.4], [1.70170976E12, 9873.6], [1.701709375E12, 2203.2], [1.701709715E12, 17516.8], [1.70170958E12, 11641.6], [1.701709625E12, 13681.6], [1.70170949E12, 7643.2], [1.70170983E12, 489.6], [1.701709535E12, 9656.0], [1.70170992E12, 5140.8], [1.701709875E12, 0.0], [1.7017094E12, 3644.8], [1.70170974E12, 16918.4], [1.701709355E12, 1224.0], [1.701709445E12, 5630.4], [1.701709785E12, 20209.6], [1.701709735E12, 12512.0], [1.70170944E12, 5412.8], [1.70170978E12, 9356.8], [1.701709395E12, 3427.2], [1.701709645E12, 14470.4], [1.70170969E12, 15340.8], [1.701709895E12, 0.0], [1.70170951E12, 8540.8], [1.7017096E12, 12512.0], [1.701709555E12, 10580.8], [1.70170994E12, 0.0], [1.701709805E12, 20835.2], [1.70170942E12, 4515.2], [1.70170985E12, 23636.8], [1.701709465E12, 6446.4], [1.701709585E12, 11804.8], [1.70170963E12, 13817.6], [1.701709495E12, 7915.2], [1.70170988E12, 0.0], [1.701709835E12, 408.0], [1.701709925E12, 21651.2], [1.70170954E12, 9846.4], [1.701709405E12, 3835.2], [1.701709745E12, 19067.2], [1.70170945E12, 5902.4], [1.70170979E12, 20835.2], [1.701709655E12, 15096.0], [1.70170936E12, 1305.6], [1.7017097E12, 16891.2], [1.70170965E12, 14824.0], [1.701709695E12, 16673.6], [1.70170956E12, 10771.2], [1.701709515E12, 8812.8], [1.7017099E12, 0.0], [1.701709605E12, 12892.8], [1.70170981E12, 54.4], [1.701709425E12, 4705.6], [1.701709855E12, 24099.2], [1.70170947E12, 6718.4], [1.70170972E12, 14960.0], [1.701709335E12, 108.8], [1.701709675E12, 16020.8], [1.701709765E12, 9955.2], [1.70170938E12, 2747.2], [1.701709885E12, 0.0], [1.7017095E12, 8078.4], [1.70170993E12, 12267.2], [1.701709545E12, 10036.8], [1.70170941E12, 4052.8], [1.70170975E12, 19094.4], [1.70170984E12, 435.2], [1.701709455E12, 6038.4], [1.701709795E12, 20944.0], [1.70170932E12, 27.2], [1.70170966E12, 15204.8], [1.701709365E12, 1441.6], [1.701709705E12, 17299.2], [1.70170957E12, 11777.6], [1.70170991E12, 26547.2], [1.701709615E12, 13273.6], [1.701709565E12, 10444.8], [1.701709905E12, 5684.8], [1.70170961E12, 13028.8], [1.701709815E12, 0.0], [1.70170943E12, 4950.4], [1.70170952E12, 9003.2], [1.70170986E12, 19964.8], [1.701709475E12, 7017.6], [1.701709725E12, 7153.6], [1.70170934E12, 108.8], [1.70170977E12, 9030.4], [1.701709385E12, 2964.8], [1.70170959E12, 12049.6], [1.70170968E12, 16129.6], [1.701709635E12, 14171.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70170994E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 46.89164785553042, "minX": 1.70170932E12, "maxY": 1030.6401869158885, "series": [{"data": [[1.7017098E12, 156.1783439490446], [1.701709415E12, 49.47468354430379], [1.701709755E12, 135.34668721109387], [1.701709845E12, 645.4030054644809], [1.70170946E12, 49.08583690987123], [1.701709325E12, 146.75], [1.701709665E12, 51.68783068783065], [1.70170937E12, 51.62650602409637], [1.70170971E12, 50.455538221528855], [1.701709575E12, 50.2511961722488], [1.701709915E12, 806.5850622406633], [1.70170962E12, 51.26612903225805], [1.701709485E12, 49.78909090909094], [1.701709825E12, 1025.9879999999998], [1.70170953E12, 50.2420749279539], [1.70170987E12, 1021.586826347306], [1.70170948E12, 48.98473282442746], [1.70170982E12, 1025.174], [1.701709435E12, 49.34374999999999], [1.701709525E12, 49.98820058997051], [1.701709865E12, 1025.9999999999993], [1.70170973E12, 488.43767313019447], [1.701709345E12, 82.5], [1.701709775E12, 854.8142361111102], [1.70170939E12, 48.0854700854701], [1.70170964E12, 52.979007633587806], [1.701709595E12, 50.754966887417226], [1.701709685E12, 52.880341880341874], [1.70170989E12, 1004.6180698151952], [1.701709505E12, 64.79738562091507], [1.701709935E12, 993.4333333333332], [1.70170955E12, 49.678100263852244], [1.70170933E12, 64.2], [1.70170967E12, 52.26516464471405], [1.70170976E12, 534.2289655172412], [1.701709375E12, 50.14814814814813], [1.701709715E12, 51.56832298136651], [1.70170958E12, 50.90654205607479], [1.701709625E12, 51.36978131212722], [1.70170949E12, 49.124555160142336], [1.70170983E12, 997.4421487603306], [1.701709535E12, 50.68169014084508], [1.70170992E12, 787.4202682563341], [1.701709875E12, 1026.6680327868844], [1.7017094E12, 49.223880597014926], [1.70170974E12, 210.24561403508733], [1.701709355E12, 54.26666666666666], [1.701709445E12, 62.207729468599005], [1.701709785E12, 255.17485029940116], [1.701709735E12, 372.08879184861706], [1.70170944E12, 49.668341708542734], [1.70170978E12, 624.013755158185], [1.701709395E12, 48.38888888888889], [1.701709645E12, 51.15977443609029], [1.70170969E12, 240.9889240506333], [1.701709895E12, 1025.3340122199595], [1.70170951E12, 49.541401273885356], [1.7017096E12, 50.83260869565219], [1.701709555E12, 50.17480719794348], [1.70170994E12, 1023.0], [1.701709805E12, 125.88120104438654], [1.70170942E12, 49.35542168674701], [1.70170985E12, 47.4257767548907], [1.701709465E12, 49.59071729957803], [1.701709585E12, 51.370967741935495], [1.70170963E12, 66.54133858267708], [1.701709495E12, 48.96907216494848], [1.70170988E12, 1023.8135964912273], [1.701709835E12, 996.1922330097082], [1.701709925E12, 50.192740926157725], [1.70170954E12, 49.46408839779006], [1.701709405E12, 49.68085106382977], [1.701709745E12, 54.01711840228248], [1.70170945E12, 48.576036866359445], [1.70170979E12, 121.34765624999983], [1.701709655E12, 52.06126126126125], [1.70170936E12, 63.45833333333332], [1.7017097E12, 51.25764895330112], [1.70170965E12, 52.07155963302751], [1.701709695E12, 53.425774877650895], [1.70170956E12, 49.50252525252526], [1.701709515E12, 48.99074074074077], [1.7017099E12, 1025.2434607645873], [1.701709605E12, 50.168776371308], [1.70170981E12, 1030.6401869158885], [1.701709425E12, 48.87283236994222], [1.701709855E12, 46.89164785553042], [1.70170947E12, 48.07287449392715], [1.70170972E12, 165.5096463022508], [1.701709335E12, 64.0], [1.701709675E12, 57.71816638370124], [1.701709765E12, 539.168707482993], [1.70170938E12, 69.5049504950495], [1.701709885E12, 1025.9072580645163], [1.7017095E12, 48.87542087542088], [1.70170993E12, 53.95787139689581], [1.701709545E12, 49.1463414634146], [1.70170941E12, 48.09395973154362], [1.70170975E12, 77.50000000000001], [1.70170984E12, 993.6478873239436], [1.701709455E12, 48.770270270270295], [1.701709795E12, 119.35714285714289], [1.70170932E12, 89.0], [1.70170966E12, 50.26833631484801], [1.701709365E12, 53.867924528301884], [1.701709705E12, 52.14465408805027], [1.70170957E12, 57.17321016166281], [1.70170991E12, 59.19129554655865], [1.701709615E12, 61.157786885245926], [1.701709565E12, 56.44010416666667], [1.701709905E12, 735.1324786324783], [1.70170961E12, 51.59081419624219], [1.701709815E12, 1025.4029535864995], [1.70170943E12, 49.91758241758242], [1.70170952E12, 49.341389728096665], [1.70170986E12, 71.05437665782495], [1.701709475E12, 48.67054263565892], [1.701709725E12, 641.3407999999998], [1.70170934E12, 63.0], [1.70170977E12, 572.5785813630041], [1.701709385E12, 63.1467889908257], [1.70170959E12, 50.270880361173816], [1.70170968E12, 50.83642495784147], [1.701709635E12, 51.41650671785029]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70170994E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70170932E12, "maxY": 155.76433121019107, "series": [{"data": [[1.7017098E12, 155.76433121019107], [1.701709415E12, 49.45569620253165], [1.701709755E12, 48.33281972265025], [1.701709845E12, 22.80874316939892], [1.70170946E12, 49.0557939914163], [1.701709325E12, 146.75], [1.701709665E12, 51.63139329805996], [1.70170937E12, 51.54216867469881], [1.70170971E12, 50.40405616224651], [1.701709575E12, 50.24162679425835], [1.701709915E12, 10.634854771784234], [1.70170962E12, 51.24193548387098], [1.701709485E12, 49.756363636363616], [1.701709825E12, 0.0], [1.70170953E12, 50.23342939481272], [1.70170987E12, 3.8203592814371263], [1.70170948E12, 48.98473282442746], [1.70170982E12, 0.0], [1.701709435E12, 49.083333333333286], [1.701709525E12, 49.96165191740414], [1.701709865E12, 0.0], [1.70170973E12, 65.04847645429369], [1.701709345E12, 82.5], [1.701709775E12, 50.984375], [1.70170939E12, 48.07692307692308], [1.70170964E12, 51.01145038167935], [1.701709595E12, 50.741721854304686], [1.701709685E12, 52.728205128205175], [1.70170989E12, 39.94661190965091], [1.701709505E12, 64.77124183006534], [1.701709935E12, 1.4666666666666666], [1.70170955E12, 49.66490765171507], [1.70170933E12, 64.0], [1.70170967E12, 52.242634315424674], [1.70170976E12, 25.504827586206908], [1.701709375E12, 50.07407407407408], [1.701709715E12, 51.52950310559004], [1.70170958E12, 50.8714953271028], [1.701709625E12, 51.351888667992064], [1.70170949E12, 49.10676156583631], [1.70170983E12, 9.48347107438017], [1.701709535E12, 50.63943661971831], [1.70170992E12, 51.457526080476924], [1.701709875E12, 0.0], [1.7017094E12, 49.18656716417911], [1.70170974E12, 45.622132253711186], [1.701709355E12, 54.17777777777776], [1.701709445E12, 62.16908212560389], [1.701709785E12, 142.220359281437], [1.701709735E12, 33.374090247452685], [1.70170944E12, 49.63316582914577], [1.70170978E12, 84.01650618982107], [1.701709395E12, 48.365079365079374], [1.701709645E12, 51.112781954887225], [1.70170969E12, 129.0917721518988], [1.701709895E12, 0.0], [1.70170951E12, 49.515923566879], [1.7017096E12, 50.791304347826134], [1.701709555E12, 50.14138817480721], [1.70170994E12, 0.0], [1.701709805E12, 125.71540469973867], [1.70170942E12, 49.30120481927709], [1.70170985E12, 47.4165707710012], [1.701709465E12, 49.274261603375514], [1.701709585E12, 51.33410138248847], [1.70170963E12, 66.51377952755902], [1.701709495E12, 48.93127147766322], [1.70170988E12, 0.0], [1.701709835E12, 1.4097087378640778], [1.701709925E12, 46.25031289111389], [1.70170954E12, 49.43370165745859], [1.701709405E12, 49.645390070922005], [1.701709745E12, 53.88302425106992], [1.70170945E12, 48.53456221198155], [1.70170979E12, 119.81119791666664], [1.701709655E12, 52.001801801801854], [1.70170936E12, 63.375], [1.7017097E12, 51.2190016103059], [1.70170965E12, 51.93027522935785], [1.701709695E12, 53.388254486133775], [1.70170956E12, 49.46969696969694], [1.701709515E12, 48.97839506172839], [1.7017099E12, 0.0], [1.701709605E12, 50.14345991561186], [1.70170981E12, 2.014018691588787], [1.701709425E12, 48.84393063583816], [1.701709855E12, 46.883747178329564], [1.70170947E12, 48.040485829959515], [1.70170972E12, 46.68971061093244], [1.701709335E12, 63.75], [1.701709675E12, 57.539898132427815], [1.701709765E12, 24.806802721088435], [1.70170938E12, 69.41584158415841], [1.701709885E12, 0.0], [1.7017095E12, 48.84848484848485], [1.70170993E12, 53.95565410199555], [1.701709545E12, 49.13821138211383], [1.70170941E12, 48.0805369127517], [1.70170975E12, 77.4672364672365], [1.70170984E12, 1.5331991951710255], [1.701709455E12, 48.75225225225224], [1.701709795E12, 119.09870129870137], [1.70170932E12, 82.0], [1.70170966E12, 50.25044722719145], [1.701709365E12, 53.84905660377358], [1.701709705E12, 52.117924528301856], [1.70170957E12, 57.15704387990759], [1.70170991E12, 46.640688259109275], [1.701709615E12, 61.13114754098358], [1.701709565E12, 56.42968750000001], [1.701709905E12, 14.6039886039886], [1.70170961E12, 51.475991649269346], [1.701709815E12, 0.0], [1.70170943E12, 49.89010989010989], [1.70170952E12, 49.30513595166164], [1.70170986E12, 45.21750663129975], [1.701709475E12, 48.65116279069764], [1.701709725E12, 47.68800000000002], [1.70170934E12, 63.0], [1.70170977E12, 22.631432545201683], [1.701709385E12, 63.110091743119256], [1.70170959E12, 50.26410835214447], [1.70170968E12, 50.75042158516015], [1.701709635E12, 51.38387715930906]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70170994E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 22.5, "minX": 1.70170932E12, "maxY": 46.0, "series": [{"data": [[1.7017098E12, 27.072611464968166], [1.701709415E12, 23.50632911392406], [1.701709755E12, 25.288135593220336], [1.701709845E12, 25.58743169398907], [1.70170946E12, 23.549356223175963], [1.701709325E12, 26.25], [1.701709665E12, 24.807760141093457], [1.70170937E12, 24.6144578313253], [1.70170971E12, 24.44617784711388], [1.701709575E12, 24.066985645933013], [1.701709915E12, 25.09543568464729], [1.70170962E12, 24.360887096774192], [1.701709485E12, 23.59272727272727], [1.701709825E12, 25.25799999999999], [1.70170953E12, 23.844380403458217], [1.70170987E12, 33.211576846307395], [1.70170948E12, 23.541984732824428], [1.70170982E12, 24.556], [1.701709435E12, 23.8125], [1.701709525E12, 23.823008849557528], [1.701709865E12, 25.18458417849899], [1.70170973E12, 24.286703601108016], [1.701709345E12, 28.833333333333336], [1.701709775E12, 23.76041666666667], [1.70170939E12, 23.059829059829053], [1.70170964E12, 26.187022900763356], [1.701709595E12, 24.520971302428254], [1.701709685E12, 24.731623931623943], [1.70170989E12, 24.930184804928125], [1.701709505E12, 29.84640522875818], [1.701709935E12, 25.526666666666678], [1.70170955E12, 24.01846965699207], [1.70170933E12, 26.2], [1.70170967E12, 24.71577123050262], [1.70170976E12, 27.26758620689655], [1.701709375E12, 24.604938271604937], [1.701709715E12, 24.911490683229818], [1.70170958E12, 24.285046728971977], [1.701709625E12, 24.797216699801204], [1.70170949E12, 23.672597864768697], [1.70170983E12, 25.481404958677658], [1.701709535E12, 23.814084507042242], [1.70170992E12, 30.57824143070043], [1.701709875E12, 25.860655737704903], [1.7017094E12, 23.537313432835823], [1.70170974E12, 24.417004048582985], [1.701709355E12, 24.6], [1.701709445E12, 28.6328502415459], [1.701709785E12, 25.390419161676675], [1.701709735E12, 24.615720524017455], [1.70170944E12, 23.71859296482412], [1.70170978E12, 24.248968363136168], [1.701709395E12, 23.309523809523796], [1.701709645E12, 24.340225563909776], [1.70170969E12, 36.63765822784812], [1.701709895E12, 24.590631364562114], [1.70170951E12, 23.76433121019108], [1.7017096E12, 24.539130434782606], [1.701709555E12, 24.14652956298201], [1.70170994E12, 22.5], [1.701709805E12, 28.612271540469994], [1.70170942E12, 23.63253012048192], [1.70170985E12, 24.921749136939017], [1.701709465E12, 23.77637130801688], [1.701709585E12, 24.253456221198167], [1.70170963E12, 31.704724409448854], [1.701709495E12, 23.484536082474225], [1.70170988E12, 27.361842105263147], [1.701709835E12, 24.07961165048544], [1.701709925E12, 24.381727158948667], [1.70170954E12, 23.806629834254135], [1.701709405E12, 24.04255319148936], [1.701709745E12, 25.853067047075594], [1.70170945E12, 23.520737327188943], [1.70170979E12, 27.966145833333332], [1.701709655E12, 24.643243243243223], [1.70170936E12, 26.750000000000004], [1.7017097E12, 24.695652173913047], [1.70170965E12, 24.656880733944945], [1.701709695E12, 24.71615008156609], [1.70170956E12, 24.179292929292945], [1.701709515E12, 23.450617283950624], [1.7017099E12, 24.567404426559353], [1.701709605E12, 24.236286919831244], [1.70170981E12, 32.76401869158878], [1.701709425E12, 24.01734104046243], [1.701709855E12, 24.475169300225744], [1.70170947E12, 23.279352226720658], [1.70170972E12, 24.797427652733123], [1.701709335E12, 22.75], [1.701709675E12, 24.86247877758913], [1.701709765E12, 23.94693877551018], [1.70170938E12, 23.861386138613852], [1.701709885E12, 25.114919354838698], [1.7017095E12, 23.68686868686867], [1.70170993E12, 25.498891352549897], [1.701709545E12, 24.084010840108412], [1.70170941E12, 23.510067114093964], [1.70170975E12, 41.16381766381765], [1.70170984E12, 24.488933601609656], [1.701709455E12, 23.693693693693692], [1.701709795E12, 26.65584415584415], [1.70170932E12, 46.0], [1.70170966E12, 24.411449016100168], [1.701709365E12, 23.73584905660377], [1.701709705E12, 24.910377358490567], [1.70170957E12, 27.175519630484985], [1.70170991E12, 25.01417004048584], [1.701709615E12, 24.891393442622963], [1.701709565E12, 28.270833333333343], [1.701709905E12, 25.357549857549863], [1.70170961E12, 24.54906054279748], [1.701709815E12, 24.696202531645568], [1.70170943E12, 23.917582417582423], [1.70170952E12, 23.58006042296072], [1.70170986E12, 25.640583554376654], [1.701709475E12, 23.457364341085277], [1.701709725E12, 24.220799999999986], [1.70170934E12, 35.0], [1.70170977E12, 25.112656467315706], [1.701709385E12, 23.293577981651385], [1.70170959E12, 24.467268623024825], [1.70170968E12, 24.890387858347417], [1.701709635E12, 24.658349328214964]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70170994E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 42.0, "minX": 1.70170932E12, "maxY": 1052.0, "series": [{"data": [[1.7017098E12, 389.0], [1.701709415E12, 100.0], [1.701709755E12, 118.0], [1.70170946E12, 106.0], [1.701709325E12, 429.0], [1.701709665E12, 115.0], [1.70170937E12, 77.0], [1.70170971E12, 124.0], [1.701709575E12, 121.0], [1.70170962E12, 120.0], [1.701709485E12, 103.0], [1.70170953E12, 125.0], [1.70170948E12, 74.0], [1.701709435E12, 111.0], [1.701709525E12, 103.0], [1.70170973E12, 1052.0], [1.701709345E12, 139.0], [1.701709775E12, 961.0], [1.70170939E12, 71.0], [1.70170964E12, 164.0], [1.701709595E12, 121.0], [1.701709685E12, 540.0], [1.701709505E12, 276.0], [1.70170955E12, 108.0], [1.70170933E12, 115.0], [1.70170967E12, 196.0], [1.70170976E12, 265.0], [1.701709375E12, 88.0], [1.701709715E12, 171.0], [1.70170958E12, 126.0], [1.701709625E12, 140.0], [1.70170949E12, 77.0], [1.701709535E12, 128.0], [1.7017094E12, 87.0], [1.70170974E12, 130.0], [1.701709355E12, 204.0], [1.701709445E12, 281.0], [1.701709785E12, 931.0], [1.701709735E12, 171.0], [1.70170944E12, 119.0], [1.70170978E12, 993.0], [1.701709395E12, 99.0], [1.701709645E12, 114.0], [1.70170969E12, 1007.0], [1.70170951E12, 99.0], [1.7017096E12, 159.0], [1.701709555E12, 106.0], [1.701709805E12, 501.0], [1.70170942E12, 98.0], [1.701709465E12, 114.0], [1.701709585E12, 117.0], [1.70170963E12, 293.0], [1.701709495E12, 78.0], [1.70170954E12, 101.0], [1.701709405E12, 79.0], [1.701709745E12, 172.0], [1.70170945E12, 113.0], [1.70170979E12, 343.0], [1.701709655E12, 264.0], [1.70170936E12, 168.0], [1.7017097E12, 163.0], [1.70170965E12, 116.0], [1.701709695E12, 133.0], [1.70170956E12, 81.0], [1.701709515E12, 97.0], [1.701709605E12, 103.0], [1.70170981E12, 431.0], [1.701709425E12, 74.0], [1.70170947E12, 72.0], [1.70170972E12, 165.0], [1.701709335E12, 112.0], [1.701709675E12, 224.0], [1.701709765E12, 105.0], [1.70170938E12, 390.0], [1.7017095E12, 75.0], [1.701709545E12, 69.0], [1.70170941E12, 67.0], [1.70170975E12, 398.0], [1.701709455E12, 78.0], [1.701709795E12, 301.0], [1.70170932E12, 89.0], [1.70170966E12, 102.0], [1.701709365E12, 171.0], [1.701709705E12, 122.0], [1.70170957E12, 329.0], [1.701709615E12, 454.0], [1.701709565E12, 274.0], [1.70170961E12, 313.0], [1.70170943E12, 98.0], [1.70170952E12, 107.0], [1.701709475E12, 75.0], [1.701709725E12, 827.0], [1.70170934E12, 79.0], [1.70170977E12, 103.0], [1.701709385E12, 213.0], [1.70170959E12, 120.0], [1.70170968E12, 166.0], [1.701709635E12, 168.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7017098E12, 49.0], [1.701709415E12, 45.0], [1.701709755E12, 44.0], [1.70170946E12, 45.0], [1.701709325E12, 48.0], [1.701709665E12, 43.0], [1.70170937E12, 45.0], [1.70170971E12, 44.0], [1.701709575E12, 44.0], [1.70170962E12, 44.0], [1.701709485E12, 44.0], [1.70170953E12, 45.0], [1.70170948E12, 44.0], [1.701709435E12, 44.0], [1.701709525E12, 45.0], [1.70170973E12, 44.0], [1.701709345E12, 48.0], [1.701709775E12, 44.0], [1.70170939E12, 45.0], [1.70170964E12, 45.0], [1.701709595E12, 44.0], [1.701709685E12, 44.0], [1.701709505E12, 45.0], [1.70170955E12, 44.0], [1.70170933E12, 50.0], [1.70170967E12, 44.0], [1.70170976E12, 44.0], [1.701709375E12, 45.0], [1.701709715E12, 44.0], [1.70170958E12, 44.0], [1.701709625E12, 45.0], [1.70170949E12, 45.0], [1.701709535E12, 43.0], [1.7017094E12, 45.0], [1.70170974E12, 44.0], [1.701709355E12, 46.0], [1.701709445E12, 44.0], [1.701709785E12, 44.0], [1.701709735E12, 44.0], [1.70170944E12, 45.0], [1.70170978E12, 44.0], [1.701709395E12, 45.0], [1.701709645E12, 45.0], [1.70170969E12, 44.0], [1.70170951E12, 44.0], [1.7017096E12, 44.0], [1.701709555E12, 44.0], [1.701709805E12, 45.0], [1.70170942E12, 44.0], [1.701709465E12, 44.0], [1.701709585E12, 44.0], [1.70170963E12, 44.0], [1.701709495E12, 44.0], [1.70170954E12, 44.0], [1.701709405E12, 45.0], [1.701709745E12, 44.0], [1.70170945E12, 44.0], [1.70170979E12, 46.0], [1.701709655E12, 44.0], [1.70170936E12, 46.0], [1.7017097E12, 44.0], [1.70170965E12, 45.0], [1.701709695E12, 44.0], [1.70170956E12, 43.0], [1.701709515E12, 44.0], [1.701709605E12, 43.0], [1.70170981E12, 431.0], [1.701709425E12, 45.0], [1.70170947E12, 45.0], [1.70170972E12, 43.0], [1.701709335E12, 47.0], [1.701709675E12, 43.0], [1.701709765E12, 44.0], [1.70170938E12, 45.0], [1.7017095E12, 44.0], [1.701709545E12, 44.0], [1.70170941E12, 44.0], [1.70170975E12, 44.0], [1.701709455E12, 44.0], [1.701709795E12, 47.0], [1.70170932E12, 89.0], [1.70170966E12, 45.0], [1.701709365E12, 46.0], [1.701709705E12, 44.0], [1.70170957E12, 45.0], [1.701709615E12, 44.0], [1.701709565E12, 42.0], [1.70170961E12, 45.0], [1.70170943E12, 45.0], [1.70170952E12, 45.0], [1.701709475E12, 44.0], [1.701709725E12, 44.0], [1.70170934E12, 55.0], [1.70170977E12, 43.0], [1.701709385E12, 45.0], [1.70170959E12, 44.0], [1.70170968E12, 44.0], [1.701709635E12, 44.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7017098E12, 244.30000000000007], [1.701709415E12, 50.0], [1.701709755E12, 59.0], [1.70170946E12, 51.0], [1.701709325E12, 429.0], [1.701709665E12, 55.0], [1.70170937E12, 57.0], [1.70170971E12, 54.0], [1.701709575E12, 53.0], [1.70170962E12, 53.0], [1.701709485E12, 52.0], [1.70170953E12, 51.0], [1.70170948E12, 51.0], [1.701709435E12, 51.0], [1.701709525E12, 52.0], [1.70170973E12, 163.5], [1.701709345E12, 139.0], [1.701709775E12, 703.1], [1.70170939E12, 49.0], [1.70170964E12, 55.0], [1.701709595E12, 53.0], [1.701709685E12, 54.0], [1.701709505E12, 115.30000000000001], [1.70170955E12, 53.0], [1.70170933E12, 115.0], [1.70170967E12, 54.0], [1.70170976E12, 53.0], [1.701709375E12, 57.0], [1.701709715E12, 55.0], [1.70170958E12, 53.0], [1.701709625E12, 54.60000000000002], [1.70170949E12, 51.0], [1.701709535E12, 52.0], [1.7017094E12, 51.0], [1.70170974E12, 67.0], [1.701709355E12, 57.0], [1.701709445E12, 80.20000000000002], [1.701709785E12, 279.0], [1.701709735E12, 53.0], [1.70170944E12, 51.0], [1.70170978E12, 620.5], [1.701709395E12, 50.0], [1.701709645E12, 54.0], [1.70170969E12, 435.5], [1.70170951E12, 52.0], [1.7017096E12, 54.0], [1.701709555E12, 52.0], [1.701709805E12, 217.0], [1.70170942E12, 52.0], [1.701709465E12, 51.0], [1.701709585E12, 54.0], [1.70170963E12, 121.3000000000003], [1.701709495E12, 51.0], [1.70170954E12, 52.0], [1.701709405E12, 52.0], [1.701709745E12, 58.0], [1.70170945E12, 50.0], [1.70170979E12, 203.70000000000005], [1.701709655E12, 54.0], [1.70170936E12, 128.0], [1.7017097E12, 54.80000000000007], [1.70170965E12, 55.0], [1.701709695E12, 58.60000000000002], [1.70170956E12, 51.0], [1.701709515E12, 51.0], [1.701709605E12, 53.0], [1.70170981E12, 431.0], [1.701709425E12, 50.0], [1.70170947E12, 50.0], [1.70170972E12, 56.900000000000034], [1.701709335E12, 112.0], [1.701709675E12, 76.0], [1.701709765E12, 56.0], [1.70170938E12, 107.39999999999996], [1.7017095E12, 51.0], [1.701709545E12, 51.0], [1.70170941E12, 50.0], [1.70170975E12, 153.0], [1.701709455E12, 51.0], [1.701709795E12, 200.0], [1.70170932E12, 89.0], [1.70170966E12, 54.0], [1.701709365E12, 59.20000000000001], [1.701709705E12, 57.0], [1.70170957E12, 54.60000000000002], [1.701709615E12, 104.10000000000002], [1.701709565E12, 52.0], [1.70170961E12, 54.0], [1.70170943E12, 51.70000000000002], [1.70170952E12, 51.0], [1.701709475E12, 50.0], [1.701709725E12, 304.79999999999995], [1.70170934E12, 79.0], [1.70170977E12, 52.0], [1.701709385E12, 180.0], [1.70170959E12, 53.0], [1.70170968E12, 54.0], [1.701709635E12, 54.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7017098E12, 345.0], [1.701709415E12, 94.09999999999997], [1.701709755E12, 109.09999999999991], [1.70170946E12, 77.93999999999997], [1.701709325E12, 429.0], [1.701709665E12, 96.9200000000003], [1.70170937E12, 77.0], [1.70170971E12, 74.0], [1.701709575E12, 100.54000000000008], [1.70170962E12, 107.11999999999989], [1.701709485E12, 98.48000000000002], [1.70170953E12, 121.0], [1.70170948E12, 74.0], [1.701709435E12, 93.32999999999987], [1.701709525E12, 94.20000000000016], [1.70170973E12, 932.5], [1.701709345E12, 139.0], [1.701709775E12, 932.8800000000003], [1.70170939E12, 71.0], [1.70170964E12, 106.76999999999998], [1.701709595E12, 84.57999999999953], [1.701709685E12, 106.0], [1.701709505E12, 274.53000000000014], [1.70170955E12, 71.0], [1.70170933E12, 115.0], [1.70170967E12, 143.0], [1.70170976E12, 117.96000000000049], [1.701709375E12, 88.0], [1.701709715E12, 100.0], [1.70170958E12, 102.0], [1.701709625E12, 104.91999999999996], [1.70170949E12, 71.0], [1.701709535E12, 103.63999999999999], [1.7017094E12, 86.30000000000001], [1.70170974E12, 109.53999999999996], [1.701709355E12, 204.0], [1.701709445E12, 247.0], [1.701709785E12, 771.400000000001], [1.701709735E12, 76.77999999999997], [1.70170944E12, 105.0], [1.70170978E12, 939.4000000000001], [1.701709395E12, 89.82000000000014], [1.701709645E12, 104.66999999999996], [1.70170969E12, 758.1000000000006], [1.70170951E12, 71.85000000000002], [1.7017096E12, 80.38999999999999], [1.701709555E12, 83.40000000000032], [1.701709805E12, 342.0], [1.70170942E12, 81.25000000000031], [1.701709465E12, 102.24000000000001], [1.701709585E12, 104.59999999999991], [1.70170963E12, 270.0], [1.701709495E12, 72.23999999999995], [1.70170954E12, 71.59000000000003], [1.701709405E12, 78.58000000000001], [1.701709745E12, 113.0], [1.70170945E12, 81.01999999999992], [1.70170979E12, 252.63000000000045], [1.701709655E12, 113.31999999999982], [1.70170936E12, 168.0], [1.7017097E12, 104.77999999999997], [1.70170965E12, 106.0], [1.701709695E12, 110.44000000000005], [1.70170956E12, 74.20999999999981], [1.701709515E12, 71.75], [1.701709605E12, 81.0], [1.70170981E12, 431.0], [1.701709425E12, 71.77999999999997], [1.70170947E12, 68.08000000000004], [1.70170972E12, 118.0], [1.701709335E12, 112.0], [1.701709675E12, 193.70000000000016], [1.701709765E12, 78.0], [1.70170938E12, 390.0], [1.7017095E12, 70.07999999999993], [1.701709545E12, 59.900000000000034], [1.70170941E12, 67.0], [1.70170975E12, 386.0], [1.701709455E12, 71.54000000000002], [1.701709795E12, 238.02999999999997], [1.70170932E12, 89.0], [1.70170966E12, 86.0], [1.701709365E12, 171.0], [1.701709705E12, 99.40999999999997], [1.70170957E12, 226.0], [1.701709615E12, 198.21000000000015], [1.701709565E12, 274.0], [1.70170961E12, 103.99999999999994], [1.70170943E12, 98.0], [1.70170952E12, 95.2000000000001], [1.701709475E12, 72.82000000000005], [1.701709725E12, 826.0], [1.70170934E12, 79.0], [1.70170977E12, 81.68000000000006], [1.701709385E12, 213.0], [1.70170959E12, 82.24000000000001], [1.70170968E12, 78.23999999999978], [1.701709635E12, 107.77999999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7017098E12, 147.0], [1.701709415E12, 48.0], [1.701709755E12, 51.0], [1.70170946E12, 48.0], [1.701709325E12, 55.0], [1.701709665E12, 50.0], [1.70170937E12, 51.0], [1.70170971E12, 49.0], [1.701709575E12, 49.0], [1.70170962E12, 49.0], [1.701709485E12, 48.0], [1.70170953E12, 49.0], [1.70170948E12, 48.0], [1.701709435E12, 48.0], [1.701709525E12, 49.0], [1.70170973E12, 49.0], [1.701709345E12, 60.5], [1.701709775E12, 48.0], [1.70170939E12, 47.0], [1.70170964E12, 50.0], [1.701709595E12, 50.0], [1.701709685E12, 50.0], [1.701709505E12, 49.0], [1.70170955E12, 49.0], [1.70170933E12, 52.0], [1.70170967E12, 50.0], [1.70170976E12, 48.0], [1.701709375E12, 48.0], [1.701709715E12, 50.0], [1.70170958E12, 50.0], [1.701709625E12, 50.0], [1.70170949E12, 49.0], [1.701709535E12, 48.0], [1.7017094E12, 48.0], [1.70170974E12, 50.0], [1.701709355E12, 49.0], [1.701709445E12, 47.0], [1.701709785E12, 101.0], [1.701709735E12, 48.0], [1.70170944E12, 48.0], [1.70170978E12, 53.0], [1.701709395E12, 48.0], [1.701709645E12, 50.0], [1.70170969E12, 51.0], [1.70170951E12, 48.0], [1.7017096E12, 49.0], [1.701709555E12, 49.0], [1.701709805E12, 111.0], [1.70170942E12, 48.0], [1.701709465E12, 48.0], [1.701709585E12, 50.0], [1.70170963E12, 49.0], [1.701709495E12, 48.0], [1.70170954E12, 49.0], [1.701709405E12, 48.0], [1.701709745E12, 51.0], [1.70170945E12, 47.0], [1.70170979E12, 114.5], [1.701709655E12, 49.0], [1.70170936E12, 54.5], [1.7017097E12, 50.0], [1.70170965E12, 50.0], [1.701709695E12, 50.0], [1.70170956E12, 49.0], [1.701709515E12, 48.0], [1.701709605E12, 49.0], [1.70170981E12, 431.0], [1.701709425E12, 48.0], [1.70170947E12, 47.0], [1.70170972E12, 50.0], [1.701709335E12, 48.5], [1.701709675E12, 50.0], [1.701709765E12, 48.0], [1.70170938E12, 48.0], [1.7017095E12, 48.0], [1.701709545E12, 49.0], [1.70170941E12, 47.0], [1.70170975E12, 51.0], [1.701709455E12, 47.5], [1.701709795E12, 117.0], [1.70170932E12, 89.0], [1.70170966E12, 49.0], [1.701709365E12, 49.0], [1.701709705E12, 50.0], [1.70170957E12, 50.0], [1.701709615E12, 50.0], [1.701709565E12, 49.0], [1.70170961E12, 50.0], [1.70170943E12, 48.0], [1.70170952E12, 48.0], [1.701709475E12, 48.0], [1.701709725E12, 48.0], [1.70170934E12, 59.0], [1.70170977E12, 47.0], [1.701709385E12, 48.0], [1.70170959E12, 49.0], [1.70170968E12, 50.0], [1.701709635E12, 49.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7017098E12, 259.0], [1.701709415E12, 68.0], [1.701709755E12, 64.0], [1.70170946E12, 65.0], [1.701709325E12, 429.0], [1.701709665E12, 58.0], [1.70170937E12, 60.0], [1.70170971E12, 56.89999999999998], [1.701709575E12, 55.0], [1.70170962E12, 64.0], [1.701709485E12, 56.0], [1.70170953E12, 55.0], [1.70170948E12, 53.0], [1.701709435E12, 66.0], [1.701709525E12, 54.0], [1.70170973E12, 615.75], [1.701709345E12, 139.0], [1.701709775E12, 732.35], [1.70170939E12, 50.0], [1.70170964E12, 59.0], [1.701709595E12, 55.0], [1.701709685E12, 57.0], [1.701709505E12, 183.0], [1.70170955E12, 54.0], [1.70170933E12, 115.0], [1.70170967E12, 64.20000000000005], [1.70170976E12, 60.0], [1.701709375E12, 57.89999999999999], [1.701709715E12, 58.75], [1.70170958E12, 58.0], [1.701709625E12, 58.799999999999955], [1.70170949E12, 52.0], [1.701709535E12, 67.0], [1.7017094E12, 66.25], [1.70170974E12, 95.0], [1.701709355E12, 93.69999999999979], [1.701709445E12, 189.79999999999998], [1.701709785E12, 331.25], [1.701709735E12, 57.0], [1.70170944E12, 68.0], [1.70170978E12, 840.0], [1.701709395E12, 50.0], [1.701709645E12, 60.349999999999966], [1.70170969E12, 614.75], [1.70170951E12, 60.5], [1.7017096E12, 57.0], [1.701709555E12, 53.0], [1.701709805E12, 248.0], [1.70170942E12, 67.0], [1.701709465E12, 57.89999999999995], [1.701709585E12, 66.25], [1.70170963E12, 189.0], [1.701709495E12, 54.0], [1.70170954E12, 54.0], [1.701709405E12, 64.9], [1.701709745E12, 75.89999999999998], [1.70170945E12, 55.69999999999996], [1.70170979E12, 216.0], [1.701709655E12, 57.19999999999993], [1.70170936E12, 146.8499999999999], [1.7017097E12, 57.0], [1.70170965E12, 63.69999999999993], [1.701709695E12, 85.89999999999986], [1.70170956E12, 54.0], [1.701709515E12, 52.75], [1.701709605E12, 55.0], [1.70170981E12, 431.0], [1.701709425E12, 66.29999999999998], [1.70170947E12, 54.0], [1.70170972E12, 72.0], [1.701709335E12, 112.0], [1.701709675E12, 112.0], [1.701709765E12, 64.64999999999998], [1.70170938E12, 286.2999999999996], [1.7017095E12, 52.0], [1.701709545E12, 53.0], [1.70170941E12, 50.5], [1.70170975E12, 287.85], [1.701709455E12, 61.69999999999999], [1.701709795E12, 210.0], [1.70170932E12, 89.0], [1.70170966E12, 57.0], [1.701709365E12, 92.99999999999983], [1.701709705E12, 62.0], [1.70170957E12, 88.0], [1.701709615E12, 117.09999999999991], [1.701709565E12, 74.0], [1.70170961E12, 57.0], [1.70170943E12, 67.0], [1.70170952E12, 52.0], [1.701709475E12, 52.04999999999998], [1.701709725E12, 652.7999999999998], [1.70170934E12, 79.0], [1.70170977E12, 61.349999999999966], [1.701709385E12, 210.5], [1.70170959E12, 55.0], [1.70170968E12, 57.0], [1.701709635E12, 59.89999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70170981E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 1126.0, "series": [{"data": [[2.0, 53.5], [3.0, 54.0], [4.0, 57.0], [5.0, 49.0], [6.0, 48.0], [9.0, 48.0], [11.0, 49.0], [12.0, 50.0], [13.0, 50.0], [14.0, 49.5], [15.0, 49.0], [16.0, 54.0], [17.0, 50.0], [18.0, 49.0], [19.0, 48.0], [21.0, 47.0], [22.0, 48.0], [23.0, 47.0], [24.0, 48.0], [25.0, 48.0], [26.0, 48.0], [27.0, 48.0], [28.0, 48.0], [29.0, 48.0], [30.0, 48.0], [31.0, 47.0], [32.0, 48.0], [33.0, 47.0], [34.0, 47.5], [35.0, 48.0], [36.0, 48.0], [37.0, 48.0], [38.0, 48.0], [39.0, 48.0], [40.0, 47.0], [41.0, 48.0], [43.0, 47.0], [44.0, 47.0], [45.0, 47.0], [46.0, 48.0], [47.0, 48.0], [48.0, 48.0], [49.0, 47.0], [50.0, 48.0], [51.0, 48.0], [52.0, 48.0], [53.0, 48.0], [55.0, 49.0], [54.0, 48.0], [56.0, 48.0], [57.0, 48.0], [58.0, 49.0], [59.0, 48.0], [60.0, 48.0], [61.0, 49.0], [62.0, 49.0], [63.0, 48.0], [64.0, 49.0], [66.0, 48.0], [65.0, 48.0], [67.0, 50.0], [68.0, 49.0], [69.0, 49.0], [70.0, 48.0], [71.0, 48.0], [72.0, 48.0], [73.0, 49.0], [74.0, 49.0], [75.0, 49.0], [77.0, 49.0], [76.0, 49.0], [78.0, 49.0], [79.0, 49.0], [81.0, 49.0], [80.0, 48.0], [83.0, 49.0], [82.0, 50.0], [84.0, 49.0], [85.0, 50.0], [87.0, 50.0], [86.0, 49.0], [88.0, 49.0], [90.0, 49.0], [89.0, 50.0], [92.0, 50.0], [93.0, 50.0], [94.0, 50.0], [95.0, 50.0], [96.0, 49.0], [97.0, 49.0], [98.0, 49.0], [99.0, 50.0], [101.0, 50.0], [100.0, 50.0], [102.0, 50.0], [103.0, 49.0], [104.0, 49.0], [105.0, 50.0], [107.0, 50.0], [106.0, 50.0], [109.0, 50.0], [111.0, 50.0], [108.0, 50.0], [110.0, 50.0], [112.0, 49.0], [113.0, 50.0], [115.0, 50.0], [114.0, 50.0], [116.0, 50.0], [117.0, 51.0], [119.0, 55.0], [118.0, 50.0], [120.0, 50.0], [122.0, 50.0], [121.0, 55.5], [123.0, 50.0], [125.0, 50.0], [124.0, 49.0], [126.0, 49.0], [127.0, 50.0], [133.0, 49.0], [131.0, 49.0], [128.0, 50.0], [129.0, 49.0], [130.0, 50.0], [135.0, 51.0], [134.0, 48.5], [138.0, 55.5], [137.0, 50.0], [136.0, 49.0], [139.0, 50.0], [140.0, 51.0], [141.0, 50.0], [142.0, 49.0], [143.0, 48.0], [144.0, 53.0], [145.0, 51.0], [149.0, 99.0], [148.0, 48.0], [150.0, 105.0], [146.0, 48.0], [147.0, 100.0], [151.0, 63.0], [157.0, 104.0], [153.0, 48.0], [155.0, 48.0], [159.0, 122.5], [156.0, 108.0], [167.0, 55.0], [161.0, 119.0], [162.0, 109.0], [166.0, 148.0], [168.0, 49.0], [172.0, 360.0], [173.0, 154.0], [169.0, 116.0], [183.0, 64.0], [177.0, 194.0], [185.0, 75.5], [184.0, 59.0], [193.0, 262.0], [1.0, 89.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 1023.0], [14.0, 1024.0], [21.0, 1024.0], [27.0, 1023.0], [37.0, 1027.0], [40.0, 1024.0], [48.0, 1026.0], [52.0, 126.0], [55.0, 51.0], [81.0, 537.5], [87.0, 1024.0], [91.0, 1025.0], [89.0, 1024.0], [88.0, 1026.0], [90.0, 1027.0], [92.0, 1024.0], [94.0, 1024.0], [95.0, 1026.0], [93.0, 45.0], [99.0, 1024.0], [97.0, 1025.0], [98.0, 1024.0], [96.0, 1025.0], [102.0, 1024.0], [100.0, 1024.0], [103.0, 1024.0], [104.0, 1024.0], [105.0, 1023.0], [108.0, 47.0], [117.0, 1024.0], [119.0, 51.0], [122.0, 1126.0], [120.0, 45.0], [127.0, 1024.0], [126.0, 1026.0], [124.0, 1023.0], [133.0, 1024.0], [128.0, 1025.0], [135.0, 1024.0], [134.0, 48.0], [129.0, 1024.0], [138.0, 1024.0], [137.0, 1024.0], [136.0, 1024.0], [139.0, 1025.0], [140.0, 1025.0], [142.0, 1025.0], [143.0, 1024.0], [144.0, 1024.0], [149.0, 1024.0], [148.0, 1024.0], [150.0, 1024.0], [146.0, 1024.0], [147.0, 51.0], [151.0, 1024.0], [157.0, 1024.0], [153.0, 1024.0], [155.0, 48.0], [159.0, 50.0], [156.0, 51.0], [161.0, 49.5], [162.0, 47.0], [168.0, 1025.0], [172.0, 50.0], [173.0, 53.0], [169.0, 1023.0], [174.0, 46.0], [171.0, 46.0], [183.0, 1024.0], [177.0, 46.0], [176.0, 47.0], [178.0, 46.0], [179.0, 46.0], [185.0, 48.0], [189.0, 46.0], [193.0, 48.0], [196.0, 46.0], [195.0, 47.0], [204.0, 46.5], [200.0, 46.0], [265.0, 49.0], [274.0, 52.0], [288.0, 151.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 360.0, "series": [{"data": [[2.0, 53.5], [3.0, 54.0], [4.0, 57.0], [5.0, 49.0], [6.0, 48.0], [9.0, 48.0], [11.0, 49.0], [12.0, 50.0], [13.0, 50.0], [14.0, 49.5], [15.0, 49.0], [16.0, 54.0], [17.0, 50.0], [18.0, 49.0], [19.0, 48.0], [21.0, 47.0], [22.0, 48.0], [23.0, 47.0], [24.0, 48.0], [25.0, 48.0], [26.0, 48.0], [27.0, 48.0], [28.0, 48.0], [29.0, 48.0], [30.0, 48.0], [31.0, 47.0], [32.0, 48.0], [33.0, 47.0], [34.0, 47.5], [35.0, 48.0], [36.0, 48.0], [37.0, 48.0], [38.0, 48.0], [39.0, 48.0], [40.0, 47.0], [41.0, 48.0], [43.0, 47.0], [44.0, 47.0], [45.0, 47.0], [46.0, 48.0], [47.0, 48.0], [48.0, 48.0], [49.0, 47.0], [50.0, 48.0], [51.0, 48.0], [52.0, 48.0], [53.0, 48.0], [55.0, 49.0], [54.0, 48.0], [56.0, 48.0], [57.0, 48.0], [58.0, 48.0], [59.0, 48.0], [60.0, 48.0], [61.0, 49.0], [62.0, 48.0], [63.0, 48.0], [64.0, 49.0], [66.0, 48.0], [65.0, 48.0], [67.0, 50.0], [68.0, 49.0], [69.0, 49.0], [70.0, 48.0], [71.0, 48.0], [72.0, 48.0], [73.0, 49.0], [74.0, 49.0], [75.0, 49.0], [77.0, 49.0], [76.0, 49.0], [78.0, 49.0], [79.0, 49.0], [81.0, 49.0], [80.0, 48.0], [83.0, 49.0], [82.0, 50.0], [84.0, 49.0], [85.0, 50.0], [87.0, 50.0], [86.0, 49.0], [88.0, 49.0], [90.0, 49.0], [89.0, 50.0], [92.0, 50.0], [93.0, 50.0], [94.0, 49.5], [95.0, 50.0], [96.0, 49.0], [97.0, 49.0], [98.0, 49.0], [99.0, 50.0], [101.0, 50.0], [100.0, 50.0], [102.0, 50.0], [103.0, 49.0], [104.0, 49.0], [105.0, 50.0], [107.0, 50.0], [106.0, 50.0], [109.0, 50.0], [111.0, 50.0], [108.0, 50.0], [110.0, 50.0], [112.0, 49.0], [113.0, 50.0], [115.0, 50.0], [114.0, 50.0], [116.0, 50.0], [117.0, 51.0], [119.0, 55.0], [118.0, 50.0], [120.0, 50.0], [122.0, 50.0], [121.0, 55.5], [123.0, 50.0], [125.0, 50.0], [124.0, 49.0], [126.0, 49.0], [127.0, 50.0], [133.0, 49.0], [131.0, 49.0], [128.0, 50.0], [129.0, 49.0], [130.0, 50.0], [135.0, 51.0], [134.0, 48.5], [138.0, 55.5], [137.0, 50.0], [136.0, 49.0], [139.0, 49.0], [140.0, 51.0], [141.0, 50.0], [142.0, 49.0], [143.0, 48.0], [144.0, 53.0], [145.0, 51.0], [149.0, 99.0], [148.0, 48.0], [150.0, 104.0], [146.0, 48.0], [147.0, 100.0], [151.0, 63.0], [157.0, 104.0], [153.0, 47.0], [155.0, 48.0], [159.0, 119.0], [156.0, 108.0], [167.0, 55.0], [161.0, 119.0], [162.0, 109.0], [166.0, 148.0], [168.0, 49.0], [172.0, 360.0], [173.0, 154.0], [169.0, 116.0], [183.0, 64.0], [177.0, 194.0], [185.0, 75.5], [184.0, 59.0], [193.0, 262.0], [1.0, 82.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [14.0, 0.0], [21.0, 0.0], [27.0, 0.0], [37.0, 0.0], [40.0, 0.0], [48.0, 0.0], [52.0, 126.0], [55.0, 46.0], [81.0, 20.5], [87.0, 0.0], [91.0, 0.0], [89.0, 0.0], [88.0, 0.0], [90.0, 0.0], [92.0, 0.0], [94.0, 0.0], [95.0, 0.0], [93.0, 45.0], [99.0, 0.0], [97.0, 0.0], [98.0, 0.0], [96.0, 0.0], [102.0, 0.0], [100.0, 0.0], [103.0, 0.0], [104.0, 0.0], [105.0, 0.0], [108.0, 47.0], [117.0, 0.0], [119.0, 51.0], [122.0, 0.0], [120.0, 45.0], [127.0, 0.0], [126.0, 0.0], [124.0, 0.0], [133.0, 0.0], [128.0, 0.0], [135.0, 0.0], [134.0, 44.0], [129.0, 0.0], [138.0, 0.0], [137.0, 0.0], [136.0, 0.0], [139.0, 0.0], [140.0, 0.0], [142.0, 0.0], [143.0, 0.0], [144.0, 0.0], [149.0, 0.0], [148.0, 0.0], [150.0, 0.0], [146.0, 0.0], [147.0, 43.0], [151.0, 0.0], [157.0, 0.0], [153.0, 0.0], [155.0, 44.0], [159.0, 50.0], [156.0, 51.0], [161.0, 49.5], [162.0, 47.0], [168.0, 0.0], [172.0, 46.0], [173.0, 53.0], [169.0, 0.0], [174.0, 46.0], [171.0, 46.0], [183.0, 0.0], [177.0, 46.0], [176.0, 47.0], [178.0, 46.0], [179.0, 46.0], [185.0, 48.0], [189.0, 46.0], [193.0, 47.0], [196.0, 46.0], [195.0, 47.0], [204.0, 46.0], [200.0, 46.0], [265.0, 45.0], [274.0, 44.0], [288.0, 87.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 288.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.70170932E12, "maxY": 195.4, "series": [{"data": [[1.7017098E12, 156.4], [1.701709415E12, 31.8], [1.701709755E12, 143.0], [1.701709845E12, 128.2], [1.70170946E12, 46.4], [1.701709325E12, 0.8], [1.701709665E12, 113.4], [1.70170937E12, 16.8], [1.70170971E12, 128.0], [1.701709575E12, 84.0], [1.701709915E12, 114.6], [1.70170962E12, 99.0], [1.701709485E12, 54.6], [1.701709825E12, 100.0], [1.70170953E12, 69.4], [1.70170987E12, 100.2], [1.70170948E12, 52.8], [1.70170982E12, 100.0], [1.701709435E12, 38.2], [1.701709525E12, 67.6], [1.701709865E12, 98.6], [1.70170973E12, 135.6], [1.701709345E12, 1.2], [1.701709775E12, 115.2], [1.70170939E12, 23.4], [1.70170964E12, 104.8], [1.701709595E12, 91.0], [1.701709685E12, 120.8], [1.70170989E12, 97.4], [1.701709505E12, 61.4], [1.701709935E12, 27.0], [1.70170955E12, 76.0], [1.70170933E12, 1.0], [1.70170967E12, 115.4], [1.70170976E12, 146.0], [1.701709375E12, 16.2], [1.701709715E12, 129.6], [1.70170958E12, 85.4], [1.701709625E12, 100.8], [1.70170949E12, 56.8], [1.70170983E12, 96.8], [1.701709535E12, 71.0], [1.70170992E12, 116.6], [1.701709875E12, 97.6], [1.7017094E12, 26.8], [1.70170974E12, 139.4], [1.701709355E12, 9.0], [1.701709445E12, 41.0], [1.701709785E12, 153.0], [1.701709735E12, 137.6], [1.70170944E12, 40.4], [1.70170978E12, 141.6], [1.701709395E12, 25.4], [1.701709645E12, 106.8], [1.70170969E12, 122.4], [1.701709895E12, 98.2], [1.70170951E12, 62.8], [1.7017096E12, 91.8], [1.701709555E12, 77.8], [1.701709805E12, 158.8], [1.70170942E12, 33.2], [1.70170985E12, 173.6], [1.701709465E12, 47.4], [1.701709585E12, 86.6], [1.70170963E12, 101.6], [1.701709495E12, 57.8], [1.70170988E12, 91.2], [1.701709835E12, 103.0], [1.701709925E12, 158.8], [1.70170954E12, 72.4], [1.701709405E12, 28.2], [1.701709745E12, 140.0], [1.70170945E12, 43.2], [1.70170979E12, 154.2], [1.701709655E12, 111.0], [1.70170936E12, 10.0], [1.7017097E12, 124.2], [1.70170965E12, 108.6], [1.701709695E12, 122.8], [1.70170956E12, 79.2], [1.701709515E12, 64.4], [1.7017099E12, 99.4], [1.701709605E12, 95.0], [1.70170981E12, 96.4], [1.701709425E12, 34.6], [1.701709855E12, 177.6], [1.70170947E12, 49.4], [1.70170972E12, 132.6], [1.701709335E12, 0.8], [1.701709675E12, 117.8], [1.701709765E12, 147.0], [1.70170938E12, 20.2], [1.701709885E12, 99.2], [1.7017095E12, 59.6], [1.70170993E12, 92.2], [1.701709545E12, 73.8], [1.70170941E12, 29.6], [1.70170975E12, 140.6], [1.70170984E12, 99.4], [1.701709455E12, 44.6], [1.701709795E12, 155.4], [1.70170932E12, 0.2], [1.70170966E12, 111.8], [1.701709365E12, 10.2], [1.701709705E12, 127.2], [1.70170957E12, 82.4], [1.70170991E12, 195.4], [1.701709615E12, 97.4], [1.701709565E12, 81.0], [1.701709905E12, 124.4], [1.70170961E12, 95.8], [1.701709815E12, 94.8], [1.70170943E12, 36.6], [1.70170952E12, 66.4], [1.70170986E12, 168.8], [1.701709475E12, 51.6], [1.701709725E12, 133.8], [1.70170934E12, 0.8], [1.70170977E12, 148.0], [1.701709385E12, 21.8], [1.70170959E12, 88.6], [1.70170968E12, 118.8], [1.701709635E12, 104.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701709935E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.70170932E12, "maxY": 177.2, "series": [{"data": [[1.7017098E12, 155.2], [1.701709415E12, 31.6], [1.701709755E12, 118.8], [1.70170946E12, 46.6], [1.701709325E12, 0.8], [1.701709665E12, 113.4], [1.70170937E12, 16.6], [1.70170971E12, 128.2], [1.701709575E12, 83.6], [1.70170962E12, 99.2], [1.701709485E12, 55.0], [1.70170953E12, 69.4], [1.70170948E12, 52.4], [1.701709435E12, 38.4], [1.701709525E12, 67.8], [1.70170973E12, 84.8], [1.701709345E12, 1.2], [1.701709775E12, 23.6], [1.70170939E12, 23.4], [1.70170964E12, 104.4], [1.701709595E12, 90.6], [1.701709685E12, 117.0], [1.701709505E12, 61.2], [1.70170955E12, 75.8], [1.70170933E12, 1.0], [1.70170967E12, 115.4], [1.70170976E12, 72.6], [1.701709375E12, 16.2], [1.701709715E12, 128.8], [1.70170958E12, 85.6], [1.701709625E12, 100.6], [1.70170949E12, 56.2], [1.701709535E12, 71.0], [1.7017094E12, 26.8], [1.70170974E12, 124.4], [1.701709355E12, 9.0], [1.701709445E12, 41.4], [1.701709785E12, 132.8], [1.701709735E12, 92.0], [1.70170944E12, 39.8], [1.70170978E12, 68.8], [1.701709395E12, 25.2], [1.701709645E12, 106.4], [1.70170969E12, 112.8], [1.70170951E12, 62.8], [1.7017096E12, 92.0], [1.701709555E12, 77.8], [1.701709805E12, 153.2], [1.70170942E12, 33.2], [1.701709465E12, 47.4], [1.701709585E12, 86.8], [1.70170963E12, 101.6], [1.701709495E12, 58.2], [1.70170954E12, 72.4], [1.701709405E12, 28.2], [1.701709745E12, 140.2], [1.70170945E12, 43.4], [1.70170979E12, 138.4], [1.701709655E12, 111.0], [1.70170936E12, 9.6], [1.7017097E12, 124.2], [1.70170965E12, 109.0], [1.701709695E12, 122.6], [1.70170956E12, 79.2], [1.701709515E12, 64.8], [1.701709605E12, 94.8], [1.70170981E12, 0.4], [1.701709425E12, 34.6], [1.70170947E12, 49.4], [1.70170972E12, 110.0], [1.701709335E12, 0.8], [1.701709675E12, 117.8], [1.701709765E12, 73.2], [1.70170938E12, 20.2], [1.7017095E12, 59.4], [1.701709545E12, 73.8], [1.70170941E12, 29.8], [1.70170975E12, 140.4], [1.701709455E12, 44.4], [1.701709795E12, 139.6], [1.70170932E12, 0.2], [1.70170966E12, 111.8], [1.701709365E12, 10.6], [1.701709705E12, 127.2], [1.70170957E12, 86.6], [1.701709615E12, 97.6], [1.701709565E12, 76.8], [1.70170961E12, 95.8], [1.70170943E12, 36.4], [1.70170952E12, 66.2], [1.701709475E12, 51.6], [1.701709725E12, 52.6], [1.70170934E12, 0.8], [1.70170977E12, 66.4], [1.701709385E12, 21.8], [1.70170959E12, 88.6], [1.70170968E12, 118.6], [1.701709635E12, 104.2]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.701709885E12, 99.2], [1.701709755E12, 11.0], [1.70170976E12, 71.6], [1.701709845E12, 89.0], [1.70170988E12, 90.8], [1.701709835E12, 100.0], [1.70170984E12, 96.2], [1.701709925E12, 0.6], [1.701709915E12, 74.8], [1.70170983E12, 93.2], [1.70170992E12, 96.4], [1.701709875E12, 97.6], [1.70170974E12, 23.8], [1.701709825E12, 100.0], [1.70170991E12, 2.4], [1.701709785E12, 18.4], [1.70170987E12, 98.6], [1.701709735E12, 45.4], [1.70170982E12, 100.0], [1.701709905E12, 98.6], [1.70170978E12, 76.6], [1.701709865E12, 98.6], [1.70170973E12, 59.6], [1.701709815E12, 94.8], [1.7017099E12, 99.4], [1.70170969E12, 13.6], [1.701709775E12, 90.4], [1.70170986E12, 3.6], [1.701709725E12, 72.4], [1.701709895E12, 98.2], [1.70170981E12, 85.2], [1.70170977E12, 77.0], [1.70170994E12, 0.4], [1.70170972E12, 14.4], [1.70170989E12, 91.6], [1.701709765E12, 73.8], [1.701709935E12, 29.0]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.7017098E12, 1.8], [1.701709905E12, 41.8], [1.701709845E12, 57.4], [1.70170993E12, 90.2], [1.701709835E12, 3.0], [1.70170984E12, 3.2], [1.701709775E12, 1.2], [1.701709925E12, 159.2], [1.70170986E12, 146.8], [1.701709795E12, 14.4], [1.70170983E12, 3.6], [1.701709855E12, 177.2], [1.70170992E12, 37.8], [1.70170979E12, 14.8], [1.70170989E12, 5.8], [1.70170991E12, 93.6], [1.701709935E12, 1.0], [1.70170985E12, 173.8], [1.701709785E12, 15.8], [1.70170987E12, 1.6]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.701709915E12, 21.6], [1.70170991E12, 101.6]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.70170964E12, 0.4], [1.70170976E12, 0.8], [1.70170977E12, 0.4], [1.70170979E12, 0.4], [1.70170988E12, 0.4], [1.70170986E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70170994E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.70170932E12, "maxY": 197.6, "series": [{"data": [[1.7017098E12, 155.2], [1.701709415E12, 31.6], [1.701709755E12, 118.8], [1.70170946E12, 46.6], [1.701709325E12, 0.8], [1.701709665E12, 113.4], [1.70170937E12, 16.6], [1.70170971E12, 128.2], [1.701709575E12, 83.6], [1.70170962E12, 99.2], [1.701709485E12, 55.0], [1.70170953E12, 69.4], [1.70170948E12, 52.4], [1.701709435E12, 38.4], [1.701709525E12, 67.8], [1.70170973E12, 84.8], [1.701709345E12, 1.2], [1.701709775E12, 23.6], [1.70170939E12, 23.4], [1.70170964E12, 104.4], [1.701709595E12, 90.6], [1.701709685E12, 117.0], [1.701709505E12, 61.2], [1.70170955E12, 75.8], [1.70170933E12, 1.0], [1.70170967E12, 115.4], [1.70170976E12, 72.6], [1.701709375E12, 16.2], [1.701709715E12, 128.8], [1.70170958E12, 85.6], [1.701709625E12, 100.6], [1.70170949E12, 56.2], [1.701709535E12, 71.0], [1.7017094E12, 26.8], [1.70170974E12, 124.4], [1.701709355E12, 9.0], [1.701709445E12, 41.4], [1.701709785E12, 132.8], [1.701709735E12, 92.0], [1.70170944E12, 39.8], [1.70170978E12, 68.8], [1.701709395E12, 25.2], [1.701709645E12, 106.4], [1.70170969E12, 112.8], [1.70170951E12, 62.8], [1.7017096E12, 92.0], [1.701709555E12, 77.8], [1.701709805E12, 153.2], [1.70170942E12, 33.2], [1.701709465E12, 47.4], [1.701709585E12, 86.8], [1.70170963E12, 101.6], [1.701709495E12, 58.2], [1.70170954E12, 72.4], [1.701709405E12, 28.2], [1.701709745E12, 140.2], [1.70170945E12, 43.4], [1.70170979E12, 138.4], [1.701709655E12, 111.0], [1.70170936E12, 9.6], [1.7017097E12, 124.2], [1.70170965E12, 109.0], [1.701709695E12, 122.6], [1.70170956E12, 79.2], [1.701709515E12, 64.8], [1.701709605E12, 94.8], [1.70170981E12, 0.4], [1.701709425E12, 34.6], [1.70170947E12, 49.4], [1.70170972E12, 110.0], [1.701709335E12, 0.8], [1.701709675E12, 117.8], [1.701709765E12, 73.2], [1.70170938E12, 20.2], [1.7017095E12, 59.4], [1.701709545E12, 73.8], [1.70170941E12, 29.8], [1.70170975E12, 140.4], [1.701709455E12, 44.4], [1.701709795E12, 139.6], [1.70170932E12, 0.2], [1.70170966E12, 111.8], [1.701709365E12, 10.6], [1.701709705E12, 127.2], [1.70170957E12, 86.6], [1.701709615E12, 97.6], [1.701709565E12, 76.8], [1.70170961E12, 95.8], [1.70170943E12, 36.4], [1.70170952E12, 66.2], [1.701709475E12, 51.6], [1.701709725E12, 52.6], [1.70170934E12, 0.8], [1.70170977E12, 66.4], [1.701709385E12, 21.8], [1.70170959E12, 88.6], [1.70170968E12, 118.6], [1.701709635E12, 104.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7017098E12, 1.8], [1.701709885E12, 99.2], [1.701709755E12, 11.0], [1.70170976E12, 72.4], [1.701709845E12, 146.4], [1.70170993E12, 90.2], [1.70170988E12, 91.2], [1.701709835E12, 103.0], [1.70170984E12, 99.4], [1.701709925E12, 159.8], [1.701709795E12, 14.4], [1.701709915E12, 96.4], [1.70170983E12, 96.8], [1.70170992E12, 134.2], [1.701709875E12, 97.6], [1.70170979E12, 15.2], [1.70170974E12, 23.8], [1.701709825E12, 100.0], [1.70170991E12, 197.6], [1.701709785E12, 34.2], [1.70170987E12, 100.2], [1.701709735E12, 45.4], [1.70170982E12, 100.0], [1.701709905E12, 140.4], [1.70170978E12, 76.6], [1.701709865E12, 98.6], [1.70170973E12, 59.6], [1.701709815E12, 94.8], [1.7017099E12, 99.4], [1.70170969E12, 13.6], [1.701709775E12, 91.6], [1.70170986E12, 150.8], [1.70170964E12, 0.4], [1.701709725E12, 72.4], [1.701709895E12, 98.2], [1.70170981E12, 85.2], [1.70170977E12, 77.4], [1.701709855E12, 177.2], [1.70170994E12, 0.4], [1.70170972E12, 14.4], [1.70170989E12, 97.4], [1.701709765E12, 73.8], [1.701709935E12, 30.0], [1.70170985E12, 173.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70170994E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.70170932E12, "maxY": 197.6, "series": [{"data": [[1.7017098E12, 155.2], [1.701709415E12, 31.6], [1.701709755E12, 118.8], [1.70170946E12, 46.6], [1.701709325E12, 0.8], [1.701709665E12, 113.4], [1.70170937E12, 16.6], [1.70170971E12, 128.2], [1.701709575E12, 83.6], [1.70170962E12, 99.2], [1.701709485E12, 55.0], [1.70170953E12, 69.4], [1.70170948E12, 52.4], [1.701709435E12, 38.4], [1.701709525E12, 67.8], [1.70170973E12, 84.8], [1.701709345E12, 1.2], [1.701709775E12, 23.6], [1.70170939E12, 23.4], [1.70170964E12, 104.4], [1.701709595E12, 90.6], [1.701709685E12, 117.0], [1.701709505E12, 61.2], [1.70170955E12, 75.8], [1.70170933E12, 1.0], [1.70170967E12, 115.4], [1.70170976E12, 72.6], [1.701709375E12, 16.2], [1.701709715E12, 128.8], [1.70170958E12, 85.6], [1.701709625E12, 100.6], [1.70170949E12, 56.2], [1.701709535E12, 71.0], [1.7017094E12, 26.8], [1.70170974E12, 124.4], [1.701709355E12, 9.0], [1.701709445E12, 41.4], [1.701709785E12, 132.8], [1.701709735E12, 92.0], [1.70170944E12, 39.8], [1.70170978E12, 68.8], [1.701709395E12, 25.2], [1.701709645E12, 106.4], [1.70170969E12, 112.8], [1.70170951E12, 62.8], [1.7017096E12, 92.0], [1.701709555E12, 77.8], [1.701709805E12, 153.2], [1.70170942E12, 33.2], [1.701709465E12, 47.4], [1.701709585E12, 86.8], [1.70170963E12, 101.6], [1.701709495E12, 58.2], [1.70170954E12, 72.4], [1.701709405E12, 28.2], [1.701709745E12, 140.2], [1.70170945E12, 43.4], [1.70170979E12, 138.4], [1.701709655E12, 111.0], [1.70170936E12, 9.6], [1.7017097E12, 124.2], [1.70170965E12, 109.0], [1.701709695E12, 122.6], [1.70170956E12, 79.2], [1.701709515E12, 64.8], [1.701709605E12, 94.8], [1.70170981E12, 0.4], [1.701709425E12, 34.6], [1.70170947E12, 49.4], [1.70170972E12, 110.0], [1.701709335E12, 0.8], [1.701709675E12, 117.8], [1.701709765E12, 73.2], [1.70170938E12, 20.2], [1.7017095E12, 59.4], [1.701709545E12, 73.8], [1.70170941E12, 29.8], [1.70170975E12, 140.4], [1.701709455E12, 44.4], [1.701709795E12, 139.6], [1.70170932E12, 0.2], [1.70170966E12, 111.8], [1.701709365E12, 10.6], [1.701709705E12, 127.2], [1.70170957E12, 86.6], [1.701709615E12, 97.6], [1.701709565E12, 76.8], [1.70170961E12, 95.8], [1.70170943E12, 36.4], [1.70170952E12, 66.2], [1.701709475E12, 51.6], [1.701709725E12, 52.6], [1.70170934E12, 0.8], [1.70170977E12, 66.4], [1.701709385E12, 21.8], [1.70170959E12, 88.6], [1.70170968E12, 118.6], [1.701709635E12, 104.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7017098E12, 1.8], [1.701709885E12, 99.2], [1.701709755E12, 11.0], [1.70170976E12, 72.4], [1.701709845E12, 146.4], [1.70170993E12, 90.2], [1.70170988E12, 91.2], [1.701709835E12, 103.0], [1.70170984E12, 99.4], [1.701709925E12, 159.8], [1.701709795E12, 14.4], [1.701709915E12, 96.4], [1.70170983E12, 96.8], [1.70170992E12, 134.2], [1.701709875E12, 97.6], [1.70170979E12, 15.2], [1.70170974E12, 23.8], [1.701709825E12, 100.0], [1.70170991E12, 197.6], [1.701709785E12, 34.2], [1.70170987E12, 100.2], [1.701709735E12, 45.4], [1.70170982E12, 100.0], [1.701709905E12, 140.4], [1.70170978E12, 76.6], [1.701709865E12, 98.6], [1.70170973E12, 59.6], [1.701709815E12, 94.8], [1.7017099E12, 99.4], [1.70170969E12, 13.6], [1.701709775E12, 91.6], [1.70170986E12, 150.8], [1.70170964E12, 0.4], [1.701709725E12, 72.4], [1.701709895E12, 98.2], [1.70170981E12, 85.2], [1.70170977E12, 77.4], [1.701709855E12, 177.2], [1.70170994E12, 0.4], [1.70170972E12, 14.4], [1.70170989E12, 97.4], [1.701709765E12, 73.8], [1.701709935E12, 30.0], [1.70170985E12, 173.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.70170994E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

