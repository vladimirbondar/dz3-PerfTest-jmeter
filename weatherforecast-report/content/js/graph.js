/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 436.0, "minX": 0.0, "maxY": 60182.0, "series": [{"data": [[0.0, 436.0], [0.1, 456.0], [0.2, 469.0], [0.3, 478.0], [0.4, 481.0], [0.5, 482.0], [0.6, 483.0], [0.7, 489.0], [0.8, 493.0], [0.9, 496.0], [1.0, 502.0], [1.1, 511.0], [1.2, 511.0], [1.3, 515.0], [1.4, 516.0], [1.5, 528.0], [1.6, 557.0], [1.7, 557.0], [1.8, 559.0], [1.9, 560.0], [2.0, 569.0], [2.1, 570.0], [2.2, 588.0], [2.3, 596.0], [2.4, 602.0], [2.5, 602.0], [2.6, 605.0], [2.7, 609.0], [2.8, 613.0], [2.9, 617.0], [3.0, 623.0], [3.1, 626.0], [3.2, 647.0], [3.3, 653.0], [3.4, 655.0], [3.5, 662.0], [3.6, 673.0], [3.7, 682.0], [3.8, 684.0], [3.9, 684.0], [4.0, 690.0], [4.1, 708.0], [4.2, 709.0], [4.3, 719.0], [4.4, 719.0], [4.5, 723.0], [4.6, 724.0], [4.7, 726.0], [4.8, 727.0], [4.9, 729.0], [5.0, 730.0], [5.1, 740.0], [5.2, 747.0], [5.3, 750.0], [5.4, 759.0], [5.5, 759.0], [5.6, 759.0], [5.7, 771.0], [5.8, 771.0], [5.9, 772.0], [6.0, 772.0], [6.1, 779.0], [6.2, 780.0], [6.3, 786.0], [6.4, 787.0], [6.5, 789.0], [6.6, 791.0], [6.7, 793.0], [6.8, 794.0], [6.9, 798.0], [7.0, 802.0], [7.1, 807.0], [7.2, 807.0], [7.3, 811.0], [7.4, 811.0], [7.5, 812.0], [7.6, 813.0], [7.7, 813.0], [7.8, 817.0], [7.9, 825.0], [8.0, 830.0], [8.1, 836.0], [8.2, 840.0], [8.3, 841.0], [8.4, 844.0], [8.5, 855.0], [8.6, 855.0], [8.7, 867.0], [8.8, 867.0], [8.9, 869.0], [9.0, 879.0], [9.1, 880.0], [9.2, 883.0], [9.3, 883.0], [9.4, 889.0], [9.5, 894.0], [9.6, 894.0], [9.7, 894.0], [9.8, 899.0], [9.9, 901.0], [10.0, 903.0], [10.1, 904.0], [10.2, 914.0], [10.3, 915.0], [10.4, 917.0], [10.5, 919.0], [10.6, 920.0], [10.7, 922.0], [10.8, 923.0], [10.9, 923.0], [11.0, 926.0], [11.1, 928.0], [11.2, 929.0], [11.3, 929.0], [11.4, 930.0], [11.5, 935.0], [11.6, 936.0], [11.7, 937.0], [11.8, 941.0], [11.9, 943.0], [12.0, 943.0], [12.1, 943.0], [12.2, 945.0], [12.3, 954.0], [12.4, 961.0], [12.5, 961.0], [12.6, 978.0], [12.7, 983.0], [12.8, 989.0], [12.9, 989.0], [13.0, 993.0], [13.1, 996.0], [13.2, 997.0], [13.3, 997.0], [13.4, 1001.0], [13.5, 1002.0], [13.6, 1003.0], [13.7, 1003.0], [13.8, 1006.0], [13.9, 1008.0], [14.0, 1011.0], [14.1, 1022.0], [14.2, 1025.0], [14.3, 1025.0], [14.4, 1028.0], [14.5, 1030.0], [14.6, 1031.0], [14.7, 1032.0], [14.8, 1035.0], [14.9, 1040.0], [15.0, 1044.0], [15.1, 1044.0], [15.2, 1050.0], [15.3, 1055.0], [15.4, 1061.0], [15.5, 1064.0], [15.6, 1068.0], [15.7, 1076.0], [15.8, 1077.0], [15.9, 1079.0], [16.0, 1080.0], [16.1, 1087.0], [16.2, 1089.0], [16.3, 1090.0], [16.4, 1091.0], [16.5, 1092.0], [16.6, 1093.0], [16.7, 1095.0], [16.8, 1095.0], [16.9, 1100.0], [17.0, 1100.0], [17.1, 1101.0], [17.2, 1106.0], [17.3, 1106.0], [17.4, 1109.0], [17.5, 1109.0], [17.6, 1111.0], [17.7, 1113.0], [17.8, 1115.0], [17.9, 1117.0], [18.0, 1117.0], [18.1, 1118.0], [18.2, 1119.0], [18.3, 1122.0], [18.4, 1124.0], [18.5, 1126.0], [18.6, 1128.0], [18.7, 1136.0], [18.8, 1141.0], [18.9, 1149.0], [19.0, 1150.0], [19.1, 1151.0], [19.2, 1153.0], [19.3, 1155.0], [19.4, 1157.0], [19.5, 1161.0], [19.6, 1172.0], [19.7, 1174.0], [19.8, 1176.0], [19.9, 1178.0], [20.0, 1180.0], [20.1, 1181.0], [20.2, 1182.0], [20.3, 1184.0], [20.4, 1188.0], [20.5, 1190.0], [20.6, 1192.0], [20.7, 1193.0], [20.8, 1194.0], [20.9, 1194.0], [21.0, 1194.0], [21.1, 1196.0], [21.2, 1202.0], [21.3, 1202.0], [21.4, 1203.0], [21.5, 1203.0], [21.6, 1204.0], [21.7, 1206.0], [21.8, 1207.0], [21.9, 1208.0], [22.0, 1210.0], [22.1, 1211.0], [22.2, 1211.0], [22.3, 1212.0], [22.4, 1212.0], [22.5, 1213.0], [22.6, 1213.0], [22.7, 1216.0], [22.8, 1217.0], [22.9, 1219.0], [23.0, 1221.0], [23.1, 1226.0], [23.2, 1230.0], [23.3, 1233.0], [23.4, 1234.0], [23.5, 1239.0], [23.6, 1239.0], [23.7, 1240.0], [23.8, 1241.0], [23.9, 1249.0], [24.0, 1251.0], [24.1, 1254.0], [24.2, 1259.0], [24.3, 1259.0], [24.4, 1264.0], [24.5, 1266.0], [24.6, 1268.0], [24.7, 1269.0], [24.8, 1274.0], [24.9, 1276.0], [25.0, 1276.0], [25.1, 1278.0], [25.2, 1281.0], [25.3, 1281.0], [25.4, 1282.0], [25.5, 1287.0], [25.6, 1287.0], [25.7, 1293.0], [25.8, 1294.0], [25.9, 1299.0], [26.0, 1302.0], [26.1, 1305.0], [26.2, 1306.0], [26.3, 1307.0], [26.4, 1307.0], [26.5, 1311.0], [26.6, 1313.0], [26.7, 1314.0], [26.8, 1315.0], [26.9, 1318.0], [27.0, 1322.0], [27.1, 1331.0], [27.2, 1332.0], [27.3, 1336.0], [27.4, 1339.0], [27.5, 1343.0], [27.6, 1343.0], [27.7, 1344.0], [27.8, 1347.0], [27.9, 1351.0], [28.0, 1360.0], [28.1, 1361.0], [28.2, 1373.0], [28.3, 1376.0], [28.4, 1382.0], [28.5, 1382.0], [28.6, 1384.0], [28.7, 1385.0], [28.8, 1385.0], [28.9, 1389.0], [29.0, 1394.0], [29.1, 1396.0], [29.2, 1397.0], [29.3, 1401.0], [29.4, 1401.0], [29.5, 1402.0], [29.6, 1405.0], [29.7, 1411.0], [29.8, 1411.0], [29.9, 1415.0], [30.0, 1415.0], [30.1, 1421.0], [30.2, 1430.0], [30.3, 1431.0], [30.4, 1435.0], [30.5, 1437.0], [30.6, 1439.0], [30.7, 1440.0], [30.8, 1442.0], [30.9, 1442.0], [31.0, 1442.0], [31.1, 1443.0], [31.2, 1445.0], [31.3, 1447.0], [31.4, 1448.0], [31.5, 1461.0], [31.6, 1468.0], [31.7, 1469.0], [31.8, 1472.0], [31.9, 1476.0], [32.0, 1483.0], [32.1, 1485.0], [32.2, 1486.0], [32.3, 1487.0], [32.4, 1488.0], [32.5, 1490.0], [32.6, 1491.0], [32.7, 1496.0], [32.8, 1498.0], [32.9, 1499.0], [33.0, 1500.0], [33.1, 1501.0], [33.2, 1501.0], [33.3, 1502.0], [33.4, 1509.0], [33.5, 1513.0], [33.6, 1515.0], [33.7, 1516.0], [33.8, 1517.0], [33.9, 1518.0], [34.0, 1520.0], [34.1, 1523.0], [34.2, 1524.0], [34.3, 1527.0], [34.4, 1539.0], [34.5, 1540.0], [34.6, 1551.0], [34.7, 1561.0], [34.8, 1565.0], [34.9, 1565.0], [35.0, 1567.0], [35.1, 1570.0], [35.2, 1573.0], [35.3, 1576.0], [35.4, 1579.0], [35.5, 1579.0], [35.6, 1579.0], [35.7, 1584.0], [35.8, 1587.0], [35.9, 1587.0], [36.0, 1596.0], [36.1, 1601.0], [36.2, 1608.0], [36.3, 1608.0], [36.4, 1608.0], [36.5, 1610.0], [36.6, 1615.0], [36.7, 1623.0], [36.8, 1624.0], [36.9, 1635.0], [37.0, 1638.0], [37.1, 1653.0], [37.2, 1657.0], [37.3, 1658.0], [37.4, 1660.0], [37.5, 1663.0], [37.6, 1666.0], [37.7, 1667.0], [37.8, 1667.0], [37.9, 1682.0], [38.0, 1684.0], [38.1, 1684.0], [38.2, 1692.0], [38.3, 1695.0], [38.4, 1695.0], [38.5, 1696.0], [38.6, 1702.0], [38.7, 1702.0], [38.8, 1708.0], [38.9, 1708.0], [39.0, 1709.0], [39.1, 1710.0], [39.2, 1711.0], [39.3, 1713.0], [39.4, 1714.0], [39.5, 1715.0], [39.6, 1718.0], [39.7, 1718.0], [39.8, 1739.0], [39.9, 1745.0], [40.0, 1745.0], [40.1, 1753.0], [40.2, 1765.0], [40.3, 1770.0], [40.4, 1771.0], [40.5, 1772.0], [40.6, 1772.0], [40.7, 1774.0], [40.8, 1777.0], [40.9, 1779.0], [41.0, 1781.0], [41.1, 1782.0], [41.2, 1785.0], [41.3, 1791.0], [41.4, 1793.0], [41.5, 1797.0], [41.6, 1798.0], [41.7, 1807.0], [41.8, 1807.0], [41.9, 1813.0], [42.0, 1815.0], [42.1, 1820.0], [42.2, 1825.0], [42.3, 1826.0], [42.4, 1841.0], [42.5, 1849.0], [42.6, 1851.0], [42.7, 1852.0], [42.8, 1853.0], [42.9, 1865.0], [43.0, 1871.0], [43.1, 1877.0], [43.2, 1877.0], [43.3, 1878.0], [43.4, 1878.0], [43.5, 1886.0], [43.6, 1893.0], [43.7, 1894.0], [43.8, 1910.0], [43.9, 1918.0], [44.0, 1921.0], [44.1, 1926.0], [44.2, 1929.0], [44.3, 1946.0], [44.4, 1993.0], [44.5, 1998.0], [44.6, 1999.0], [44.7, 2001.0], [44.8, 2016.0], [44.9, 2020.0], [45.0, 2071.0], [45.1, 2081.0], [45.2, 2091.0], [45.3, 2092.0], [45.4, 2095.0], [45.5, 2103.0], [45.6, 2108.0], [45.7, 2116.0], [45.8, 2117.0], [45.9, 2179.0], [46.0, 2212.0], [46.1, 2216.0], [46.2, 2233.0], [46.3, 2238.0], [46.4, 2260.0], [46.5, 2289.0], [46.6, 2299.0], [46.7, 2299.0], [46.8, 2301.0], [46.9, 2367.0], [47.0, 2378.0], [47.1, 2436.0], [47.2, 2455.0], [47.3, 2459.0], [47.4, 2504.0], [47.5, 2511.0], [47.6, 2538.0], [47.7, 2544.0], [47.8, 2571.0], [47.9, 2589.0], [48.0, 2591.0], [48.1, 2593.0], [48.2, 2596.0], [48.3, 2601.0], [48.4, 2603.0], [48.5, 2607.0], [48.6, 2607.0], [48.7, 2615.0], [48.8, 2645.0], [48.9, 2646.0], [49.0, 2684.0], [49.1, 2702.0], [49.2, 2705.0], [49.3, 2724.0], [49.4, 2729.0], [49.5, 2734.0], [49.6, 2739.0], [49.7, 2740.0], [49.8, 2746.0], [49.9, 2749.0], [50.0, 2779.0], [50.1, 2780.0], [50.2, 2781.0], [50.3, 2781.0], [50.4, 2788.0], [50.5, 2790.0], [50.6, 2797.0], [50.7, 2799.0], [50.8, 2825.0], [50.9, 2828.0], [51.0, 2828.0], [51.1, 2831.0], [51.2, 2838.0], [51.3, 2840.0], [51.4, 2840.0], [51.5, 2856.0], [51.6, 2867.0], [51.7, 2868.0], [51.8, 2886.0], [51.9, 2891.0], [52.0, 2894.0], [52.1, 2898.0], [52.2, 2909.0], [52.3, 2913.0], [52.4, 2918.0], [52.5, 2923.0], [52.6, 2939.0], [52.7, 2941.0], [52.8, 2948.0], [52.9, 2950.0], [53.0, 2987.0], [53.1, 3012.0], [53.2, 3024.0], [53.3, 3034.0], [53.4, 3035.0], [53.5, 3062.0], [53.6, 3075.0], [53.7, 3086.0], [53.8, 3100.0], [53.9, 3135.0], [54.0, 3144.0], [54.1, 3146.0], [54.2, 3177.0], [54.3, 3178.0], [54.4, 3245.0], [54.5, 3257.0], [54.6, 3374.0], [54.7, 3530.0], [54.8, 3650.0], [54.9, 3761.0], [55.0, 3772.0], [55.1, 3785.0], [55.2, 3859.0], [55.3, 3910.0], [55.4, 3913.0], [55.5, 3919.0], [55.6, 3927.0], [55.7, 3981.0], [55.8, 4026.0], [55.9, 4056.0], [56.0, 4111.0], [56.1, 4112.0], [56.2, 4122.0], [56.3, 4195.0], [56.4, 4206.0], [56.5, 4206.0], [56.6, 4215.0], [56.7, 4239.0], [56.8, 4244.0], [56.9, 4266.0], [57.0, 4315.0], [57.1, 4345.0], [57.2, 4382.0], [57.3, 4410.0], [57.4, 4437.0], [57.5, 4469.0], [57.6, 4515.0], [57.7, 4516.0], [57.8, 4638.0], [57.9, 4793.0], [58.0, 4811.0], [58.1, 4835.0], [58.2, 4852.0], [58.3, 4859.0], [58.4, 4923.0], [58.5, 4968.0], [58.6, 5055.0], [58.7, 5093.0], [58.8, 5148.0], [58.9, 5170.0], [59.0, 5206.0], [59.1, 5254.0], [59.2, 5263.0], [59.3, 5265.0], [59.4, 5317.0], [59.5, 5348.0], [59.6, 5417.0], [59.7, 5469.0], [59.8, 5603.0], [59.9, 5660.0], [60.0, 5666.0], [60.1, 5757.0], [60.2, 5772.0], [60.3, 5850.0], [60.4, 5905.0], [60.5, 5997.0], [60.6, 6032.0], [60.7, 6032.0], [60.8, 6096.0], [60.9, 6102.0], [61.0, 6272.0], [61.1, 6353.0], [61.2, 6393.0], [61.3, 6458.0], [61.4, 6524.0], [61.5, 6535.0], [61.6, 6719.0], [61.7, 6784.0], [61.8, 6809.0], [61.9, 6929.0], [62.0, 6933.0], [62.1, 6985.0], [62.2, 7019.0], [62.3, 7067.0], [62.4, 7068.0], [62.5, 7078.0], [62.6, 7093.0], [62.7, 7094.0], [62.8, 7113.0], [62.9, 7121.0], [63.0, 7122.0], [63.1, 7129.0], [63.2, 7135.0], [63.3, 7136.0], [63.4, 7143.0], [63.5, 7166.0], [63.6, 7168.0], [63.7, 7196.0], [63.8, 7202.0], [63.9, 7261.0], [64.0, 7274.0], [64.1, 7289.0], [64.2, 7332.0], [64.3, 7350.0], [64.4, 7371.0], [64.5, 7373.0], [64.6, 7399.0], [64.7, 7415.0], [64.8, 7425.0], [64.9, 7508.0], [65.0, 7555.0], [65.1, 7637.0], [65.2, 7771.0], [65.3, 7799.0], [65.4, 8005.0], [65.5, 8009.0], [65.6, 8454.0], [65.7, 12831.0], [65.8, 12929.0], [65.9, 12937.0], [66.0, 13014.0], [66.1, 13018.0], [66.2, 13019.0], [66.3, 13139.0], [66.4, 13275.0], [66.5, 13306.0], [66.6, 13332.0], [66.7, 13355.0], [66.8, 13364.0], [66.9, 13371.0], [67.0, 13428.0], [67.1, 13495.0], [67.2, 14147.0], [67.3, 14903.0], [67.4, 14952.0], [67.5, 15270.0], [67.6, 15479.0], [67.7, 15526.0], [67.8, 15576.0], [67.9, 15606.0], [68.0, 15639.0], [68.1, 15680.0], [68.2, 15838.0], [68.3, 15917.0], [68.4, 15954.0], [68.5, 16001.0], [68.6, 16007.0], [68.7, 16007.0], [68.8, 16088.0], [68.9, 16098.0], [69.0, 16177.0], [69.1, 16413.0], [69.2, 16416.0], [69.3, 16687.0], [69.4, 17081.0], [69.5, 17113.0], [69.6, 17116.0], [69.7, 17394.0], [69.8, 17660.0], [69.9, 18143.0], [70.0, 18182.0], [70.1, 18757.0], [70.2, 19074.0], [70.3, 19089.0], [70.4, 19722.0], [70.5, 19738.0], [70.6, 19847.0], [70.7, 19880.0], [70.8, 19908.0], [70.9, 20001.0], [71.0, 20070.0], [71.1, 20129.0], [71.2, 20145.0], [71.3, 20205.0], [71.4, 20484.0], [71.5, 20499.0], [71.6, 20505.0], [71.7, 22339.0], [71.8, 24939.0], [71.9, 29478.0], [72.0, 30107.0], [72.1, 30680.0], [72.2, 30976.0], [72.3, 31267.0], [72.4, 31639.0], [72.5, 31738.0], [72.6, 32351.0], [72.7, 32400.0], [72.8, 32401.0], [72.9, 32494.0], [73.0, 32576.0], [73.1, 32577.0], [73.2, 32577.0], [73.3, 32578.0], [73.4, 32579.0], [73.5, 32680.0], [73.6, 32680.0], [73.7, 32682.0], [73.8, 32683.0], [73.9, 32709.0], [74.0, 32775.0], [74.1, 32906.0], [74.2, 32913.0], [74.3, 32983.0], [74.4, 33070.0], [74.5, 33084.0], [74.6, 33106.0], [74.7, 33213.0], [74.8, 33408.0], [74.9, 33950.0], [75.0, 34355.0], [75.1, 34501.0], [75.2, 34501.0], [75.3, 34501.0], [75.4, 34988.0], [75.5, 35576.0], [75.6, 35719.0], [75.7, 35729.0], [75.8, 35795.0], [75.9, 35894.0], [76.0, 35920.0], [76.1, 36166.0], [76.2, 36173.0], [76.3, 36288.0], [76.4, 36368.0], [76.5, 36371.0], [76.6, 37527.0], [76.7, 38062.0], [76.8, 38074.0], [76.9, 38081.0], [77.0, 38993.0], [77.1, 39042.0], [77.2, 39048.0], [77.3, 39056.0], [77.4, 39078.0], [77.5, 39141.0], [77.6, 39142.0], [77.7, 39155.0], [77.8, 39504.0], [77.9, 39594.0], [78.0, 39824.0], [78.1, 39888.0], [78.2, 40399.0], [78.3, 40453.0], [78.4, 41233.0], [78.5, 41505.0], [78.6, 41795.0], [78.7, 42085.0], [78.8, 42162.0], [78.9, 42192.0], [79.0, 42274.0], [79.1, 42559.0], [79.2, 42610.0], [79.3, 42639.0], [79.4, 42815.0], [79.5, 42957.0], [79.6, 43021.0], [79.7, 43167.0], [79.8, 43194.0], [79.9, 43865.0], [80.0, 44155.0], [80.1, 44199.0], [80.2, 44200.0], [80.3, 44274.0], [80.4, 44659.0], [80.5, 44701.0], [80.6, 45094.0], [80.7, 45169.0], [80.8, 45327.0], [80.9, 45329.0], [81.0, 45471.0], [81.1, 45683.0], [81.2, 45777.0], [81.3, 45895.0], [81.4, 45992.0], [81.5, 46674.0], [81.6, 46680.0], [81.7, 46828.0], [81.8, 46859.0], [81.9, 47107.0], [82.0, 47121.0], [82.1, 47656.0], [82.2, 47873.0], [82.3, 48022.0], [82.4, 48569.0], [82.5, 48870.0], [82.6, 49051.0], [82.7, 49114.0], [82.8, 49241.0], [82.9, 49629.0], [83.0, 49676.0], [83.1, 49966.0], [83.2, 50004.0], [83.3, 50014.0], [83.4, 50132.0], [83.5, 51369.0], [83.6, 51400.0], [83.7, 51660.0], [83.8, 51723.0], [83.9, 51725.0], [84.0, 51874.0], [84.1, 51923.0], [84.2, 51924.0], [84.3, 52182.0], [84.4, 52734.0], [84.5, 52736.0], [84.6, 52739.0], [84.7, 52742.0], [84.8, 53068.0], [84.9, 53158.0], [85.0, 53303.0], [85.1, 53589.0], [85.2, 54761.0], [85.3, 55146.0], [85.4, 55247.0], [85.5, 55457.0], [85.6, 55500.0], [85.7, 55651.0], [85.8, 55655.0], [85.9, 55918.0], [86.0, 57006.0], [86.1, 57075.0], [86.2, 57087.0], [86.3, 57218.0], [86.4, 57270.0], [86.5, 57416.0], [86.6, 57666.0], [86.7, 58217.0], [86.8, 58230.0], [86.9, 58247.0], [87.0, 58249.0], [87.1, 58249.0], [87.2, 58249.0], [87.3, 58252.0], [87.4, 58587.0], [87.5, 59479.0], [87.6, 59730.0], [87.7, 60022.0], [87.8, 60023.0], [87.9, 60023.0], [88.0, 60024.0], [88.1, 60024.0], [88.2, 60024.0], [88.3, 60024.0], [88.4, 60024.0], [88.5, 60024.0], [88.6, 60024.0], [88.7, 60024.0], [88.8, 60024.0], [88.9, 60024.0], [89.0, 60024.0], [89.1, 60024.0], [89.2, 60024.0], [89.3, 60025.0], [89.4, 60025.0], [89.5, 60025.0], [89.6, 60025.0], [89.7, 60025.0], [89.8, 60025.0], [89.9, 60025.0], [90.0, 60025.0], [90.1, 60025.0], [90.2, 60025.0], [90.3, 60025.0], [90.4, 60025.0], [90.5, 60025.0], [90.6, 60025.0], [90.7, 60025.0], [90.8, 60025.0], [90.9, 60025.0], [91.0, 60025.0], [91.1, 60025.0], [91.2, 60025.0], [91.3, 60025.0], [91.4, 60025.0], [91.5, 60025.0], [91.6, 60025.0], [91.7, 60025.0], [91.8, 60025.0], [91.9, 60025.0], [92.0, 60026.0], [92.1, 60026.0], [92.2, 60026.0], [92.3, 60026.0], [92.4, 60026.0], [92.5, 60026.0], [92.6, 60026.0], [92.7, 60026.0], [92.8, 60026.0], [92.9, 60026.0], [93.0, 60026.0], [93.1, 60026.0], [93.2, 60026.0], [93.3, 60026.0], [93.4, 60026.0], [93.5, 60026.0], [93.6, 60026.0], [93.7, 60026.0], [93.8, 60026.0], [93.9, 60026.0], [94.0, 60026.0], [94.1, 60026.0], [94.2, 60026.0], [94.3, 60027.0], [94.4, 60027.0], [94.5, 60027.0], [94.6, 60027.0], [94.7, 60027.0], [94.8, 60027.0], [94.9, 60027.0], [95.0, 60027.0], [95.1, 60027.0], [95.2, 60027.0], [95.3, 60028.0], [95.4, 60028.0], [95.5, 60028.0], [95.6, 60028.0], [95.7, 60028.0], [95.8, 60028.0], [95.9, 60028.0], [96.0, 60028.0], [96.1, 60028.0], [96.2, 60028.0], [96.3, 60028.0], [96.4, 60028.0], [96.5, 60029.0], [96.6, 60029.0], [96.7, 60029.0], [96.8, 60029.0], [96.9, 60029.0], [97.0, 60029.0], [97.1, 60029.0], [97.2, 60029.0], [97.3, 60030.0], [97.4, 60030.0], [97.5, 60032.0], [97.6, 60034.0], [97.7, 60034.0], [97.8, 60034.0], [97.9, 60034.0], [98.0, 60036.0], [98.1, 60037.0], [98.2, 60037.0], [98.3, 60037.0], [98.4, 60038.0], [98.5, 60038.0], [98.6, 60039.0], [98.7, 60039.0], [98.8, 60040.0], [98.9, 60040.0], [99.0, 60040.0], [99.1, 60151.0], [99.2, 60153.0], [99.3, 60153.0], [99.4, 60153.0], [99.5, 60155.0], [99.6, 60156.0], [99.7, 60157.0], [99.8, 60174.0], [99.9, 60181.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 121.0, "series": [{"data": [[32900.0, 3.0], [34500.0, 3.0], [34100.0, 1.0], [36100.0, 2.0], [34900.0, 1.0], [35700.0, 3.0], [38900.0, 1.0], [37300.0, 1.0], [41700.0, 1.0], [42100.0, 2.0], [42500.0, 1.0], [42900.0, 1.0], [44100.0, 2.0], [45700.0, 2.0], [45300.0, 2.0], [48500.0, 1.0], [50100.0, 1.0], [52100.0, 1.0], [51300.0, 1.0], [51700.0, 2.0], [52500.0, 1.0], [53300.0, 1.0], [58500.0, 1.0], [60100.0, 10.0], [59700.0, 1.0], [400.0, 10.0], [500.0, 15.0], [600.0, 18.0], [700.0, 31.0], [800.0, 31.0], [900.0, 37.0], [1000.0, 37.0], [1100.0, 46.0], [1200.0, 51.0], [1300.0, 35.0], [1400.0, 40.0], [1500.0, 33.0], [1600.0, 26.0], [1700.0, 33.0], [1800.0, 22.0], [1900.0, 10.0], [2000.0, 9.0], [2100.0, 5.0], [2200.0, 8.0], [2300.0, 4.0], [2400.0, 3.0], [2500.0, 9.0], [2600.0, 9.0], [2700.0, 18.0], [2800.0, 15.0], [2900.0, 9.0], [3000.0, 8.0], [3100.0, 6.0], [3200.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 5.0], [4000.0, 2.0], [4100.0, 5.0], [4300.0, 3.0], [4200.0, 6.0], [4400.0, 3.0], [4500.0, 2.0], [4600.0, 1.0], [4800.0, 4.0], [4700.0, 2.0], [4900.0, 2.0], [5100.0, 2.0], [5000.0, 2.0], [5200.0, 5.0], [5300.0, 2.0], [5400.0, 2.0], [5600.0, 3.0], [5700.0, 2.0], [5800.0, 1.0], [5900.0, 2.0], [6100.0, 2.0], [6000.0, 3.0], [6200.0, 1.0], [6300.0, 2.0], [6500.0, 2.0], [6400.0, 1.0], [6800.0, 1.0], [6700.0, 2.0], [6900.0, 3.0], [7000.0, 7.0], [7100.0, 10.0], [7200.0, 5.0], [7300.0, 5.0], [7400.0, 2.0], [7600.0, 1.0], [7500.0, 2.0], [7700.0, 2.0], [8000.0, 2.0], [8400.0, 1.0], [11500.0, 1.0], [13200.0, 1.0], [12800.0, 1.0], [12900.0, 2.0], [13000.0, 3.0], [13100.0, 1.0], [13300.0, 5.0], [13400.0, 2.0], [14100.0, 2.0], [14900.0, 2.0], [15200.0, 1.0], [15500.0, 2.0], [15400.0, 1.0], [15600.0, 3.0], [15800.0, 1.0], [15900.0, 2.0], [16100.0, 1.0], [16000.0, 6.0], [16600.0, 1.0], [17000.0, 1.0], [16400.0, 2.0], [17600.0, 1.0], [19000.0, 2.0], [19400.0, 1.0], [19800.0, 2.0], [20000.0, 2.0], [20200.0, 1.0], [20400.0, 2.0], [27400.0, 1.0], [29400.0, 1.0], [30600.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [32400.0, 3.0], [32600.0, 5.0], [33200.0, 1.0], [38000.0, 3.0], [40400.0, 1.0], [40000.0, 1.0], [42000.0, 1.0], [42800.0, 1.0], [41200.0, 1.0], [46800.0, 2.0], [45600.0, 1.0], [48000.0, 1.0], [48800.0, 1.0], [47600.0, 1.0], [49600.0, 3.0], [50000.0, 2.0], [49200.0, 1.0], [51600.0, 1.0], [55200.0, 1.0], [57200.0, 2.0], [55600.0, 2.0], [57600.0, 1.0], [60000.0, 121.0], [33100.0, 1.0], [33900.0, 1.0], [34300.0, 1.0], [35900.0, 1.0], [36300.0, 2.0], [35500.0, 1.0], [37500.0, 1.0], [39100.0, 3.0], [40300.0, 1.0], [39500.0, 2.0], [41500.0, 1.0], [44700.0, 1.0], [43100.0, 2.0], [47100.0, 2.0], [45900.0, 1.0], [45100.0, 1.0], [49100.0, 1.0], [49900.0, 1.0], [53100.0, 1.0], [51900.0, 2.0], [52700.0, 4.0], [53500.0, 1.0], [54700.0, 1.0], [55100.0, 1.0], [55900.0, 2.0], [55500.0, 1.0], [59100.0, 1.0], [17100.0, 2.0], [17300.0, 1.0], [18100.0, 2.0], [18700.0, 1.0], [20100.0, 2.0], [19700.0, 2.0], [19900.0, 1.0], [20500.0, 1.0], [22300.0, 1.0], [24900.0, 1.0], [30100.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [32500.0, 5.0], [32700.0, 2.0], [32300.0, 1.0], [33000.0, 2.0], [33400.0, 1.0], [36200.0, 1.0], [35800.0, 1.0], [39000.0, 4.0], [39800.0, 2.0], [43000.0, 2.0], [42600.0, 2.0], [42200.0, 1.0], [44200.0, 2.0], [44600.0, 1.0], [43800.0, 1.0], [45000.0, 1.0], [45800.0, 1.0], [46600.0, 2.0], [45400.0, 1.0], [47800.0, 1.0], [49000.0, 1.0], [53000.0, 1.0], [51400.0, 1.0], [51800.0, 1.0], [57000.0, 3.0], [55400.0, 1.0], [57400.0, 1.0], [58200.0, 7.0], [59400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 448.0, "series": [{"data": [[0.0, 10.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 342.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 448.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 264.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 39.88157894736843, "minX": 1.701260039E12, "maxY": 100.0, "series": [{"data": [[1.701260111E12, 100.0], [1.701260152E12, 100.0], [1.701260066E12, 100.0], [1.701260107E12, 100.0], [1.70126016E12, 100.0], [1.701260074E12, 100.0], [1.701260201E12, 100.0], [1.70126007E12, 100.0], [1.701260144E12, 100.0], [1.701260058E12, 100.0], [1.701260185E12, 100.0], [1.70126014E12, 100.0], [1.701260054E12, 100.0], [1.701260062E12, 100.0], [1.701260189E12, 100.0], [1.701260103E12, 100.0], [1.701260218E12, 100.0], [1.701260132E12, 100.0], [1.701260046E12, 100.0], [1.701260173E12, 100.0], [1.701260087E12, 100.0], [1.701260214E12, 100.0], [1.701260181E12, 100.0], [1.701260222E12, 87.4375], [1.701260136E12, 100.0], [1.70126005E12, 100.0], [1.701260177E12, 100.0], [1.701260165E12, 100.0], [1.701260079E12, 100.0], [1.701260206E12, 100.0], [1.70126012E12, 100.0], [1.701260161E12, 100.0], [1.701260075E12, 100.0], [1.701260128E12, 100.0], [1.701260042E12, 100.0], [1.701260083E12, 100.0], [1.70126021E12, 100.0], [1.701260124E12, 100.0], [1.701260069E12, 100.0], [1.70126011E12, 100.0], [1.701260151E12, 100.0], [1.701260065E12, 100.0], [1.701260159E12, 100.0], [1.701260073E12, 100.0], [1.7012602E12, 100.0], [1.701260155E12, 100.0], [1.701260143E12, 100.0], [1.701260057E12, 100.0], [1.701260184E12, 100.0], [1.701260139E12, 100.0], [1.701260192E12, 100.0], [1.701260106E12, 100.0], [1.701260061E12, 100.0], [1.701260188E12, 100.0], [1.701260176E12, 100.0], [1.701260217E12, 100.0], [1.701260131E12, 100.0], [1.701260045E12, 100.0], [1.701260172E12, 100.0], [1.701260086E12, 100.0], [1.701260053E12, 100.0], [1.70126018E12, 100.0], [1.701260221E12, 96.0], [1.701260135E12, 100.0], [1.701260049E12, 100.0], [1.701260164E12, 100.0], [1.701260205E12, 100.0], [1.701260119E12, 100.0], [1.701260213E12, 100.0], [1.701260041E12, 100.0], [1.701260168E12, 100.0], [1.701260082E12, 100.0], [1.701260209E12, 100.0], [1.701260123E12, 100.0], [1.701260154E12, 100.0], [1.701260068E12, 100.0], [1.701260195E12, 100.0], [1.701260109E12, 100.0], [1.70126015E12, 100.0], [1.701260117E12, 100.0], [1.701260158E12, 100.0], [1.701260072E12, 100.0], [1.701260199E12, 100.0], [1.701260142E12, 100.0], [1.701260056E12, 100.0], [1.701260183E12, 100.0], [1.701260064E12, 100.0], [1.701260191E12, 100.0], [1.701260105E12, 100.0], [1.701260146E12, 100.0], [1.70126006E12, 100.0], [1.701260187E12, 100.0], [1.701260048E12, 100.0], [1.701260175E12, 100.0], [1.701260216E12, 100.0], [1.70126013E12, 100.0], [1.701260044E12, 100.0], [1.701260171E12, 100.0], [1.701260138E12, 100.0], [1.701260052E12, 100.0], [1.701260179E12, 100.0], [1.70126022E12, 99.5], [1.701260134E12, 100.0], [1.701260208E12, 100.0], [1.701260122E12, 100.0], [1.701260163E12, 100.0], [1.701260077E12, 100.0], [1.701260204E12, 100.0], [1.701260118E12, 100.0], [1.701260085E12, 100.0], [1.701260212E12, 100.0], [1.701260126E12, 100.0], [1.701260167E12, 100.0], [1.701260081E12, 100.0], [1.701260112E12, 100.0], [1.701260153E12, 100.0], [1.701260067E12, 100.0], [1.701260108E12, 100.0], [1.701260202E12, 100.0], [1.701260116E12, 100.0], [1.701260157E12, 100.0], [1.701260071E12, 100.0], [1.701260198E12, 100.0], [1.701260186E12, 100.0], [1.701260141E12, 100.0], [1.701260055E12, 100.0], [1.701260182E12, 100.0], [1.701260149E12, 100.0], [1.701260063E12, 100.0], [1.701260104E12, 100.0], [1.701260145E12, 100.0], [1.701260059E12, 100.0], [1.701260133E12, 100.0], [1.701260047E12, 100.0], [1.701260174E12, 100.0], [1.701260215E12, 100.0], [1.701260129E12, 100.0], [1.701260043E12, 100.0], [1.701260223E12, 39.88157894736843], [1.701260137E12, 100.0], [1.701260051E12, 100.0], [1.701260178E12, 100.0], [1.701260219E12, 100.0], [1.701260207E12, 100.0], [1.701260121E12, 100.0], [1.701260162E12, 100.0], [1.701260076E12, 100.0], [1.701260203E12, 100.0], [1.70126017E12, 100.0], [1.701260084E12, 100.0], [1.701260211E12, 100.0], [1.701260125E12, 100.0], [1.701260039E12, 100.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.701260223E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3785.0, "minX": 2.0, "maxY": 60027.0, "series": [{"data": [[2.0, 49966.0], [4.0, 53939.0], [5.0, 55457.0], [6.0, 51725.0], [7.0, 49241.0], [9.0, 49772.0], [10.0, 34355.0], [12.0, 52554.0], [13.0, 17288.0], [15.0, 45327.0], [16.0, 43167.0], [17.0, 52742.0], [18.0, 51723.0], [19.0, 24803.0], [20.0, 51874.0], [21.0, 57666.0], [23.0, 46911.5], [24.0, 52736.0], [25.0, 4835.0], [26.0, 5660.0], [28.0, 37527.0], [29.0, 50628.5], [30.0, 58587.0], [31.0, 51400.0], [33.0, 43737.0], [35.0, 44901.0], [37.0, 52834.5], [39.0, 36371.0], [38.0, 47656.0], [41.0, 46859.0], [43.0, 6353.0], [42.0, 41699.0], [45.0, 35729.0], [44.0, 46680.0], [47.0, 45683.0], [46.0, 36368.0], [49.0, 58252.0], [48.0, 58249.0], [51.0, 49051.0], [50.0, 48870.0], [52.0, 38062.0], [54.0, 51371.5], [57.0, 56748.0], [56.0, 46828.0], [61.0, 55146.0], [60.0, 22232.666666666664], [63.0, 45094.0], [67.0, 51923.0], [66.0, 3785.0], [65.0, 57260.666666666664], [71.0, 52734.0], [70.0, 55918.0], [69.0, 51369.0], [68.0, 58230.0], [75.0, 35719.0], [74.0, 38485.0], [72.0, 54761.0], [77.0, 42998.5], [87.0, 60026.0], [86.0, 60025.0], [85.0, 50911.125], [91.0, 34580.333333333336], [88.0, 59730.0], [95.0, 6933.0], [93.0, 60027.0], [92.0, 7135.0], [99.0, 7289.0], [97.0, 7261.0], [96.0, 7168.0], [100.0, 14220.39152892561]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[95.50469924812036, 16818.522556390966]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.701260039E12, "maxY": 2389545.0, "series": [{"data": [[1.701260111E12, 597880.0], [1.701260152E12, 1194781.0], [1.701260066E12, 1642822.0], [1.701260107E12, 149329.0], [1.70126016E12, 448063.0], [1.701260074E12, 1194762.0], [1.701260201E12, 298708.0], [1.70126007E12, 1493444.0], [1.701260144E12, 896083.0], [1.701260058E12, 1493499.0], [1.701260185E12, 157372.0], [1.70126014E12, 1493445.0], [1.701260054E12, 1493469.0], [1.701260062E12, 1493424.0], [1.701260189E12, 149329.0], [1.701260103E12, 37506.0], [1.701260218E12, 896087.0], [1.701260132E12, 1493445.0], [1.701260046E12, 1045455.0], [1.701260173E12, 1344098.0], [1.701260087E12, 149356.0], [1.701260214E12, 597423.0], [1.701260181E12, 746739.0], [1.701260222E12, 308032.0], [1.701260136E12, 752099.0], [1.70126005E12, 1493506.0], [1.701260177E12, 909477.0], [1.701260165E12, 312096.0], [1.701260079E12, 149340.0], [1.701260206E12, 754731.0], [1.70126012E12, 298695.0], [1.701260161E12, 746709.0], [1.701260075E12, 1792152.0], [1.701260128E12, 746756.0], [1.701260042E12, 298692.0], [1.701260083E12, 746736.0], [1.70126021E12, 448018.0], [1.701260124E12, 896059.0], [1.701260069E12, 1642816.0], [1.70126011E12, 149342.0], [1.701260151E12, 896060.0], [1.701260065E12, 1642769.0], [1.701260159E12, 149355.0], [1.701260073E12, 1344062.0], [1.7012602E12, 1346785.0], [1.701260155E12, 746719.0], [1.701260143E12, 1194739.0], [1.701260057E12, 1792166.0], [1.701260184E12, 304060.0], [1.701260139E12, 448031.0], [1.701260192E12, 298709.0], [1.701260106E12, 448042.0], [1.701260061E12, 1344119.0], [1.701260188E12, 597401.0], [1.701260176E12, 450698.0], [1.701260217E12, 896097.0], [1.701260131E12, 1197437.0], [1.701260045E12, 1792229.0], [1.701260172E12, 8037.0], [1.701260086E12, 896074.0], [1.701260053E12, 1344113.0], [1.70126018E12, 1048081.0], [1.701260221E12, 448027.0], [1.701260135E12, 610801.0], [1.701260049E12, 448050.0], [1.701260164E12, 485565.0], [1.701260205E12, 749427.0], [1.701260119E12, 1045424.0], [1.701260213E12, 896049.0], [1.701260041E12, 597388.0], [1.701260168E12, 749417.0], [1.701260082E12, 1642828.0], [1.701260209E12, 746732.0], [1.701260123E12, 298691.0], [1.701260154E12, 746729.0], [1.701260068E12, 1642791.0], [1.701260195E12, 149328.0], [1.701260109E12, 597438.0], [1.70126015E12, 149341.0], [1.701260117E12, 1642767.0], [1.701260158E12, 298675.0], [1.701260072E12, 1792181.0], [1.701260199E12, 298689.0], [1.701260142E12, 1658860.0], [1.701260056E12, 1642810.0], [1.701260183E12, 448016.0], [1.701260064E12, 1194758.0], [1.701260191E12, 149352.0], [1.701260105E12, 18753.0], [1.701260146E12, 304870.0], [1.70126006E12, 1792123.0], [1.701260187E12, 448522.0], [1.701260048E12, 597370.0], [1.701260175E12, 746712.0], [1.701260216E12, 597392.0], [1.70126013E12, 149353.0], [1.701260044E12, 298682.0], [1.701260171E12, 1509585.0], [1.701260138E12, 597362.0], [1.701260052E12, 1194826.0], [1.701260179E12, 450703.0], [1.70126022E12, 298705.0], [1.701260134E12, 746735.0], [1.701260208E12, 896056.0], [1.701260122E12, 597390.0], [1.701260163E12, 597437.0], [1.701260077E12, 1416.0], [1.701260204E12, 597392.0], [1.701260118E12, 1194754.0], [1.701260085E12, 1045396.0], [1.701260212E12, 298670.0], [1.701260126E12, 149342.0], [1.701260167E12, 2389545.0], [1.701260081E12, 597377.0], [1.701260112E12, 472.0], [1.701260153E12, 597406.0], [1.701260067E12, 1642807.0], [1.701260108E12, 1194779.0], [1.701260202E12, 746776.0], [1.701260116E12, 2679.0], [1.701260157E12, 298700.0], [1.701260071E12, 1642812.0], [1.701260198E12, 149381.0], [1.701260186E12, 150062.0], [1.701260141E12, 301343.0], [1.701260055E12, 1493426.0], [1.701260182E12, 600068.0], [1.701260149E12, 597389.0], [1.701260063E12, 1642776.0], [1.701260104E12, 83049.0], [1.701260145E12, 746777.0], [1.701260059E12, 1493406.0], [1.701260133E12, 597371.0], [1.701260047E12, 448055.0], [1.701260174E12, 597378.0], [1.701260215E12, 448048.0], [1.701260129E12, 1941570.0], [1.701260043E12, 448040.0], [1.701260223E12, 202844.0], [1.701260137E12, 1061481.0], [1.701260051E12, 1194804.0], [1.701260178E12, 8037.0], [1.701260219E12, 597362.0], [1.701260207E12, 448022.0], [1.701260121E12, 1045388.0], [1.701260162E12, 746727.0], [1.701260076E12, 1062.0], [1.701260203E12, 450711.0], [1.70126017E12, 1493451.0], [1.701260084E12, 1194783.0], [1.701260211E12, 597403.0], [1.701260125E12, 597389.0], [1.701260039E12, 149340.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.701260111E12, 1112.0], [1.701260152E12, 1112.0], [1.701260066E12, 1529.0], [1.701260107E12, 139.0], [1.70126016E12, 417.0], [1.701260074E12, 1112.0], [1.701260201E12, 278.0], [1.70126007E12, 1390.0], [1.701260144E12, 834.0], [1.701260058E12, 1390.0], [1.701260185E12, 139.0], [1.70126014E12, 1390.0], [1.701260054E12, 1390.0], [1.701260062E12, 1390.0], [1.701260189E12, 139.0], [1.701260103E12, 0.0], [1.701260218E12, 834.0], [1.701260132E12, 1390.0], [1.701260046E12, 973.0], [1.701260173E12, 1251.0], [1.701260087E12, 139.0], [1.701260214E12, 556.0], [1.701260181E12, 695.0], [1.701260222E12, 1807.0], [1.701260136E12, 695.0], [1.70126005E12, 1390.0], [1.701260177E12, 834.0], [1.701260165E12, 278.0], [1.701260079E12, 139.0], [1.701260206E12, 695.0], [1.70126012E12, 278.0], [1.701260161E12, 695.0], [1.701260075E12, 1668.0], [1.701260128E12, 695.0], [1.701260042E12, 278.0], [1.701260083E12, 695.0], [1.70126021E12, 417.0], [1.701260124E12, 834.0], [1.701260069E12, 1529.0], [1.70126011E12, 139.0], [1.701260151E12, 834.0], [1.701260065E12, 1529.0], [1.701260159E12, 139.0], [1.701260073E12, 1251.0], [1.7012602E12, 1251.0], [1.701260155E12, 695.0], [1.701260143E12, 1112.0], [1.701260057E12, 1668.0], [1.701260184E12, 278.0], [1.701260139E12, 417.0], [1.701260192E12, 278.0], [1.701260106E12, 417.0], [1.701260061E12, 1251.0], [1.701260188E12, 556.0], [1.701260176E12, 417.0], [1.701260217E12, 834.0], [1.701260131E12, 1112.0], [1.701260045E12, 1668.0], [1.701260172E12, 0.0], [1.701260086E12, 834.0], [1.701260053E12, 1251.0], [1.70126018E12, 973.0], [1.701260221E12, 417.0], [1.701260135E12, 556.0], [1.701260049E12, 417.0], [1.701260164E12, 417.0], [1.701260205E12, 695.0], [1.701260119E12, 973.0], [1.701260213E12, 834.0], [1.701260041E12, 556.0], [1.701260168E12, 695.0], [1.701260082E12, 1529.0], [1.701260209E12, 695.0], [1.701260123E12, 278.0], [1.701260154E12, 695.0], [1.701260068E12, 1529.0], [1.701260195E12, 139.0], [1.701260109E12, 556.0], [1.70126015E12, 139.0], [1.701260117E12, 1529.0], [1.701260158E12, 278.0], [1.701260072E12, 1668.0], [1.701260199E12, 278.0], [1.701260142E12, 1529.0], [1.701260056E12, 1529.0], [1.701260183E12, 417.0], [1.701260064E12, 1112.0], [1.701260191E12, 139.0], [1.701260105E12, 0.0], [1.701260146E12, 1251.0], [1.70126006E12, 1668.0], [1.701260187E12, 973.0], [1.701260048E12, 556.0], [1.701260175E12, 695.0], [1.701260216E12, 556.0], [1.70126013E12, 139.0], [1.701260044E12, 278.0], [1.701260171E12, 1390.0], [1.701260138E12, 556.0], [1.701260052E12, 1112.0], [1.701260179E12, 417.0], [1.70126022E12, 278.0], [1.701260134E12, 695.0], [1.701260208E12, 834.0], [1.701260122E12, 556.0], [1.701260163E12, 556.0], [1.701260077E12, 1668.0], [1.701260204E12, 556.0], [1.701260118E12, 1112.0], [1.701260085E12, 973.0], [1.701260212E12, 278.0], [1.701260126E12, 139.0], [1.701260167E12, 2224.0], [1.701260081E12, 556.0], [1.701260112E12, 556.0], [1.701260153E12, 556.0], [1.701260067E12, 1529.0], [1.701260108E12, 1112.0], [1.701260202E12, 695.0], [1.701260116E12, 0.0], [1.701260157E12, 278.0], [1.701260071E12, 1529.0], [1.701260198E12, 139.0], [1.701260186E12, 973.0], [1.701260141E12, 278.0], [1.701260055E12, 1390.0], [1.701260182E12, 556.0], [1.701260149E12, 556.0], [1.701260063E12, 1529.0], [1.701260104E12, 0.0], [1.701260145E12, 695.0], [1.701260059E12, 1390.0], [1.701260133E12, 556.0], [1.701260047E12, 417.0], [1.701260174E12, 556.0], [1.701260215E12, 417.0], [1.701260129E12, 1807.0], [1.701260043E12, 417.0], [1.701260223E12, 0.0], [1.701260137E12, 973.0], [1.701260051E12, 1112.0], [1.701260178E12, 0.0], [1.701260219E12, 556.0], [1.701260207E12, 417.0], [1.701260121E12, 973.0], [1.701260162E12, 695.0], [1.701260076E12, 1251.0], [1.701260203E12, 417.0], [1.70126017E12, 1390.0], [1.701260084E12, 1112.0], [1.701260211E12, 556.0], [1.701260125E12, 556.0], [1.701260039E12, 139.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.701260223E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 482.0, "minX": 1.701260039E12, "maxY": 60077.666666666664, "series": [{"data": [[1.701260111E12, 18640.125], [1.701260152E12, 5025.125], [1.701260066E12, 1240.7272727272727], [1.701260107E12, 647.0], [1.70126016E12, 13030.333333333334], [1.701260074E12, 1555.25], [1.701260201E12, 3592.5], [1.70126007E12, 1244.3000000000002], [1.701260144E12, 3730.5], [1.701260058E12, 1071.7], [1.701260185E12, 45229.5], [1.70126014E12, 3085.3], [1.701260054E12, 1362.6999999999998], [1.701260062E12, 1304.2], [1.701260189E12, 482.0], [1.701260103E12, 60031.85714285715], [1.701260218E12, 4994.833333333333], [1.701260132E12, 2544.0], [1.701260046E12, 3186.285714285714], [1.701260173E12, 2619.8888888888887], [1.701260087E12, 869.0], [1.701260214E12, 2311.75], [1.701260181E12, 1351.0], [1.701260222E12, 47373.31249999999], [1.701260136E12, 20570.428571428572], [1.70126005E12, 3141.0], [1.701260177E12, 40662.63636363637], [1.701260165E12, 45983.57142857143], [1.701260079E12, 3530.0], [1.701260206E12, 24206.500000000004], [1.70126012E12, 1885.5], [1.701260161E12, 12193.8], [1.701260075E12, 1197.4166666666665], [1.701260128E12, 33150.6], [1.701260042E12, 790.5], [1.701260083E12, 31878.4], [1.70126021E12, 3070.6666666666665], [1.701260124E12, 1475.3333333333335], [1.701260069E12, 1170.090909090909], [1.70126011E12, 3245.0], [1.701260151E12, 21150.166666666668], [1.701260065E12, 1384.0909090909092], [1.701260159E12, 617.0], [1.701260073E12, 1073.4444444444443], [1.7012602E12, 20076.5], [1.701260155E12, 4187.8], [1.701260143E12, 3822.7500000000005], [1.701260057E12, 1181.5833333333335], [1.701260184E12, 30347.750000000004], [1.701260139E12, 3679.333333333333], [1.701260192E12, 15558.0], [1.701260106E12, 2970.0], [1.701260061E12, 1179.0], [1.701260188E12, 787.0], [1.701260176E12, 15668.25], [1.701260217E12, 4019.1666666666665], [1.701260131E12, 8705.888888888889], [1.701260045E12, 3961.833333333333], [1.701260172E12, 60077.666666666664], [1.701260086E12, 1107.6666666666665], [1.701260053E12, 1474.888888888889], [1.70126018E12, 11594.75], [1.701260221E12, 7120.666666666667], [1.701260135E12, 33897.0], [1.701260049E12, 3607.666666666667], [1.701260164E12, 50728.588235294126], [1.701260205E12, 12811.666666666666], [1.701260119E12, 1806.2857142857142], [1.701260213E12, 4941.666666666666], [1.701260041E12, 1152.75], [1.701260168E12, 18784.333333333332], [1.701260082E12, 26505.090909090908], [1.701260209E12, 2413.6], [1.701260123E12, 1955.5], [1.701260154E12, 7097.0], [1.701260068E12, 1278.181818181818], [1.701260195E12, 30976.0], [1.701260109E12, 2460.0], [1.70126015E12, 4244.0], [1.701260117E12, 11237.454545454544], [1.701260158E12, 562.0], [1.701260072E12, 983.0833333333334], [1.701260199E12, 27096.0], [1.701260142E12, 23653.29411764706], [1.701260056E12, 1188.9090909090908], [1.701260183E12, 616.6666666666666], [1.701260064E12, 3585.125], [1.701260191E12, 29478.0], [1.701260105E12, 60025.71428571429], [1.701260146E12, 36833.090909090904], [1.70126006E12, 1016.9166666666669], [1.701260187E12, 28076.0], [1.701260048E12, 2360.5], [1.701260175E12, 1537.4], [1.701260216E12, 4100.75], [1.70126013E12, 2702.0], [1.701260044E12, 2521.0], [1.701260171E12, 28397.937500000004], [1.701260138E12, 3924.0], [1.701260052E12, 1735.25], [1.701260179E12, 16628.5], [1.70126022E12, 7205.5], [1.701260134E12, 1448.4], [1.701260208E12, 3612.6666666666665], [1.701260122E12, 1163.0], [1.701260163E12, 15156.25], [1.701260077E12, 32723.666666666664], [1.701260204E12, 2989.75], [1.701260118E12, 10235.5], [1.701260085E12, 1117.7142857142858], [1.701260212E12, 7111.0], [1.701260126E12, 915.0], [1.701260167E12, 10713.937500000002], [1.701260081E12, 22049.75], [1.701260112E12, 35389.75], [1.701260153E12, 4127.25], [1.701260067E12, 1048.181818181818], [1.701260108E12, 4215.875], [1.701260202E12, 1493.6], [1.701260116E12, 60025.0], [1.701260157E12, 8804.5], [1.701260071E12, 1329.7272727272727], [1.701260198E12, 27431.0], [1.701260186E12, 39862.57142857143], [1.701260141E12, 21542.666666666668], [1.701260055E12, 1493.9999999999998], [1.701260182E12, 12853.0], [1.701260149E12, 40041.25], [1.701260063E12, 1177.4545454545453], [1.701260104E12, 60029.87096774195], [1.701260145E12, 2851.2], [1.701260059E12, 1052.8000000000002], [1.701260133E12, 1505.25], [1.701260047E12, 3027.0], [1.701260174E12, 2385.25], [1.701260215E12, 5017.0], [1.701260129E12, 48035.38461538461], [1.701260043E12, 1745.0], [1.701260223E12, 43986.118421052626], [1.701260137E12, 29454.615384615383], [1.701260051E12, 1551.5], [1.701260178E12, 60025.666666666664], [1.701260219E12, 2349.25], [1.701260207E12, 1376.6666666666667], [1.701260121E12, 1636.4285714285713], [1.701260162E12, 12329.8], [1.701260076E12, 32680.000000000004], [1.701260203E12, 15694.25], [1.70126017E12, 5565.8], [1.701260084E12, 1358.25], [1.701260211E12, 4036.0], [1.701260125E12, 1180.5], [1.701260039E12, 528.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.701260223E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.701260039E12, "maxY": 47960.769230769234, "series": [{"data": [[1.701260111E12, 18499.25], [1.701260152E12, 4956.0], [1.701260066E12, 1175.6363636363635], [1.701260107E12, 579.0], [1.70126016E12, 12742.0], [1.701260074E12, 1265.125], [1.701260201E12, 3528.0], [1.70126007E12, 1172.8], [1.701260144E12, 3666.1666666666665], [1.701260058E12, 1003.1999999999999], [1.701260185E12, 141.25], [1.70126014E12, 3015.4], [1.701260054E12, 1293.6999999999998], [1.701260062E12, 1049.7999999999997], [1.701260189E12, 414.0], [1.701260103E12, 0.0], [1.701260218E12, 4925.0], [1.701260132E12, 2475.7], [1.701260046E12, 3117.1428571428573], [1.701260173E12, 2360.222222222222], [1.701260087E12, 687.0], [1.701260214E12, 2240.0], [1.701260181E12, 1283.4], [1.701260222E12, 36083.8125], [1.701260136E12, 3206.0], [1.70126005E12, 2913.9], [1.701260177E12, 13341.545454545456], [1.701260165E12, 3089.857142857143], [1.701260079E12, 3464.0], [1.701260206E12, 1652.25], [1.70126012E12, 1820.0], [1.701260161E12, 11988.8], [1.701260075E12, 987.3333333333333], [1.701260128E12, 33079.6], [1.701260042E12, 724.5], [1.701260083E12, 31804.2], [1.70126021E12, 2800.3333333333335], [1.701260124E12, 1217.3333333333335], [1.701260069E12, 1102.3636363636363], [1.70126011E12, 3143.0], [1.701260151E12, 21079.0], [1.701260065E12, 1316.2727272727273], [1.701260159E12, 554.0], [1.701260073E12, 920.0], [1.7012602E12, 13997.3], [1.701260155E12, 4122.8], [1.701260143E12, 3754.6249999999995], [1.701260057E12, 1115.5], [1.701260184E12, 230.75], [1.701260139E12, 3612.666666666667], [1.701260192E12, 15321.5], [1.701260106E12, 2902.6666666666665], [1.701260061E12, 970.8888888888889], [1.701260188E12, 721.75], [1.701260176E12, 610.5], [1.701260217E12, 3950.8333333333335], [1.701260131E12, 1976.888888888889], [1.701260045E12, 3890.1666666666665], [1.701260172E12, 0.0], [1.701260086E12, 857.8333333333333], [1.701260053E12, 1409.2222222222222], [1.70126018E12, 4035.25], [1.701260221E12, 7053.666666666667], [1.701260135E12, 463.3333333333333], [1.701260049E12, 3446.0], [1.701260164E12, 1283.1176470588234], [1.701260205E12, 2753.6666666666665], [1.701260119E12, 1737.7142857142858], [1.701260213E12, 4866.666666666667], [1.701260041E12, 1082.5], [1.701260168E12, 8723.5], [1.701260082E12, 26429.909090909092], [1.701260209E12, 2297.6], [1.701260123E12, 1681.0], [1.701260154E12, 7021.6], [1.701260068E12, 1204.7272727272725], [1.701260195E12, 30913.0], [1.701260109E12, 2394.75], [1.70126015E12, 4160.0], [1.701260117E12, 11167.636363636362], [1.701260158E12, 495.5], [1.701260072E12, 917.5833333333334], [1.701260199E12, 26951.5], [1.701260142E12, 2424.9999999999995], [1.701260056E12, 1122.3636363636365], [1.701260183E12, 551.0], [1.701260064E12, 3519.75], [1.701260191E12, 28780.0], [1.701260105E12, 0.0], [1.701260146E12, 25907.81818181818], [1.70126006E12, 950.25], [1.701260187E12, 28045.85714285714], [1.701260048E12, 2295.75], [1.701260175E12, 1468.2], [1.701260216E12, 4032.5], [1.70126013E12, 2633.0], [1.701260044E12, 2433.0], [1.701260171E12, 5809.0], [1.701260138E12, 3854.75], [1.701260052E12, 1661.125], [1.701260179E12, 1571.75], [1.70126022E12, 7135.5], [1.701260134E12, 1381.6], [1.701260208E12, 3545.5], [1.701260122E12, 1093.0], [1.701260163E12, 15091.0], [1.701260077E12, 32723.666666666664], [1.701260204E12, 2924.25], [1.701260118E12, 10164.0], [1.701260085E12, 1052.2857142857142], [1.701260212E12, 7045.5], [1.701260126E12, 851.0], [1.701260167E12, 10640.999999999998], [1.701260081E12, 21984.0], [1.701260112E12, 35389.75], [1.701260153E12, 3895.0], [1.701260067E12, 982.7272727272726], [1.701260108E12, 4144.5], [1.701260202E12, 1427.2], [1.701260116E12, 0.0], [1.701260157E12, 8736.0], [1.701260071E12, 1263.9999999999998], [1.701260198E12, 27228.0], [1.701260186E12, 39833.57142857143], [1.701260141E12, 1489.6666666666665], [1.701260055E12, 1427.3], [1.701260182E12, 770.2], [1.701260149E12, 39776.25], [1.701260063E12, 1003.8181818181818], [1.701260104E12, 0.0], [1.701260145E12, 2787.2], [1.701260059E12, 987.7], [1.701260133E12, 1438.5], [1.701260047E12, 2950.6666666666665], [1.701260174E12, 2155.25], [1.701260215E12, 4947.666666666667], [1.701260129E12, 47960.769230769234], [1.701260043E12, 1676.3333333333333], [1.701260223E12, 0.0], [1.701260137E12, 1651.0769230769233], [1.701260051E12, 1447.75], [1.701260178E12, 0.0], [1.701260219E12, 2281.0], [1.701260207E12, 1311.3333333333333], [1.701260121E12, 1448.857142857143], [1.701260162E12, 12212.4], [1.701260076E12, 32680.000000000004], [1.701260203E12, 637.75], [1.70126017E12, 5493.5], [1.701260084E12, 1293.125], [1.701260211E12, 3794.5], [1.701260125E12, 1115.5], [1.701260039E12, 469.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.701260223E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 22.666666666666668, "minX": 1.701260039E12, "maxY": 154.0, "series": [{"data": [[1.701260111E12, 24.75], [1.701260152E12, 38.25], [1.701260066E12, 23.81818181818182], [1.701260107E12, 24.0], [1.70126016E12, 24.0], [1.701260074E12, 44.25], [1.701260201E12, 24.5], [1.70126007E12, 24.7], [1.701260144E12, 39.333333333333336], [1.701260058E12, 24.400000000000002], [1.701260185E12, 22.75], [1.70126014E12, 41.8], [1.701260054E12, 23.2], [1.701260062E12, 42.400000000000006], [1.701260189E12, 25.0], [1.701260103E12, 30.857142857142858], [1.701260218E12, 67.0], [1.701260132E12, 25.0], [1.701260046E12, 25.0], [1.701260173E12, 23.77777777777778], [1.701260087E12, 150.0], [1.701260214E12, 23.0], [1.701260181E12, 24.0], [1.701260222E12, 23.9375], [1.701260136E12, 24.142857142857142], [1.70126005E12, 38.199999999999996], [1.701260177E12, 23.545454545454547], [1.701260165E12, 23.571428571428573], [1.701260079E12, 153.0], [1.701260206E12, 23.125], [1.70126012E12, 23.0], [1.701260161E12, 54.2], [1.701260075E12, 85.25], [1.701260128E12, 26.6], [1.701260042E12, 27.0], [1.701260083E12, 27.0], [1.70126021E12, 22.666666666666668], [1.701260124E12, 23.666666666666668], [1.701260069E12, 23.454545454545453], [1.70126011E12, 25.0], [1.701260151E12, 23.5], [1.701260065E12, 24.454545454545453], [1.701260159E12, 24.0], [1.701260073E12, 23.88888888888889], [1.7012602E12, 70.4], [1.701260155E12, 23.6], [1.701260143E12, 44.125], [1.701260057E12, 23.583333333333332], [1.701260184E12, 89.75], [1.701260139E12, 65.33333333333333], [1.701260192E12, 89.0], [1.701260106E12, 27.333333333333332], [1.701260061E12, 23.88888888888889], [1.701260188E12, 24.25], [1.701260176E12, 24.25], [1.701260217E12, 97.33333333333333], [1.701260131E12, 24.444444444444443], [1.701260045E12, 25.333333333333332], [1.701260172E12, 76.33333333333333], [1.701260086E12, 50.166666666666664], [1.701260053E12, 23.88888888888889], [1.70126018E12, 38.875], [1.701260221E12, 23.0], [1.701260135E12, 53.33333333333334], [1.701260049E12, 28.0], [1.701260164E12, 25.470588235294116], [1.701260205E12, 25.5], [1.701260119E12, 24.285714285714285], [1.701260213E12, 24.0], [1.701260041E12, 32.0], [1.701260168E12, 23.833333333333332], [1.701260082E12, 26.90909090909091], [1.701260209E12, 24.4], [1.701260123E12, 113.5], [1.701260154E12, 23.4], [1.701260068E12, 23.818181818181817], [1.701260195E12, 23.0], [1.701260109E12, 25.5], [1.70126015E12, 23.0], [1.701260117E12, 52.36363636363637], [1.701260158E12, 23.5], [1.701260072E12, 23.666666666666668], [1.701260199E12, 90.0], [1.701260142E12, 34.705882352941174], [1.701260056E12, 24.27272727272727], [1.701260183E12, 24.0], [1.701260064E12, 81.375], [1.701260191E12, 154.0], [1.701260105E12, 24.285714285714285], [1.701260146E12, 23.72727272727273], [1.70126006E12, 24.333333333333336], [1.701260187E12, 79.14285714285714], [1.701260048E12, 24.0], [1.701260175E12, 79.4], [1.701260216E12, 24.0], [1.70126013E12, 28.0], [1.701260044E12, 25.5], [1.701260171E12, 58.75], [1.701260138E12, 26.25], [1.701260052E12, 90.0], [1.701260179E12, 25.5], [1.70126022E12, 24.0], [1.701260134E12, 24.0], [1.701260208E12, 23.166666666666664], [1.701260122E12, 26.5], [1.701260163E12, 23.25], [1.701260077E12, 26.916666666666668], [1.701260204E12, 23.75], [1.701260118E12, 25.0], [1.701260085E12, 23.999999999999996], [1.701260212E12, 24.0], [1.701260126E12, 24.0], [1.701260167E12, 24.0], [1.701260081E12, 61.0], [1.701260112E12, 23.0], [1.701260153E12, 22.75], [1.701260067E12, 23.27272727272727], [1.701260108E12, 24.624999999999996], [1.701260202E12, 25.6], [1.701260116E12, 24.0], [1.701260157E12, 23.0], [1.701260071E12, 24.09090909090909], [1.701260198E12, 26.0], [1.701260186E12, 46.42857142857143], [1.701260141E12, 25.0], [1.701260055E12, 23.9], [1.701260182E12, 50.4], [1.701260149E12, 23.0], [1.701260063E12, 94.36363636363637], [1.701260104E12, 27.19354838709678], [1.701260145E12, 49.8], [1.701260059E12, 24.2], [1.701260133E12, 23.75], [1.701260047E12, 24.666666666666668], [1.701260174E12, 56.5], [1.701260215E12, 23.333333333333332], [1.701260129E12, 45.61538461538462], [1.701260043E12, 23.666666666666668], [1.701260223E12, 41.776315789473706], [1.701260137E12, 63.61538461538462], [1.701260051E12, 124.74999999999999], [1.701260178E12, 23.666666666666668], [1.701260219E12, 23.5], [1.701260207E12, 23.0], [1.701260121E12, 23.857142857142858], [1.701260162E12, 74.6], [1.701260076E12, 28.333333333333336], [1.701260203E12, 23.5], [1.70126017E12, 23.7], [1.701260084E12, 25.0], [1.701260211E12, 23.5], [1.701260125E12, 151.75], [1.701260039E12, 46.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.701260223E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 436.0, "minX": 1.701260039E12, "maxY": 57416.0, "series": [{"data": [[1.701260111E12, 3144.0], [1.701260152E12, 14952.0], [1.701260066E12, 1667.0], [1.701260107E12, 647.0], [1.70126016E12, 19089.0], [1.701260074E12, 1999.0], [1.701260201E12, 6032.0], [1.70126007E12, 1708.0], [1.701260144E12, 8009.0], [1.701260058E12, 1249.0], [1.701260185E12, 844.0], [1.70126014E12, 6719.0], [1.701260054E12, 1798.0], [1.701260062E12, 1797.0], [1.701260189E12, 482.0], [1.701260218E12, 7196.0], [1.701260132E12, 3178.0], [1.701260046E12, 4154.0], [1.701260173E12, 2831.0], [1.701260087E12, 869.0], [1.701260214E12, 7121.0], [1.701260181E12, 1713.0], [1.701260222E12, 7135.0], [1.701260136E12, 4923.0], [1.70126005E12, 4315.0], [1.701260177E12, 33213.0], [1.701260165E12, 20484.0], [1.701260079E12, 3530.0], [1.701260206E12, 5273.0], [1.70126012E12, 1894.0], [1.701260161E12, 19738.0], [1.701260075E12, 1579.0], [1.701260128E12, 47107.0], [1.701260042E12, 841.0], [1.701260083E12, 39155.0], [1.70126021E12, 7072.0], [1.701260124E12, 1910.0], [1.701260069E12, 1635.0], [1.70126011E12, 3245.0], [1.701260151E12, 45777.0], [1.701260065E12, 1765.0], [1.701260159E12, 617.0], [1.701260073E12, 1715.0], [1.7012602E12, 20505.0], [1.701260155E12, 16687.0], [1.701260143E12, 7799.0], [1.701260057E12, 1361.0], [1.701260184E12, 588.0], [1.701260139E12, 6096.0], [1.701260192E12, 30680.0], [1.701260106E12, 3012.0], [1.701260061E12, 1852.0], [1.701260188E12, 836.0], [1.701260176E12, 983.0], [1.701260217E12, 7508.0], [1.701260131E12, 2646.0], [1.701260045E12, 4410.0], [1.701260086E12, 1439.0], [1.701260053E12, 1946.0], [1.70126018E12, 18757.0], [1.701260221E12, 7261.0], [1.701260135E12, 1266.0], [1.701260049E12, 5997.0], [1.701260164E12, 20499.0], [1.701260205E12, 5206.0], [1.701260119E12, 2092.0], [1.701260213E12, 7143.0], [1.701260041E12, 1233.0], [1.701260168E12, 15680.0], [1.701260082E12, 39078.0], [1.701260209E12, 7068.0], [1.701260123E12, 1993.0], [1.701260154E12, 16177.0], [1.701260068E12, 1779.0], [1.701260195E12, 30976.0], [1.701260109E12, 4811.0], [1.70126015E12, 4244.0], [1.701260117E12, 13275.0], [1.701260158E12, 613.0], [1.701260072E12, 1302.0], [1.701260199E12, 53303.0], [1.701260142E12, 7399.0], [1.701260056E12, 1376.0], [1.701260183E12, 709.0], [1.701260064E12, 20145.0], [1.701260191E12, 29478.0], [1.701260146E12, 1182.0], [1.70126006E12, 1396.0], [1.701260187E12, 1239.0], [1.701260048E12, 3177.0], [1.701260175E12, 1709.0], [1.701260216E12, 7415.0], [1.70126013E12, 2702.0], [1.701260044E12, 3257.0], [1.701260171E12, 16007.0], [1.701260138E12, 5757.0], [1.701260052E12, 2071.0], [1.701260179E12, 2212.0], [1.70126022E12, 7289.0], [1.701260134E12, 1587.0], [1.701260208E12, 6102.0], [1.701260122E12, 1405.0], [1.701260163E12, 20205.0], [1.701260204E12, 5170.0], [1.701260118E12, 13428.0], [1.701260085E12, 1208.0], [1.701260212E12, 7129.0], [1.701260126E12, 915.0], [1.701260167E12, 20129.0], [1.701260081E12, 38081.0], [1.701260153E12, 7555.0], [1.701260067E12, 1666.0], [1.701260108E12, 4516.0], [1.701260202E12, 1584.0], [1.701260157E12, 17113.0], [1.701260071E12, 1878.0], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2301.0], [1.701260055E12, 1853.0], [1.701260182E12, 1128.0], [1.701260149E12, 40453.0], [1.701260063E12, 1411.0], [1.701260145E12, 8454.0], [1.701260059E12, 1254.0], [1.701260133E12, 1527.0], [1.701260047E12, 3146.0], [1.701260174E12, 2589.0], [1.701260215E12, 7371.0], [1.701260129E12, 57416.0], [1.701260043E12, 1807.0], [1.701260137E12, 5317.0], [1.701260051E12, 2790.0], [1.701260219E12, 6784.0], [1.701260207E12, 1401.0], [1.701260121E12, 1909.0], [1.701260162E12, 20070.0], [1.701260203E12, 1269.0], [1.70126017E12, 16416.0], [1.701260084E12, 1781.0], [1.701260211E12, 7274.0], [1.701260125E12, 1264.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.701260111E12, 1483.0], [1.701260152E12, 1415.0], [1.701260066E12, 605.0], [1.701260107E12, 647.0], [1.70126016E12, 928.0], [1.701260074E12, 789.0], [1.701260201E12, 1153.0], [1.70126007E12, 483.0], [1.701260144E12, 1518.0], [1.701260058E12, 894.0], [1.701260185E12, 844.0], [1.70126014E12, 2238.0], [1.701260054E12, 602.0], [1.701260062E12, 894.0], [1.701260189E12, 482.0], [1.701260218E12, 786.0], [1.701260132E12, 1385.0], [1.701260046E12, 2779.0], [1.701260173E12, 2459.0], [1.701260087E12, 869.0], [1.701260214E12, 502.0], [1.701260181E12, 1126.0], [1.701260222E12, 6929.0], [1.701260136E12, 4515.0], [1.70126005E12, 997.0], [1.701260177E12, 1025.0], [1.701260165E12, 1276.0], [1.701260079E12, 3530.0], [1.701260206E12, 883.0], [1.70126012E12, 1877.0], [1.701260161E12, 1003.0], [1.701260075E12, 813.0], [1.701260128E12, 1820.0], [1.701260042E12, 740.0], [1.701260083E12, 5666.0], [1.70126021E12, 1040.0], [1.701260124E12, 817.0], [1.701260069E12, 469.0], [1.70126011E12, 3245.0], [1.701260151E12, 4638.0], [1.701260065E12, 759.0], [1.701260159E12, 617.0], [1.701260073E12, 759.0], [1.7012602E12, 11521.0], [1.701260155E12, 884.0], [1.701260143E12, 1407.0], [1.701260057E12, 1093.0], [1.701260184E12, 493.0], [1.701260139E12, 2349.0], [1.701260192E12, 436.0], [1.701260106E12, 2948.0], [1.701260061E12, 609.0], [1.701260188E12, 727.0], [1.701260176E12, 747.0], [1.701260217E12, 489.0], [1.701260131E12, 2094.0], [1.701260045E12, 3374.0], [1.701260086E12, 779.0], [1.701260053E12, 725.0], [1.70126018E12, 2216.0], [1.701260221E12, 6933.0], [1.701260135E12, 1030.0], [1.701260049E12, 560.0], [1.701260164E12, 730.0], [1.701260205E12, 723.0], [1.701260119E12, 729.0], [1.701260213E12, 456.0], [1.701260041E12, 1111.0], [1.701260168E12, 2838.0], [1.701260082E12, 5469.0], [1.701260209E12, 1221.0], [1.701260123E12, 1918.0], [1.701260154E12, 1006.0], [1.701260068E12, 655.0], [1.701260195E12, 30976.0], [1.701260109E12, 1486.0], [1.70126015E12, 4244.0], [1.701260117E12, 6183.0], [1.701260158E12, 511.0], [1.701260072E12, 557.0], [1.701260199E12, 889.0], [1.701260142E12, 1608.0], [1.701260056E12, 759.0], [1.701260183E12, 515.0], [1.701260064E12, 1025.0], [1.701260191E12, 29478.0], [1.701260146E12, 1176.0], [1.70126006E12, 549.0], [1.701260187E12, 961.0], [1.701260048E12, 481.0], [1.701260175E12, 1136.0], [1.701260216E12, 785.0], [1.70126013E12, 2702.0], [1.701260044E12, 1785.0], [1.701260171E12, 2605.0], [1.701260138E12, 2233.0], [1.701260052E12, 1490.0], [1.701260179E12, 2095.0], [1.70126022E12, 7122.0], [1.701260134E12, 1196.0], [1.701260208E12, 1080.0], [1.701260122E12, 623.0], [1.701260163E12, 511.0], [1.701260204E12, 793.0], [1.701260118E12, 684.0], [1.701260085E12, 935.0], [1.701260212E12, 7093.0], [1.701260126E12, 915.0], [1.701260167E12, 2603.0], [1.701260081E12, 5772.0], [1.701260153E12, 1213.0], [1.701260067E12, 516.0], [1.701260108E12, 4111.0], [1.701260202E12, 1315.0], [1.701260157E12, 496.0], [1.701260071E12, 662.0], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2299.0], [1.701260055E12, 1115.0], [1.701260182E12, 867.0], [1.701260149E12, 39824.0], [1.701260063E12, 807.0], [1.701260145E12, 1307.0], [1.701260059E12, 926.0], [1.701260133E12, 1476.0], [1.701260047E12, 2923.0], [1.701260174E12, 1877.0], [1.701260215E12, 478.0], [1.701260129E12, 41795.0], [1.701260043E12, 1710.0], [1.701260137E12, 1551.0], [1.701260051E12, 1050.0], [1.701260219E12, 750.0], [1.701260207E12, 1344.0], [1.701260121E12, 1100.0], [1.701260162E12, 923.0], [1.701260203E12, 557.0], [1.70126017E12, 2705.0], [1.701260084E12, 1202.0], [1.701260211E12, 899.0], [1.701260125E12, 1090.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.701260111E12, 3144.0], [1.701260152E12, 14952.0], [1.701260066E12, 1655.2], [1.701260107E12, 647.0], [1.70126016E12, 19089.0], [1.701260074E12, 1999.0], [1.701260201E12, 6032.0], [1.70126007E12, 1687.3000000000002], [1.701260144E12, 8009.0], [1.701260058E12, 1248.2], [1.701260185E12, 844.0], [1.70126014E12, 6332.700000000001], [1.701260054E12, 1797.5], [1.701260062E12, 1795.0], [1.701260189E12, 482.0], [1.701260218E12, 7196.0], [1.701260132E12, 3168.8], [1.701260046E12, 4154.0], [1.701260173E12, 2831.0], [1.701260087E12, 869.0], [1.701260214E12, 7121.0], [1.701260181E12, 1713.0], [1.701260222E12, 7135.0], [1.701260136E12, 4923.0], [1.70126005E12, 4286.1], [1.701260177E12, 33213.0], [1.701260165E12, 20484.0], [1.701260079E12, 3530.0], [1.701260206E12, 5273.0], [1.70126012E12, 1894.0], [1.701260161E12, 19738.0], [1.701260075E12, 1560.1000000000001], [1.701260128E12, 47107.0], [1.701260042E12, 841.0], [1.701260083E12, 39155.0], [1.70126021E12, 7072.0], [1.701260124E12, 1910.0], [1.701260069E12, 1608.2], [1.70126011E12, 3245.0], [1.701260151E12, 45777.0], [1.701260065E12, 1753.8], [1.701260159E12, 617.0], [1.701260073E12, 1715.0], [1.7012602E12, 20505.0], [1.701260155E12, 16687.0], [1.701260143E12, 7799.0], [1.701260057E12, 1352.0], [1.701260184E12, 588.0], [1.701260139E12, 6096.0], [1.701260192E12, 30680.0], [1.701260106E12, 3012.0], [1.701260061E12, 1852.0], [1.701260188E12, 836.0], [1.701260176E12, 983.0], [1.701260217E12, 7508.0], [1.701260131E12, 2646.0], [1.701260045E12, 4401.6], [1.701260086E12, 1439.0], [1.701260053E12, 1946.0], [1.70126018E12, 18757.0], [1.701260221E12, 7261.0], [1.701260135E12, 1266.0], [1.701260049E12, 5997.0], [1.701260164E12, 20499.0], [1.701260205E12, 5206.0], [1.701260119E12, 2092.0], [1.701260213E12, 7143.0], [1.701260041E12, 1233.0], [1.701260168E12, 15680.0], [1.701260082E12, 39073.6], [1.701260209E12, 7068.0], [1.701260123E12, 1993.0], [1.701260154E12, 16177.0], [1.701260068E12, 1763.6000000000001], [1.701260195E12, 30976.0], [1.701260109E12, 4811.0], [1.70126015E12, 4244.0], [1.701260117E12, 13247.8], [1.701260158E12, 613.0], [1.701260072E12, 1267.5000000000002], [1.701260199E12, 53303.0], [1.701260142E12, 7389.2], [1.701260056E12, 1368.0], [1.701260183E12, 709.0], [1.701260064E12, 20145.0], [1.701260191E12, 29478.0], [1.701260146E12, 1182.0], [1.70126006E12, 1363.3000000000002], [1.701260187E12, 1239.0], [1.701260048E12, 3177.0], [1.701260175E12, 1709.0], [1.701260216E12, 7415.0], [1.70126013E12, 2702.0], [1.701260044E12, 3257.0], [1.701260171E12, 16007.0], [1.701260138E12, 5757.0], [1.701260052E12, 2071.0], [1.701260179E12, 2212.0], [1.70126022E12, 7289.0], [1.701260134E12, 1587.0], [1.701260208E12, 6102.0], [1.701260122E12, 1405.0], [1.701260163E12, 20205.0], [1.701260204E12, 5170.0], [1.701260118E12, 13428.0], [1.701260085E12, 1208.0], [1.701260212E12, 7129.0], [1.701260126E12, 915.0], [1.701260167E12, 18766.100000000002], [1.701260081E12, 38081.0], [1.701260153E12, 7555.0], [1.701260067E12, 1665.2], [1.701260108E12, 4516.0], [1.701260202E12, 1584.0], [1.701260157E12, 17113.0], [1.701260071E12, 1876.6], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2301.0], [1.701260055E12, 1848.4], [1.701260182E12, 1128.0], [1.701260149E12, 40453.0], [1.701260063E12, 1409.2], [1.701260145E12, 8454.0], [1.701260059E12, 1248.8], [1.701260133E12, 1527.0], [1.701260047E12, 3146.0], [1.701260174E12, 2589.0], [1.701260215E12, 7371.0], [1.701260129E12, 55885.2], [1.701260043E12, 1807.0], [1.701260137E12, 5317.0], [1.701260051E12, 2790.0], [1.701260219E12, 6784.0], [1.701260207E12, 1401.0], [1.701260121E12, 1909.0], [1.701260162E12, 20070.0], [1.701260203E12, 1269.0], [1.70126017E12, 16377.9], [1.701260084E12, 1781.0], [1.701260211E12, 7274.0], [1.701260125E12, 1264.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.701260111E12, 3144.0], [1.701260152E12, 14952.0], [1.701260066E12, 1667.0], [1.701260107E12, 647.0], [1.70126016E12, 19089.0], [1.701260074E12, 1999.0], [1.701260201E12, 6032.0], [1.70126007E12, 1708.0], [1.701260144E12, 8009.0], [1.701260058E12, 1249.0], [1.701260185E12, 844.0], [1.70126014E12, 6719.0], [1.701260054E12, 1798.0], [1.701260062E12, 1797.0], [1.701260189E12, 482.0], [1.701260218E12, 7196.0], [1.701260132E12, 3178.0], [1.701260046E12, 4154.0], [1.701260173E12, 2831.0], [1.701260087E12, 869.0], [1.701260214E12, 7121.0], [1.701260181E12, 1713.0], [1.701260222E12, 7135.0], [1.701260136E12, 4923.0], [1.70126005E12, 4315.0], [1.701260177E12, 33213.0], [1.701260165E12, 20484.0], [1.701260079E12, 3530.0], [1.701260206E12, 5273.0], [1.70126012E12, 1894.0], [1.701260161E12, 19738.0], [1.701260075E12, 1579.0], [1.701260128E12, 47107.0], [1.701260042E12, 841.0], [1.701260083E12, 39155.0], [1.70126021E12, 7072.0], [1.701260124E12, 1910.0], [1.701260069E12, 1635.0], [1.70126011E12, 3245.0], [1.701260151E12, 45777.0], [1.701260065E12, 1765.0], [1.701260159E12, 617.0], [1.701260073E12, 1715.0], [1.7012602E12, 20505.0], [1.701260155E12, 16687.0], [1.701260143E12, 7799.0], [1.701260057E12, 1361.0], [1.701260184E12, 588.0], [1.701260139E12, 6096.0], [1.701260192E12, 30680.0], [1.701260106E12, 3012.0], [1.701260061E12, 1852.0], [1.701260188E12, 836.0], [1.701260176E12, 983.0], [1.701260217E12, 7508.0], [1.701260131E12, 2646.0], [1.701260045E12, 4410.0], [1.701260086E12, 1439.0], [1.701260053E12, 1946.0], [1.70126018E12, 18757.0], [1.701260221E12, 7261.0], [1.701260135E12, 1266.0], [1.701260049E12, 5997.0], [1.701260164E12, 20499.0], [1.701260205E12, 5206.0], [1.701260119E12, 2092.0], [1.701260213E12, 7143.0], [1.701260041E12, 1233.0], [1.701260168E12, 15680.0], [1.701260082E12, 39078.0], [1.701260209E12, 7068.0], [1.701260123E12, 1993.0], [1.701260154E12, 16177.0], [1.701260068E12, 1779.0], [1.701260195E12, 30976.0], [1.701260109E12, 4811.0], [1.70126015E12, 4244.0], [1.701260117E12, 13275.0], [1.701260158E12, 613.0], [1.701260072E12, 1302.0], [1.701260199E12, 53303.0], [1.701260142E12, 7399.0], [1.701260056E12, 1376.0], [1.701260183E12, 709.0], [1.701260064E12, 20145.0], [1.701260191E12, 29478.0], [1.701260146E12, 1182.0], [1.70126006E12, 1396.0], [1.701260187E12, 1239.0], [1.701260048E12, 3177.0], [1.701260175E12, 1709.0], [1.701260216E12, 7415.0], [1.70126013E12, 2702.0], [1.701260044E12, 3257.0], [1.701260171E12, 16007.0], [1.701260138E12, 5757.0], [1.701260052E12, 2071.0], [1.701260179E12, 2212.0], [1.70126022E12, 7289.0], [1.701260134E12, 1587.0], [1.701260208E12, 6102.0], [1.701260122E12, 1405.0], [1.701260163E12, 20205.0], [1.701260204E12, 5170.0], [1.701260118E12, 13428.0], [1.701260085E12, 1208.0], [1.701260212E12, 7129.0], [1.701260126E12, 915.0], [1.701260167E12, 20129.0], [1.701260081E12, 38081.0], [1.701260153E12, 7555.0], [1.701260067E12, 1666.0], [1.701260108E12, 4516.0], [1.701260202E12, 1584.0], [1.701260157E12, 17113.0], [1.701260071E12, 1878.0], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2301.0], [1.701260055E12, 1853.0], [1.701260182E12, 1128.0], [1.701260149E12, 40453.0], [1.701260063E12, 1411.0], [1.701260145E12, 8454.0], [1.701260059E12, 1254.0], [1.701260133E12, 1527.0], [1.701260047E12, 3146.0], [1.701260174E12, 2589.0], [1.701260215E12, 7371.0], [1.701260129E12, 57416.0], [1.701260043E12, 1807.0], [1.701260137E12, 5317.0], [1.701260051E12, 2790.0], [1.701260219E12, 6784.0], [1.701260207E12, 1401.0], [1.701260121E12, 1909.0], [1.701260162E12, 20070.0], [1.701260203E12, 1269.0], [1.70126017E12, 16416.0], [1.701260084E12, 1781.0], [1.701260211E12, 7274.0], [1.701260125E12, 1264.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.701260111E12, 3001.5], [1.701260152E12, 1793.5], [1.701260066E12, 1485.0], [1.701260107E12, 647.0], [1.70126016E12, 19074.0], [1.701260074E12, 1698.5], [1.701260201E12, 3592.5], [1.70126007E12, 1381.0], [1.701260144E12, 1632.0], [1.701260058E12, 1048.5], [1.701260185E12, 844.0], [1.70126014E12, 2739.5], [1.701260054E12, 1562.0], [1.701260062E12, 1176.5], [1.701260189E12, 482.0], [1.701260218E12, 7002.0], [1.701260132E12, 2902.0], [1.701260046E12, 2867.0], [1.701260173E12, 2596.0], [1.701260087E12, 869.0], [1.701260214E12, 812.0], [1.701260181E12, 1276.0], [1.701260222E12, 7032.0], [1.701260136E12, 4852.0], [1.70126005E12, 3392.5], [1.701260177E12, 31453.0], [1.701260165E12, 10880.0], [1.701260079E12, 3530.0], [1.701260206E12, 1113.0], [1.70126012E12, 1885.5], [1.701260161E12, 19430.0], [1.701260075E12, 1153.0], [1.701260128E12, 45895.0], [1.701260042E12, 790.5], [1.701260083E12, 39141.0], [1.70126021E12, 1100.0], [1.701260124E12, 1699.0], [1.701260069E12, 1299.0], [1.70126011E12, 3245.0], [1.701260151E12, 13743.5], [1.701260065E12, 1540.0], [1.701260159E12, 617.0], [1.701260073E12, 922.0], [1.7012602E12, 15270.0], [1.701260155E12, 1118.0], [1.701260143E12, 1526.5], [1.701260057E12, 1169.5], [1.701260184E12, 540.5], [1.701260139E12, 2593.0], [1.701260192E12, 15558.0], [1.701260106E12, 2950.0], [1.701260061E12, 1055.0], [1.701260188E12, 792.5], [1.701260176E12, 914.0], [1.701260217E12, 4020.0], [1.701260131E12, 2116.5], [1.701260045E12, 3916.0], [1.701260086E12, 1117.0], [1.701260053E12, 1517.0], [1.70126018E12, 2367.0], [1.701260221E12, 7168.0], [1.701260135E12, 1193.5], [1.701260049E12, 4266.0], [1.701260164E12, 780.0], [1.701260205E12, 4968.0], [1.701260119E12, 1998.0], [1.701260213E12, 7095.5], [1.701260041E12, 1133.5], [1.701260168E12, 15606.0], [1.701260082E12, 36173.0], [1.701260209E12, 1268.0], [1.701260123E12, 1955.5], [1.701260154E12, 1293.0], [1.701260068E12, 1435.0], [1.701260195E12, 30976.0], [1.701260109E12, 1771.5], [1.70126015E12, 4244.0], [1.701260117E12, 12937.0], [1.701260158E12, 562.0], [1.701260072E12, 1016.5], [1.701260199E12, 27096.0], [1.701260142E12, 1921.0], [1.701260056E12, 1276.0], [1.701260183E12, 626.0], [1.701260064E12, 1249.5], [1.701260191E12, 29478.0], [1.701260146E12, 1179.0], [1.70126006E12, 1068.5], [1.701260187E12, 1239.0], [1.701260048E12, 2892.0], [1.701260175E12, 1596.0], [1.701260216E12, 4101.5], [1.70126013E12, 2702.0], [1.701260044E12, 2521.0], [1.701260171E12, 9353.0], [1.701260138E12, 3853.0], [1.701260052E12, 1657.5], [1.701260179E12, 2179.0], [1.70126022E12, 7205.5], [1.701260134E12, 1468.0], [1.701260208E12, 3626.0], [1.701260122E12, 1312.0], [1.701260163E12, 19954.5], [1.701260204E12, 2998.0], [1.701260118E12, 13343.5], [1.701260085E12, 1194.0], [1.701260212E12, 7111.0], [1.701260126E12, 915.0], [1.701260167E12, 15502.5], [1.701260081E12, 22173.0], [1.701260153E12, 3870.5], [1.701260067E12, 1234.0], [1.701260108E12, 4206.0], [1.701260202E12, 1500.0], [1.701260157E12, 8804.5], [1.701260071E12, 1696.0], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2300.0], [1.701260055E12, 1525.0], [1.701260182E12, 1057.0], [1.701260149E12, 39944.0], [1.701260063E12, 1278.0], [1.701260145E12, 1499.0], [1.701260059E12, 1002.5], [1.701260133E12, 1509.0], [1.701260047E12, 3012.0], [1.701260174E12, 2537.5], [1.701260215E12, 7202.0], [1.701260129E12, 46674.0], [1.701260043E12, 1718.0], [1.701260137E12, 1851.0], [1.701260051E12, 1401.5], [1.701260219E12, 931.5], [1.701260207E12, 1385.0], [1.701260121E12, 1714.0], [1.701260162E12, 19847.0], [1.701260203E12, 925.0], [1.70126017E12, 2961.0], [1.701260084E12, 1312.5], [1.701260211E12, 3985.5], [1.701260125E12, 1184.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.701260111E12, 3144.0], [1.701260152E12, 14952.0], [1.701260066E12, 1667.0], [1.701260107E12, 647.0], [1.70126016E12, 19089.0], [1.701260074E12, 1999.0], [1.701260201E12, 6032.0], [1.70126007E12, 1708.0], [1.701260144E12, 8009.0], [1.701260058E12, 1249.0], [1.701260185E12, 844.0], [1.70126014E12, 6719.0], [1.701260054E12, 1798.0], [1.701260062E12, 1797.0], [1.701260189E12, 482.0], [1.701260218E12, 7196.0], [1.701260132E12, 3178.0], [1.701260046E12, 4154.0], [1.701260173E12, 2831.0], [1.701260087E12, 869.0], [1.701260214E12, 7121.0], [1.701260181E12, 1713.0], [1.701260222E12, 7135.0], [1.701260136E12, 4923.0], [1.70126005E12, 4315.0], [1.701260177E12, 33213.0], [1.701260165E12, 20484.0], [1.701260079E12, 3530.0], [1.701260206E12, 5273.0], [1.70126012E12, 1894.0], [1.701260161E12, 19738.0], [1.701260075E12, 1579.0], [1.701260128E12, 47107.0], [1.701260042E12, 841.0], [1.701260083E12, 39155.0], [1.70126021E12, 7072.0], [1.701260124E12, 1910.0], [1.701260069E12, 1635.0], [1.70126011E12, 3245.0], [1.701260151E12, 45777.0], [1.701260065E12, 1765.0], [1.701260159E12, 617.0], [1.701260073E12, 1715.0], [1.7012602E12, 20505.0], [1.701260155E12, 16687.0], [1.701260143E12, 7799.0], [1.701260057E12, 1361.0], [1.701260184E12, 588.0], [1.701260139E12, 6096.0], [1.701260192E12, 30680.0], [1.701260106E12, 3012.0], [1.701260061E12, 1852.0], [1.701260188E12, 836.0], [1.701260176E12, 983.0], [1.701260217E12, 7508.0], [1.701260131E12, 2646.0], [1.701260045E12, 4410.0], [1.701260086E12, 1439.0], [1.701260053E12, 1946.0], [1.70126018E12, 18757.0], [1.701260221E12, 7261.0], [1.701260135E12, 1266.0], [1.701260049E12, 5997.0], [1.701260164E12, 20499.0], [1.701260205E12, 5206.0], [1.701260119E12, 2092.0], [1.701260213E12, 7143.0], [1.701260041E12, 1233.0], [1.701260168E12, 15680.0], [1.701260082E12, 39078.0], [1.701260209E12, 7068.0], [1.701260123E12, 1993.0], [1.701260154E12, 16177.0], [1.701260068E12, 1779.0], [1.701260195E12, 30976.0], [1.701260109E12, 4811.0], [1.70126015E12, 4244.0], [1.701260117E12, 13275.0], [1.701260158E12, 613.0], [1.701260072E12, 1302.0], [1.701260199E12, 53303.0], [1.701260142E12, 7399.0], [1.701260056E12, 1376.0], [1.701260183E12, 709.0], [1.701260064E12, 20145.0], [1.701260191E12, 29478.0], [1.701260146E12, 1182.0], [1.70126006E12, 1396.0], [1.701260187E12, 1239.0], [1.701260048E12, 3177.0], [1.701260175E12, 1709.0], [1.701260216E12, 7415.0], [1.70126013E12, 2702.0], [1.701260044E12, 3257.0], [1.701260171E12, 16007.0], [1.701260138E12, 5757.0], [1.701260052E12, 2071.0], [1.701260179E12, 2212.0], [1.70126022E12, 7289.0], [1.701260134E12, 1587.0], [1.701260208E12, 6102.0], [1.701260122E12, 1405.0], [1.701260163E12, 20205.0], [1.701260204E12, 5170.0], [1.701260118E12, 13428.0], [1.701260085E12, 1208.0], [1.701260212E12, 7129.0], [1.701260126E12, 915.0], [1.701260167E12, 20129.0], [1.701260081E12, 38081.0], [1.701260153E12, 7555.0], [1.701260067E12, 1666.0], [1.701260108E12, 4516.0], [1.701260202E12, 1584.0], [1.701260157E12, 17113.0], [1.701260071E12, 1878.0], [1.701260198E12, 27431.0], [1.701260186E12, 1259.0], [1.701260141E12, 2301.0], [1.701260055E12, 1853.0], [1.701260182E12, 1128.0], [1.701260149E12, 40453.0], [1.701260063E12, 1411.0], [1.701260145E12, 8454.0], [1.701260059E12, 1254.0], [1.701260133E12, 1527.0], [1.701260047E12, 3146.0], [1.701260174E12, 2589.0], [1.701260215E12, 7371.0], [1.701260129E12, 57416.0], [1.701260043E12, 1807.0], [1.701260137E12, 5317.0], [1.701260051E12, 2790.0], [1.701260219E12, 6784.0], [1.701260207E12, 1401.0], [1.701260121E12, 1909.0], [1.701260162E12, 20070.0], [1.701260203E12, 1269.0], [1.70126017E12, 16416.0], [1.701260084E12, 1781.0], [1.701260211E12, 7274.0], [1.701260125E12, 1264.0], [1.701260039E12, 528.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.701260222E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1182.5, "minX": 1.0, "maxY": 60156.0, "series": [{"data": [[2.0, 1906.0], [8.0, 1772.0], [9.0, 1581.0], [10.0, 1692.0], [11.0, 1406.5], [3.0, 2593.0], [12.0, 1182.5], [13.0, 43588.0], [1.0, 2702.0], [4.0, 1481.0], [16.0, 11307.0], [17.0, 1907.0], [5.0, 1499.5], [6.0, 2878.0], [7.0, 1878.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 47506.0], [9.0, 32983.0], [10.0, 60026.0], [11.0, 51331.5], [12.0, 32681.0], [3.0, 60026.0], [13.0, 60025.0], [14.0, 60034.0], [4.0, 60025.0], [1.0, 60025.0], [16.0, 59604.5], [17.0, 60026.0], [76.0, 49146.0], [5.0, 60156.0], [6.0, 60024.5], [7.0, 60024.0], [31.0, 60028.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 76.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 43519.5, "series": [{"data": [[2.0, 1763.5], [8.0, 1597.0], [9.0, 1446.5], [10.0, 1576.0], [11.0, 1317.5], [3.0, 2526.0], [12.0, 1110.0], [13.0, 43519.5], [1.0, 2633.0], [4.0, 1416.5], [16.0, 11134.5], [17.0, 1844.5], [5.0, 1436.5], [6.0, 2810.0], [7.0, 1615.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 17250.5], [9.0, 32401.0], [10.0, 0.0], [11.0, 16704.0], [12.0, 32681.0], [3.0, 0.0], [13.0, 0.0], [14.0, 0.0], [4.0, 0.0], [1.0, 0.0], [16.0, 40549.5], [17.0, 0.0], [76.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 76.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.701260039E12, "maxY": 45.0, "series": [{"data": [[1.701260111E12, 8.0], [1.701260152E12, 8.0], [1.701260066E12, 11.0], [1.701260107E12, 1.0], [1.70126016E12, 3.0], [1.701260074E12, 8.0], [1.701260201E12, 2.0], [1.70126007E12, 10.0], [1.701260144E12, 6.0], [1.701260058E12, 10.0], [1.701260185E12, 4.0], [1.70126014E12, 10.0], [1.701260054E12, 10.0], [1.701260062E12, 10.0], [1.701260189E12, 1.0], [1.701260103E12, 14.0], [1.701260218E12, 6.0], [1.701260132E12, 10.0], [1.701260046E12, 7.0], [1.701260173E12, 11.0], [1.701260087E12, 1.0], [1.701260214E12, 4.0], [1.701260181E12, 5.0], [1.701260136E12, 7.0], [1.70126005E12, 10.0], [1.701260177E12, 11.0], [1.701260165E12, 6.0], [1.701260079E12, 1.0], [1.701260206E12, 8.0], [1.70126012E12, 2.0], [1.701260161E12, 5.0], [1.701260075E12, 12.0], [1.701260128E12, 5.0], [1.701260042E12, 9.0], [1.701260083E12, 5.0], [1.70126021E12, 3.0], [1.701260124E12, 6.0], [1.701260069E12, 11.0], [1.70126011E12, 1.0], [1.701260151E12, 6.0], [1.701260065E12, 11.0], [1.701260159E12, 1.0], [1.701260073E12, 9.0], [1.7012602E12, 10.0], [1.701260155E12, 5.0], [1.701260143E12, 8.0], [1.701260057E12, 12.0], [1.701260184E12, 4.0], [1.701260139E12, 3.0], [1.701260192E12, 2.0], [1.701260106E12, 3.0], [1.701260061E12, 9.0], [1.701260188E12, 4.0], [1.701260176E12, 4.0], [1.701260217E12, 6.0], [1.701260131E12, 9.0], [1.701260045E12, 12.0], [1.701260172E12, 1.0], [1.701260086E12, 6.0], [1.701260053E12, 9.0], [1.70126018E12, 8.0], [1.701260135E12, 9.0], [1.701260049E12, 3.0], [1.701260164E12, 17.0], [1.701260205E12, 6.0], [1.701260119E12, 7.0], [1.701260213E12, 6.0], [1.701260041E12, 12.0], [1.701260168E12, 6.0], [1.701260082E12, 11.0], [1.701260209E12, 5.0], [1.701260123E12, 2.0], [1.701260154E12, 5.0], [1.701260068E12, 11.0], [1.701260195E12, 1.0], [1.701260109E12, 4.0], [1.70126015E12, 1.0], [1.701260117E12, 11.0], [1.701260158E12, 2.0], [1.701260072E12, 12.0], [1.701260199E12, 2.0], [1.701260142E12, 17.0], [1.701260056E12, 11.0], [1.701260183E12, 3.0], [1.701260064E12, 8.0], [1.701260191E12, 1.0], [1.701260105E12, 7.0], [1.701260146E12, 11.0], [1.70126006E12, 12.0], [1.701260187E12, 7.0], [1.701260048E12, 4.0], [1.701260175E12, 5.0], [1.701260216E12, 4.0], [1.70126013E12, 1.0], [1.701260044E12, 45.0], [1.701260171E12, 16.0], [1.701260138E12, 4.0], [1.701260052E12, 8.0], [1.701260179E12, 4.0], [1.701260134E12, 5.0], [1.701260208E12, 6.0], [1.701260122E12, 4.0], [1.701260163E12, 4.0], [1.701260077E12, 12.0], [1.701260204E12, 4.0], [1.701260118E12, 8.0], [1.701260085E12, 7.0], [1.701260212E12, 2.0], [1.701260126E12, 1.0], [1.70126004E12, 4.0], [1.701260167E12, 16.0], [1.701260081E12, 4.0], [1.701260112E12, 4.0], [1.701260153E12, 4.0], [1.701260067E12, 11.0], [1.701260108E12, 8.0], [1.701260202E12, 5.0], [1.701260116E12, 1.0], [1.701260157E12, 2.0], [1.701260071E12, 11.0], [1.701260198E12, 1.0], [1.701260186E12, 7.0], [1.701260141E12, 3.0], [1.701260055E12, 10.0], [1.701260182E12, 5.0], [1.701260149E12, 4.0], [1.701260063E12, 11.0], [1.701260104E12, 31.0], [1.701260145E12, 5.0], [1.701260059E12, 10.0], [1.701260133E12, 4.0], [1.701260047E12, 3.0], [1.701260174E12, 4.0], [1.701260215E12, 3.0], [1.701260129E12, 13.0], [1.701260043E12, 41.0], [1.701260137E12, 13.0], [1.701260051E12, 8.0], [1.701260178E12, 3.0], [1.701260219E12, 1.0], [1.701260207E12, 3.0], [1.701260121E12, 7.0], [1.701260162E12, 5.0], [1.701260076E12, 9.0], [1.701260203E12, 4.0], [1.70126017E12, 10.0], [1.701260084E12, 8.0], [1.701260211E12, 4.0], [1.701260125E12, 4.0], [1.701260039E12, 1.0], [1.701260166E12, 1.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.701260219E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.701260039E12, "maxY": 76.0, "series": [{"data": [[1.701260111E12, 4.0], [1.701260152E12, 8.0], [1.701260066E12, 11.0], [1.701260107E12, 1.0], [1.70126016E12, 3.0], [1.701260074E12, 8.0], [1.701260201E12, 2.0], [1.70126007E12, 10.0], [1.701260144E12, 6.0], [1.701260058E12, 10.0], [1.701260185E12, 1.0], [1.70126014E12, 10.0], [1.701260054E12, 10.0], [1.701260062E12, 10.0], [1.701260189E12, 1.0], [1.701260218E12, 6.0], [1.701260132E12, 10.0], [1.701260046E12, 7.0], [1.701260173E12, 9.0], [1.701260087E12, 1.0], [1.701260214E12, 4.0], [1.701260181E12, 5.0], [1.701260222E12, 2.0], [1.701260136E12, 5.0], [1.70126005E12, 10.0], [1.701260177E12, 6.0], [1.701260165E12, 2.0], [1.701260079E12, 1.0], [1.701260206E12, 5.0], [1.70126012E12, 2.0], [1.701260161E12, 5.0], [1.701260075E12, 12.0], [1.701260128E12, 5.0], [1.701260042E12, 2.0], [1.701260083E12, 5.0], [1.70126021E12, 3.0], [1.701260124E12, 6.0], [1.701260069E12, 11.0], [1.70126011E12, 1.0], [1.701260151E12, 6.0], [1.701260065E12, 11.0], [1.701260159E12, 1.0], [1.701260073E12, 9.0], [1.7012602E12, 9.0], [1.701260155E12, 5.0], [1.701260143E12, 8.0], [1.701260057E12, 12.0], [1.701260184E12, 2.0], [1.701260139E12, 3.0], [1.701260192E12, 2.0], [1.701260106E12, 3.0], [1.701260061E12, 9.0], [1.701260188E12, 4.0], [1.701260176E12, 3.0], [1.701260217E12, 6.0], [1.701260131E12, 8.0], [1.701260045E12, 12.0], [1.701260086E12, 6.0], [1.701260053E12, 9.0], [1.70126018E12, 7.0], [1.701260221E12, 3.0], [1.701260135E12, 4.0], [1.701260049E12, 3.0], [1.701260164E12, 3.0], [1.701260205E12, 5.0], [1.701260119E12, 7.0], [1.701260213E12, 6.0], [1.701260041E12, 4.0], [1.701260168E12, 5.0], [1.701260082E12, 11.0], [1.701260209E12, 5.0], [1.701260123E12, 2.0], [1.701260154E12, 5.0], [1.701260068E12, 11.0], [1.701260195E12, 1.0], [1.701260109E12, 4.0], [1.70126015E12, 1.0], [1.701260117E12, 11.0], [1.701260158E12, 2.0], [1.701260072E12, 12.0], [1.701260199E12, 2.0], [1.701260142E12, 11.0], [1.701260056E12, 11.0], [1.701260183E12, 3.0], [1.701260064E12, 8.0], [1.701260191E12, 1.0], [1.701260146E12, 2.0], [1.70126006E12, 12.0], [1.701260187E12, 3.0], [1.701260048E12, 4.0], [1.701260175E12, 5.0], [1.701260216E12, 4.0], [1.70126013E12, 1.0], [1.701260044E12, 2.0], [1.701260171E12, 10.0], [1.701260138E12, 4.0], [1.701260052E12, 8.0], [1.701260179E12, 3.0], [1.70126022E12, 2.0], [1.701260134E12, 5.0], [1.701260208E12, 6.0], [1.701260122E12, 4.0], [1.701260163E12, 4.0], [1.701260204E12, 4.0], [1.701260118E12, 8.0], [1.701260085E12, 7.0], [1.701260212E12, 2.0], [1.701260126E12, 1.0], [1.701260167E12, 16.0], [1.701260081E12, 4.0], [1.701260153E12, 4.0], [1.701260067E12, 11.0], [1.701260108E12, 8.0], [1.701260202E12, 5.0], [1.701260157E12, 2.0], [1.701260071E12, 11.0], [1.701260198E12, 1.0], [1.701260186E12, 1.0], [1.701260141E12, 2.0], [1.701260055E12, 10.0], [1.701260182E12, 4.0], [1.701260149E12, 4.0], [1.701260063E12, 11.0], [1.701260145E12, 5.0], [1.701260059E12, 10.0], [1.701260133E12, 4.0], [1.701260047E12, 3.0], [1.701260174E12, 4.0], [1.701260215E12, 3.0], [1.701260129E12, 13.0], [1.701260043E12, 3.0], [1.701260137E12, 7.0], [1.701260051E12, 8.0], [1.701260219E12, 4.0], [1.701260207E12, 3.0], [1.701260121E12, 7.0], [1.701260162E12, 5.0], [1.701260203E12, 3.0], [1.70126017E12, 10.0], [1.701260084E12, 8.0], [1.701260211E12, 4.0], [1.701260125E12, 4.0], [1.701260039E12, 1.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.701260116E12, 1.0], [1.7012602E12, 1.0], [1.701260185E12, 3.0], [1.701260142E12, 6.0], [1.701260141E12, 1.0], [1.701260184E12, 2.0], [1.701260182E12, 1.0], [1.701260105E12, 7.0], [1.701260104E12, 31.0], [1.701260103E12, 14.0], [1.701260146E12, 2.0], [1.701260176E12, 1.0], [1.701260131E12, 1.0], [1.701260172E12, 3.0], [1.701260171E12, 6.0], [1.701260137E12, 6.0], [1.70126018E12, 1.0], [1.701260179E12, 1.0], [1.701260222E12, 3.0], [1.701260136E12, 2.0], [1.701260135E12, 5.0], [1.701260178E12, 3.0], [1.701260177E12, 5.0], [1.701260165E12, 5.0], [1.701260164E12, 14.0], [1.701260206E12, 3.0], [1.701260205E12, 1.0], [1.701260203E12, 1.0], [1.701260168E12, 1.0]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.701260112E12, 4.0], [1.701260111E12, 4.0], [1.701260186E12, 6.0], [1.701260077E12, 12.0], [1.701260076E12, 9.0], [1.701260222E12, 11.0], [1.701260146E12, 7.0], [1.701260187E12, 4.0]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.701260223E12, 76.0]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.701260223E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.701260039E12, "maxY": 76.0, "series": [{"data": [[1.701260111E12, 4.0], [1.701260152E12, 8.0], [1.701260066E12, 11.0], [1.701260107E12, 1.0], [1.70126016E12, 3.0], [1.701260074E12, 8.0], [1.701260201E12, 2.0], [1.70126007E12, 10.0], [1.701260144E12, 6.0], [1.701260058E12, 10.0], [1.701260185E12, 1.0], [1.70126014E12, 10.0], [1.701260054E12, 10.0], [1.701260062E12, 10.0], [1.701260189E12, 1.0], [1.701260218E12, 6.0], [1.701260132E12, 10.0], [1.701260046E12, 7.0], [1.701260173E12, 9.0], [1.701260087E12, 1.0], [1.701260214E12, 4.0], [1.701260181E12, 5.0], [1.701260222E12, 2.0], [1.701260136E12, 5.0], [1.70126005E12, 10.0], [1.701260177E12, 6.0], [1.701260165E12, 2.0], [1.701260079E12, 1.0], [1.701260206E12, 5.0], [1.70126012E12, 2.0], [1.701260161E12, 5.0], [1.701260075E12, 12.0], [1.701260128E12, 5.0], [1.701260042E12, 2.0], [1.701260083E12, 5.0], [1.70126021E12, 3.0], [1.701260124E12, 6.0], [1.701260069E12, 11.0], [1.70126011E12, 1.0], [1.701260151E12, 6.0], [1.701260065E12, 11.0], [1.701260159E12, 1.0], [1.701260073E12, 9.0], [1.7012602E12, 9.0], [1.701260155E12, 5.0], [1.701260143E12, 8.0], [1.701260057E12, 12.0], [1.701260184E12, 2.0], [1.701260139E12, 3.0], [1.701260192E12, 2.0], [1.701260106E12, 3.0], [1.701260061E12, 9.0], [1.701260188E12, 4.0], [1.701260176E12, 3.0], [1.701260217E12, 6.0], [1.701260131E12, 8.0], [1.701260045E12, 12.0], [1.701260086E12, 6.0], [1.701260053E12, 9.0], [1.70126018E12, 7.0], [1.701260221E12, 3.0], [1.701260135E12, 4.0], [1.701260049E12, 3.0], [1.701260164E12, 3.0], [1.701260205E12, 5.0], [1.701260119E12, 7.0], [1.701260213E12, 6.0], [1.701260041E12, 4.0], [1.701260168E12, 5.0], [1.701260082E12, 11.0], [1.701260209E12, 5.0], [1.701260123E12, 2.0], [1.701260154E12, 5.0], [1.701260068E12, 11.0], [1.701260195E12, 1.0], [1.701260109E12, 4.0], [1.70126015E12, 1.0], [1.701260117E12, 11.0], [1.701260158E12, 2.0], [1.701260072E12, 12.0], [1.701260199E12, 2.0], [1.701260142E12, 11.0], [1.701260056E12, 11.0], [1.701260183E12, 3.0], [1.701260064E12, 8.0], [1.701260191E12, 1.0], [1.701260146E12, 2.0], [1.70126006E12, 12.0], [1.701260187E12, 3.0], [1.701260048E12, 4.0], [1.701260175E12, 5.0], [1.701260216E12, 4.0], [1.70126013E12, 1.0], [1.701260044E12, 2.0], [1.701260171E12, 10.0], [1.701260138E12, 4.0], [1.701260052E12, 8.0], [1.701260179E12, 3.0], [1.70126022E12, 2.0], [1.701260134E12, 5.0], [1.701260208E12, 6.0], [1.701260122E12, 4.0], [1.701260163E12, 4.0], [1.701260204E12, 4.0], [1.701260118E12, 8.0], [1.701260085E12, 7.0], [1.701260212E12, 2.0], [1.701260126E12, 1.0], [1.701260167E12, 16.0], [1.701260081E12, 4.0], [1.701260153E12, 4.0], [1.701260067E12, 11.0], [1.701260108E12, 8.0], [1.701260202E12, 5.0], [1.701260157E12, 2.0], [1.701260071E12, 11.0], [1.701260198E12, 1.0], [1.701260186E12, 1.0], [1.701260141E12, 2.0], [1.701260055E12, 10.0], [1.701260182E12, 4.0], [1.701260149E12, 4.0], [1.701260063E12, 11.0], [1.701260145E12, 5.0], [1.701260059E12, 10.0], [1.701260133E12, 4.0], [1.701260047E12, 3.0], [1.701260174E12, 4.0], [1.701260215E12, 3.0], [1.701260129E12, 13.0], [1.701260043E12, 3.0], [1.701260137E12, 7.0], [1.701260051E12, 8.0], [1.701260219E12, 4.0], [1.701260207E12, 3.0], [1.701260121E12, 7.0], [1.701260162E12, 5.0], [1.701260203E12, 3.0], [1.70126017E12, 10.0], [1.701260084E12, 8.0], [1.701260211E12, 4.0], [1.701260125E12, 4.0], [1.701260039E12, 1.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.701260112E12, 4.0], [1.701260111E12, 4.0], [1.701260116E12, 1.0], [1.7012602E12, 1.0], [1.701260186E12, 6.0], [1.701260185E12, 3.0], [1.701260142E12, 6.0], [1.701260141E12, 1.0], [1.701260184E12, 2.0], [1.701260182E12, 1.0], [1.701260105E12, 7.0], [1.701260104E12, 31.0], [1.701260103E12, 14.0], [1.701260146E12, 9.0], [1.701260187E12, 4.0], [1.701260176E12, 1.0], [1.701260131E12, 1.0], [1.701260172E12, 3.0], [1.701260171E12, 6.0], [1.701260223E12, 76.0], [1.701260137E12, 6.0], [1.70126018E12, 1.0], [1.701260179E12, 1.0], [1.701260222E12, 14.0], [1.701260136E12, 2.0], [1.701260135E12, 5.0], [1.701260178E12, 3.0], [1.701260177E12, 5.0], [1.701260165E12, 5.0], [1.701260164E12, 14.0], [1.701260206E12, 3.0], [1.701260077E12, 12.0], [1.701260205E12, 1.0], [1.701260076E12, 9.0], [1.701260203E12, 1.0], [1.701260168E12, 1.0]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.701260223E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.701260039E12, "maxY": 76.0, "series": [{"data": [[1.701260111E12, 4.0], [1.701260152E12, 8.0], [1.701260066E12, 11.0], [1.701260107E12, 1.0], [1.70126016E12, 3.0], [1.701260074E12, 8.0], [1.701260201E12, 2.0], [1.70126007E12, 10.0], [1.701260144E12, 6.0], [1.701260058E12, 10.0], [1.701260185E12, 1.0], [1.70126014E12, 10.0], [1.701260054E12, 10.0], [1.701260062E12, 10.0], [1.701260189E12, 1.0], [1.701260218E12, 6.0], [1.701260132E12, 10.0], [1.701260046E12, 7.0], [1.701260173E12, 9.0], [1.701260087E12, 1.0], [1.701260214E12, 4.0], [1.701260181E12, 5.0], [1.701260222E12, 2.0], [1.701260136E12, 5.0], [1.70126005E12, 10.0], [1.701260177E12, 6.0], [1.701260165E12, 2.0], [1.701260079E12, 1.0], [1.701260206E12, 5.0], [1.70126012E12, 2.0], [1.701260161E12, 5.0], [1.701260075E12, 12.0], [1.701260128E12, 5.0], [1.701260042E12, 2.0], [1.701260083E12, 5.0], [1.70126021E12, 3.0], [1.701260124E12, 6.0], [1.701260069E12, 11.0], [1.70126011E12, 1.0], [1.701260151E12, 6.0], [1.701260065E12, 11.0], [1.701260159E12, 1.0], [1.701260073E12, 9.0], [1.7012602E12, 9.0], [1.701260155E12, 5.0], [1.701260143E12, 8.0], [1.701260057E12, 12.0], [1.701260184E12, 2.0], [1.701260139E12, 3.0], [1.701260192E12, 2.0], [1.701260106E12, 3.0], [1.701260061E12, 9.0], [1.701260188E12, 4.0], [1.701260176E12, 3.0], [1.701260217E12, 6.0], [1.701260131E12, 8.0], [1.701260045E12, 12.0], [1.701260086E12, 6.0], [1.701260053E12, 9.0], [1.70126018E12, 7.0], [1.701260221E12, 3.0], [1.701260135E12, 4.0], [1.701260049E12, 3.0], [1.701260164E12, 3.0], [1.701260205E12, 5.0], [1.701260119E12, 7.0], [1.701260213E12, 6.0], [1.701260041E12, 4.0], [1.701260168E12, 5.0], [1.701260082E12, 11.0], [1.701260209E12, 5.0], [1.701260123E12, 2.0], [1.701260154E12, 5.0], [1.701260068E12, 11.0], [1.701260195E12, 1.0], [1.701260109E12, 4.0], [1.70126015E12, 1.0], [1.701260117E12, 11.0], [1.701260158E12, 2.0], [1.701260072E12, 12.0], [1.701260199E12, 2.0], [1.701260142E12, 11.0], [1.701260056E12, 11.0], [1.701260183E12, 3.0], [1.701260064E12, 8.0], [1.701260191E12, 1.0], [1.701260146E12, 2.0], [1.70126006E12, 12.0], [1.701260187E12, 3.0], [1.701260048E12, 4.0], [1.701260175E12, 5.0], [1.701260216E12, 4.0], [1.70126013E12, 1.0], [1.701260044E12, 2.0], [1.701260171E12, 10.0], [1.701260138E12, 4.0], [1.701260052E12, 8.0], [1.701260179E12, 3.0], [1.70126022E12, 2.0], [1.701260134E12, 5.0], [1.701260208E12, 6.0], [1.701260122E12, 4.0], [1.701260163E12, 4.0], [1.701260204E12, 4.0], [1.701260118E12, 8.0], [1.701260085E12, 7.0], [1.701260212E12, 2.0], [1.701260126E12, 1.0], [1.701260167E12, 16.0], [1.701260081E12, 4.0], [1.701260153E12, 4.0], [1.701260067E12, 11.0], [1.701260108E12, 8.0], [1.701260202E12, 5.0], [1.701260157E12, 2.0], [1.701260071E12, 11.0], [1.701260198E12, 1.0], [1.701260186E12, 1.0], [1.701260141E12, 2.0], [1.701260055E12, 10.0], [1.701260182E12, 4.0], [1.701260149E12, 4.0], [1.701260063E12, 11.0], [1.701260145E12, 5.0], [1.701260059E12, 10.0], [1.701260133E12, 4.0], [1.701260047E12, 3.0], [1.701260174E12, 4.0], [1.701260215E12, 3.0], [1.701260129E12, 13.0], [1.701260043E12, 3.0], [1.701260137E12, 7.0], [1.701260051E12, 8.0], [1.701260219E12, 4.0], [1.701260207E12, 3.0], [1.701260121E12, 7.0], [1.701260162E12, 5.0], [1.701260203E12, 3.0], [1.70126017E12, 10.0], [1.701260084E12, 8.0], [1.701260211E12, 4.0], [1.701260125E12, 4.0], [1.701260039E12, 1.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.701260112E12, 4.0], [1.701260111E12, 4.0], [1.701260116E12, 1.0], [1.7012602E12, 1.0], [1.701260186E12, 6.0], [1.701260185E12, 3.0], [1.701260142E12, 6.0], [1.701260141E12, 1.0], [1.701260184E12, 2.0], [1.701260182E12, 1.0], [1.701260105E12, 7.0], [1.701260104E12, 31.0], [1.701260103E12, 14.0], [1.701260146E12, 9.0], [1.701260187E12, 4.0], [1.701260176E12, 1.0], [1.701260131E12, 1.0], [1.701260172E12, 3.0], [1.701260171E12, 6.0], [1.701260223E12, 76.0], [1.701260137E12, 6.0], [1.70126018E12, 1.0], [1.701260179E12, 1.0], [1.701260222E12, 14.0], [1.701260136E12, 2.0], [1.701260135E12, 5.0], [1.701260178E12, 3.0], [1.701260177E12, 5.0], [1.701260165E12, 5.0], [1.701260164E12, 14.0], [1.701260206E12, 3.0], [1.701260077E12, 12.0], [1.701260205E12, 1.0], [1.701260076E12, 9.0], [1.701260203E12, 1.0], [1.701260168E12, 1.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.701260223E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

