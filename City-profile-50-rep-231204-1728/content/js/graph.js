/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "maxY": 2766.0, "series": [{"data": [[0.0, 41.0], [0.1, 41.0], [0.2, 42.0], [0.3, 42.0], [0.4, 42.0], [0.5, 42.0], [0.6, 42.0], [0.7, 42.0], [0.8, 42.0], [0.9, 42.0], [1.0, 42.0], [1.1, 42.0], [1.2, 42.0], [1.3, 43.0], [1.4, 43.0], [1.5, 43.0], [1.6, 43.0], [1.7, 43.0], [1.8, 43.0], [1.9, 43.0], [2.0, 43.0], [2.1, 43.0], [2.2, 43.0], [2.3, 43.0], [2.4, 43.0], [2.5, 43.0], [2.6, 43.0], [2.7, 43.0], [2.8, 43.0], [2.9, 43.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 43.0], [4.2, 43.0], [4.3, 43.0], [4.4, 43.0], [4.5, 43.0], [4.6, 43.0], [4.7, 43.0], [4.8, 43.0], [4.9, 43.0], [5.0, 44.0], [5.1, 44.0], [5.2, 44.0], [5.3, 44.0], [5.4, 44.0], [5.5, 44.0], [5.6, 44.0], [5.7, 44.0], [5.8, 44.0], [5.9, 44.0], [6.0, 44.0], [6.1, 44.0], [6.2, 44.0], [6.3, 44.0], [6.4, 44.0], [6.5, 44.0], [6.6, 44.0], [6.7, 44.0], [6.8, 44.0], [6.9, 44.0], [7.0, 44.0], [7.1, 44.0], [7.2, 44.0], [7.3, 44.0], [7.4, 44.0], [7.5, 44.0], [7.6, 44.0], [7.7, 44.0], [7.8, 44.0], [7.9, 44.0], [8.0, 44.0], [8.1, 44.0], [8.2, 44.0], [8.3, 44.0], [8.4, 44.0], [8.5, 44.0], [8.6, 44.0], [8.7, 44.0], [8.8, 44.0], [8.9, 44.0], [9.0, 44.0], [9.1, 44.0], [9.2, 44.0], [9.3, 44.0], [9.4, 44.0], [9.5, 44.0], [9.6, 44.0], [9.7, 44.0], [9.8, 44.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 44.0], [10.3, 44.0], [10.4, 44.0], [10.5, 44.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 44.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 44.0], [12.2, 44.0], [12.3, 44.0], [12.4, 44.0], [12.5, 44.0], [12.6, 44.0], [12.7, 44.0], [12.8, 44.0], [12.9, 44.0], [13.0, 44.0], [13.1, 44.0], [13.2, 44.0], [13.3, 44.0], [13.4, 45.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 45.0], [14.1, 45.0], [14.2, 45.0], [14.3, 45.0], [14.4, 45.0], [14.5, 45.0], [14.6, 45.0], [14.7, 45.0], [14.8, 45.0], [14.9, 45.0], [15.0, 45.0], [15.1, 45.0], [15.2, 45.0], [15.3, 45.0], [15.4, 45.0], [15.5, 45.0], [15.6, 45.0], [15.7, 45.0], [15.8, 45.0], [15.9, 45.0], [16.0, 45.0], [16.1, 45.0], [16.2, 45.0], [16.3, 45.0], [16.4, 45.0], [16.5, 45.0], [16.6, 45.0], [16.7, 45.0], [16.8, 45.0], [16.9, 45.0], [17.0, 45.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 45.0], [17.6, 45.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 45.0], [18.4, 45.0], [18.5, 45.0], [18.6, 45.0], [18.7, 45.0], [18.8, 45.0], [18.9, 45.0], [19.0, 45.0], [19.1, 45.0], [19.2, 45.0], [19.3, 45.0], [19.4, 45.0], [19.5, 45.0], [19.6, 45.0], [19.7, 45.0], [19.8, 45.0], [19.9, 45.0], [20.0, 45.0], [20.1, 45.0], [20.2, 45.0], [20.3, 45.0], [20.4, 45.0], [20.5, 45.0], [20.6, 45.0], [20.7, 45.0], [20.8, 45.0], [20.9, 45.0], [21.0, 45.0], [21.1, 45.0], [21.2, 45.0], [21.3, 45.0], [21.4, 45.0], [21.5, 45.0], [21.6, 45.0], [21.7, 45.0], [21.8, 45.0], [21.9, 45.0], [22.0, 45.0], [22.1, 45.0], [22.2, 45.0], [22.3, 45.0], [22.4, 45.0], [22.5, 45.0], [22.6, 45.0], [22.7, 45.0], [22.8, 45.0], [22.9, 45.0], [23.0, 45.0], [23.1, 45.0], [23.2, 45.0], [23.3, 45.0], [23.4, 45.0], [23.5, 45.0], [23.6, 45.0], [23.7, 45.0], [23.8, 45.0], [23.9, 46.0], [24.0, 46.0], [24.1, 46.0], [24.2, 46.0], [24.3, 46.0], [24.4, 46.0], [24.5, 46.0], [24.6, 46.0], [24.7, 46.0], [24.8, 46.0], [24.9, 46.0], [25.0, 46.0], [25.1, 46.0], [25.2, 46.0], [25.3, 46.0], [25.4, 46.0], [25.5, 46.0], [25.6, 46.0], [25.7, 46.0], [25.8, 46.0], [25.9, 46.0], [26.0, 46.0], [26.1, 46.0], [26.2, 46.0], [26.3, 46.0], [26.4, 46.0], [26.5, 46.0], [26.6, 46.0], [26.7, 46.0], [26.8, 46.0], [26.9, 46.0], [27.0, 46.0], [27.1, 46.0], [27.2, 46.0], [27.3, 46.0], [27.4, 46.0], [27.5, 46.0], [27.6, 46.0], [27.7, 46.0], [27.8, 46.0], [27.9, 46.0], [28.0, 46.0], [28.1, 46.0], [28.2, 46.0], [28.3, 46.0], [28.4, 46.0], [28.5, 46.0], [28.6, 46.0], [28.7, 46.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 46.0], [29.5, 46.0], [29.6, 46.0], [29.7, 46.0], [29.8, 46.0], [29.9, 46.0], [30.0, 46.0], [30.1, 46.0], [30.2, 47.0], [30.3, 47.0], [30.4, 47.0], [30.5, 47.0], [30.6, 47.0], [30.7, 47.0], [30.8, 47.0], [30.9, 47.0], [31.0, 47.0], [31.1, 47.0], [31.2, 47.0], [31.3, 47.0], [31.4, 47.0], [31.5, 47.0], [31.6, 47.0], [31.7, 47.0], [31.8, 47.0], [31.9, 47.0], [32.0, 47.0], [32.1, 47.0], [32.2, 47.0], [32.3, 47.0], [32.4, 47.0], [32.5, 48.0], [32.6, 48.0], [32.7, 48.0], [32.8, 48.0], [32.9, 48.0], [33.0, 48.0], [33.1, 48.0], [33.2, 49.0], [33.3, 49.0], [33.4, 49.0], [33.5, 50.0], [33.6, 50.0], [33.7, 51.0], [33.8, 53.0], [33.9, 58.0], [34.0, 63.0], [34.1, 64.0], [34.2, 65.0], [34.3, 65.0], [34.4, 66.0], [34.5, 68.0], [34.6, 84.0], [34.7, 109.0], [34.8, 113.0], [34.9, 114.0], [35.0, 114.0], [35.1, 115.0], [35.2, 115.0], [35.3, 116.0], [35.4, 116.0], [35.5, 116.0], [35.6, 117.0], [35.7, 117.0], [35.8, 118.0], [35.9, 118.0], [36.0, 118.0], [36.1, 118.0], [36.2, 119.0], [36.3, 119.0], [36.4, 119.0], [36.5, 120.0], [36.6, 120.0], [36.7, 120.0], [36.8, 120.0], [36.9, 121.0], [37.0, 121.0], [37.1, 121.0], [37.2, 121.0], [37.3, 122.0], [37.4, 122.0], [37.5, 122.0], [37.6, 123.0], [37.7, 123.0], [37.8, 123.0], [37.9, 124.0], [38.0, 124.0], [38.1, 124.0], [38.2, 125.0], [38.3, 125.0], [38.4, 126.0], [38.5, 126.0], [38.6, 126.0], [38.7, 127.0], [38.8, 127.0], [38.9, 127.0], [39.0, 128.0], [39.1, 128.0], [39.2, 129.0], [39.3, 129.0], [39.4, 130.0], [39.5, 130.0], [39.6, 131.0], [39.7, 131.0], [39.8, 132.0], [39.9, 132.0], [40.0, 133.0], [40.1, 134.0], [40.2, 134.0], [40.3, 135.0], [40.4, 135.0], [40.5, 136.0], [40.6, 137.0], [40.7, 138.0], [40.8, 139.0], [40.9, 140.0], [41.0, 141.0], [41.1, 142.0], [41.2, 143.0], [41.3, 144.0], [41.4, 145.0], [41.5, 147.0], [41.6, 148.0], [41.7, 150.0], [41.8, 151.0], [41.9, 153.0], [42.0, 155.0], [42.1, 156.0], [42.2, 158.0], [42.3, 159.0], [42.4, 161.0], [42.5, 163.0], [42.6, 164.0], [42.7, 166.0], [42.8, 167.0], [42.9, 168.0], [43.0, 169.0], [43.1, 171.0], [43.2, 172.0], [43.3, 173.0], [43.4, 174.0], [43.5, 176.0], [43.6, 177.0], [43.7, 178.0], [43.8, 179.0], [43.9, 180.0], [44.0, 181.0], [44.1, 182.0], [44.2, 183.0], [44.3, 184.0], [44.4, 185.0], [44.5, 187.0], [44.6, 189.0], [44.7, 190.0], [44.8, 191.0], [44.9, 192.0], [45.0, 193.0], [45.1, 195.0], [45.2, 196.0], [45.3, 197.0], [45.4, 197.0], [45.5, 198.0], [45.6, 199.0], [45.7, 199.0], [45.8, 200.0], [45.9, 201.0], [46.0, 201.0], [46.1, 202.0], [46.2, 202.0], [46.3, 203.0], [46.4, 203.0], [46.5, 204.0], [46.6, 205.0], [46.7, 205.0], [46.8, 206.0], [46.9, 206.0], [47.0, 207.0], [47.1, 207.0], [47.2, 208.0], [47.3, 208.0], [47.4, 209.0], [47.5, 210.0], [47.6, 211.0], [47.7, 211.0], [47.8, 212.0], [47.9, 213.0], [48.0, 214.0], [48.1, 215.0], [48.2, 216.0], [48.3, 217.0], [48.4, 218.0], [48.5, 220.0], [48.6, 221.0], [48.7, 222.0], [48.8, 222.0], [48.9, 223.0], [49.0, 224.0], [49.1, 225.0], [49.2, 226.0], [49.3, 227.0], [49.4, 228.0], [49.5, 228.0], [49.6, 229.0], [49.7, 230.0], [49.8, 230.0], [49.9, 231.0], [50.0, 232.0], [50.1, 233.0], [50.2, 234.0], [50.3, 234.0], [50.4, 235.0], [50.5, 236.0], [50.6, 237.0], [50.7, 237.0], [50.8, 238.0], [50.9, 239.0], [51.0, 240.0], [51.1, 240.0], [51.2, 241.0], [51.3, 243.0], [51.4, 244.0], [51.5, 245.0], [51.6, 246.0], [51.7, 247.0], [51.8, 249.0], [51.9, 250.0], [52.0, 251.0], [52.1, 253.0], [52.2, 254.0], [52.3, 255.0], [52.4, 257.0], [52.5, 258.0], [52.6, 259.0], [52.7, 260.0], [52.8, 262.0], [52.9, 263.0], [53.0, 264.0], [53.1, 265.0], [53.2, 266.0], [53.3, 267.0], [53.4, 268.0], [53.5, 269.0], [53.6, 270.0], [53.7, 271.0], [53.8, 272.0], [53.9, 273.0], [54.0, 274.0], [54.1, 275.0], [54.2, 276.0], [54.3, 277.0], [54.4, 278.0], [54.5, 279.0], [54.6, 280.0], [54.7, 282.0], [54.8, 284.0], [54.9, 285.0], [55.0, 287.0], [55.1, 289.0], [55.2, 291.0], [55.3, 292.0], [55.4, 293.0], [55.5, 294.0], [55.6, 295.0], [55.7, 296.0], [55.8, 296.0], [55.9, 297.0], [56.0, 298.0], [56.1, 298.0], [56.2, 299.0], [56.3, 300.0], [56.4, 300.0], [56.5, 301.0], [56.6, 301.0], [56.7, 302.0], [56.8, 303.0], [56.9, 303.0], [57.0, 304.0], [57.1, 304.0], [57.2, 305.0], [57.3, 306.0], [57.4, 307.0], [57.5, 307.0], [57.6, 308.0], [57.7, 309.0], [57.8, 311.0], [57.9, 312.0], [58.0, 313.0], [58.1, 315.0], [58.2, 317.0], [58.3, 319.0], [58.4, 321.0], [58.5, 324.0], [58.6, 325.0], [58.7, 327.0], [58.8, 329.0], [58.9, 331.0], [59.0, 332.0], [59.1, 333.0], [59.2, 335.0], [59.3, 336.0], [59.4, 338.0], [59.5, 340.0], [59.6, 341.0], [59.7, 344.0], [59.8, 346.0], [59.9, 348.0], [60.0, 351.0], [60.1, 354.0], [60.2, 357.0], [60.3, 360.0], [60.4, 362.0], [60.5, 365.0], [60.6, 366.0], [60.7, 369.0], [60.8, 371.0], [60.9, 373.0], [61.0, 374.0], [61.1, 376.0], [61.2, 380.0], [61.3, 384.0], [61.4, 387.0], [61.5, 391.0], [61.6, 393.0], [61.7, 395.0], [61.8, 397.0], [61.9, 399.0], [62.0, 400.0], [62.1, 401.0], [62.2, 403.0], [62.3, 404.0], [62.4, 406.0], [62.5, 408.0], [62.6, 411.0], [62.7, 414.0], [62.8, 418.0], [62.9, 421.0], [63.0, 425.0], [63.1, 430.0], [63.2, 433.0], [63.3, 435.0], [63.4, 438.0], [63.5, 441.0], [63.6, 446.0], [63.7, 451.0], [63.8, 458.0], [63.9, 464.0], [64.0, 470.0], [64.1, 475.0], [64.2, 481.0], [64.3, 489.0], [64.4, 496.0], [64.5, 501.0], [64.6, 506.0], [64.7, 513.0], [64.8, 523.0], [64.9, 530.0], [65.0, 538.0], [65.1, 548.0], [65.2, 559.0], [65.3, 569.0], [65.4, 578.0], [65.5, 587.0], [65.6, 599.0], [65.7, 608.0], [65.8, 623.0], [65.9, 631.0], [66.0, 645.0], [66.1, 659.0], [66.2, 673.0], [66.3, 693.0], [66.4, 711.0], [66.5, 730.0], [66.6, 753.0], [66.7, 770.0], [66.8, 807.0], [66.9, 830.0], [67.0, 857.0], [67.1, 897.0], [67.2, 921.0], [67.3, 949.0], [67.4, 996.0], [67.5, 1021.0], [67.6, 1022.0], [67.7, 1022.0], [67.8, 1022.0], [67.9, 1022.0], [68.0, 1022.0], [68.1, 1022.0], [68.2, 1022.0], [68.3, 1022.0], [68.4, 1022.0], [68.5, 1022.0], [68.6, 1023.0], [68.7, 1023.0], [68.8, 1023.0], [68.9, 1023.0], [69.0, 1023.0], [69.1, 1023.0], [69.2, 1023.0], [69.3, 1023.0], [69.4, 1023.0], [69.5, 1023.0], [69.6, 1023.0], [69.7, 1023.0], [69.8, 1023.0], [69.9, 1023.0], [70.0, 1023.0], [70.1, 1023.0], [70.2, 1023.0], [70.3, 1023.0], [70.4, 1023.0], [70.5, 1023.0], [70.6, 1023.0], [70.7, 1023.0], [70.8, 1023.0], [70.9, 1023.0], [71.0, 1023.0], [71.1, 1023.0], [71.2, 1023.0], [71.3, 1023.0], [71.4, 1023.0], [71.5, 1023.0], [71.6, 1023.0], [71.7, 1023.0], [71.8, 1023.0], [71.9, 1023.0], [72.0, 1023.0], [72.1, 1023.0], [72.2, 1023.0], [72.3, 1023.0], [72.4, 1023.0], [72.5, 1023.0], [72.6, 1023.0], [72.7, 1023.0], [72.8, 1023.0], [72.9, 1023.0], [73.0, 1023.0], [73.1, 1023.0], [73.2, 1023.0], [73.3, 1023.0], [73.4, 1023.0], [73.5, 1023.0], [73.6, 1023.0], [73.7, 1023.0], [73.8, 1023.0], [73.9, 1023.0], [74.0, 1023.0], [74.1, 1023.0], [74.2, 1024.0], [74.3, 1024.0], [74.4, 1024.0], [74.5, 1024.0], [74.6, 1024.0], [74.7, 1024.0], [74.8, 1024.0], [74.9, 1024.0], [75.0, 1024.0], [75.1, 1024.0], [75.2, 1024.0], [75.3, 1024.0], [75.4, 1024.0], [75.5, 1024.0], [75.6, 1024.0], [75.7, 1024.0], [75.8, 1024.0], [75.9, 1024.0], [76.0, 1024.0], [76.1, 1024.0], [76.2, 1024.0], [76.3, 1024.0], [76.4, 1024.0], [76.5, 1024.0], [76.6, 1024.0], [76.7, 1024.0], [76.8, 1024.0], [76.9, 1024.0], [77.0, 1024.0], [77.1, 1024.0], [77.2, 1024.0], [77.3, 1024.0], [77.4, 1024.0], [77.5, 1024.0], [77.6, 1024.0], [77.7, 1024.0], [77.8, 1024.0], [77.9, 1024.0], [78.0, 1024.0], [78.1, 1024.0], [78.2, 1024.0], [78.3, 1024.0], [78.4, 1024.0], [78.5, 1024.0], [78.6, 1024.0], [78.7, 1024.0], [78.8, 1024.0], [78.9, 1024.0], [79.0, 1024.0], [79.1, 1024.0], [79.2, 1024.0], [79.3, 1024.0], [79.4, 1024.0], [79.5, 1024.0], [79.6, 1024.0], [79.7, 1024.0], [79.8, 1024.0], [79.9, 1024.0], [80.0, 1024.0], [80.1, 1024.0], [80.2, 1024.0], [80.3, 1024.0], [80.4, 1024.0], [80.5, 1024.0], [80.6, 1024.0], [80.7, 1024.0], [80.8, 1024.0], [80.9, 1024.0], [81.0, 1024.0], [81.1, 1024.0], [81.2, 1024.0], [81.3, 1024.0], [81.4, 1024.0], [81.5, 1024.0], [81.6, 1024.0], [81.7, 1024.0], [81.8, 1024.0], [81.9, 1024.0], [82.0, 1024.0], [82.1, 1024.0], [82.2, 1024.0], [82.3, 1024.0], [82.4, 1024.0], [82.5, 1024.0], [82.6, 1024.0], [82.7, 1024.0], [82.8, 1024.0], [82.9, 1024.0], [83.0, 1024.0], [83.1, 1024.0], [83.2, 1024.0], [83.3, 1024.0], [83.4, 1024.0], [83.5, 1024.0], [83.6, 1024.0], [83.7, 1024.0], [83.8, 1024.0], [83.9, 1024.0], [84.0, 1024.0], [84.1, 1024.0], [84.2, 1024.0], [84.3, 1024.0], [84.4, 1024.0], [84.5, 1024.0], [84.6, 1024.0], [84.7, 1024.0], [84.8, 1024.0], [84.9, 1024.0], [85.0, 1024.0], [85.1, 1024.0], [85.2, 1024.0], [85.3, 1024.0], [85.4, 1024.0], [85.5, 1025.0], [85.6, 1025.0], [85.7, 1025.0], [85.8, 1025.0], [85.9, 1025.0], [86.0, 1025.0], [86.1, 1025.0], [86.2, 1025.0], [86.3, 1025.0], [86.4, 1025.0], [86.5, 1025.0], [86.6, 1025.0], [86.7, 1025.0], [86.8, 1025.0], [86.9, 1025.0], [87.0, 1025.0], [87.1, 1025.0], [87.2, 1025.0], [87.3, 1025.0], [87.4, 1025.0], [87.5, 1025.0], [87.6, 1025.0], [87.7, 1025.0], [87.8, 1025.0], [87.9, 1025.0], [88.0, 1025.0], [88.1, 1025.0], [88.2, 1025.0], [88.3, 1025.0], [88.4, 1025.0], [88.5, 1025.0], [88.6, 1025.0], [88.7, 1025.0], [88.8, 1025.0], [88.9, 1025.0], [89.0, 1025.0], [89.1, 1025.0], [89.2, 1025.0], [89.3, 1025.0], [89.4, 1025.0], [89.5, 1025.0], [89.6, 1025.0], [89.7, 1025.0], [89.8, 1025.0], [89.9, 1025.0], [90.0, 1025.0], [90.1, 1025.0], [90.2, 1025.0], [90.3, 1025.0], [90.4, 1025.0], [90.5, 1025.0], [90.6, 1025.0], [90.7, 1025.0], [90.8, 1025.0], [90.9, 1025.0], [91.0, 1025.0], [91.1, 1025.0], [91.2, 1025.0], [91.3, 1025.0], [91.4, 1025.0], [91.5, 1025.0], [91.6, 1025.0], [91.7, 1025.0], [91.8, 1025.0], [91.9, 1025.0], [92.0, 1025.0], [92.1, 1025.0], [92.2, 1025.0], [92.3, 1025.0], [92.4, 1025.0], [92.5, 1025.0], [92.6, 1025.0], [92.7, 1025.0], [92.8, 1025.0], [92.9, 1025.0], [93.0, 1025.0], [93.1, 1025.0], [93.2, 1025.0], [93.3, 1026.0], [93.4, 1026.0], [93.5, 1026.0], [93.6, 1026.0], [93.7, 1026.0], [93.8, 1026.0], [93.9, 1026.0], [94.0, 1026.0], [94.1, 1026.0], [94.2, 1026.0], [94.3, 1026.0], [94.4, 1026.0], [94.5, 1026.0], [94.6, 1026.0], [94.7, 1026.0], [94.8, 1026.0], [94.9, 1026.0], [95.0, 1026.0], [95.1, 1026.0], [95.2, 1026.0], [95.3, 1026.0], [95.4, 1026.0], [95.5, 1026.0], [95.6, 1026.0], [95.7, 1026.0], [95.8, 1026.0], [95.9, 1026.0], [96.0, 1027.0], [96.1, 1027.0], [96.2, 1027.0], [96.3, 1027.0], [96.4, 1027.0], [96.5, 1027.0], [96.6, 1027.0], [96.7, 1027.0], [96.8, 1027.0], [96.9, 1027.0], [97.0, 1027.0], [97.1, 1027.0], [97.2, 1027.0], [97.3, 1028.0], [97.4, 1028.0], [97.5, 1028.0], [97.6, 1028.0], [97.7, 1028.0], [97.8, 1028.0], [97.9, 1028.0], [98.0, 1029.0], [98.1, 1029.0], [98.2, 1029.0], [98.3, 1030.0], [98.4, 1031.0], [98.5, 1032.0], [98.6, 1034.0], [98.7, 1037.0], [98.8, 1042.0], [98.9, 1043.0], [99.0, 1044.0], [99.1, 1045.0], [99.2, 1054.0], [99.3, 1072.0], [99.4, 1089.0], [99.5, 1113.0], [99.6, 1136.0], [99.7, 1153.0], [99.8, 1180.0], [99.9, 1262.0], [100.0, 2766.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 10754.0, "series": [{"data": [[2100.0, 1.0], [0.0, 10754.0], [600.0, 220.0], [700.0, 139.0], [2700.0, 1.0], [200.0, 3263.0], [800.0, 113.0], [900.0, 85.0], [1000.0, 9935.0], [1100.0, 120.0], [300.0, 1772.0], [1200.0, 26.0], [1300.0, 10.0], [1400.0, 5.0], [100.0, 3437.0], [400.0, 773.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 4.0], [500.0, 352.0], [2000.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 21135.0, "series": [{"data": [[0.0, 8992.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 877.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 21135.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.701700085E12, "maxY": 100.0, "series": [{"data": [[1.701700195E12, 100.0], [1.701700535E12, 100.0], [1.70170024E12, 100.0], [1.70170015E12, 100.0], [1.70170058E12, 100.0], [1.70170033E12, 100.0], [1.701700625E12, 100.0], [1.701700285E12, 100.0], [1.70170067E12, 100.0], [1.701700355E12, 100.0], [1.701700695E12, 100.0], [1.7017004E12, 100.0], [1.70170031E12, 100.0], [1.70170074E12, 100.0], [1.701700445E12, 100.0], [1.701700105E12, 100.0], [1.70170049E12, 100.0], [1.7017006E12, 100.0], [1.70170026E12, 100.0], [1.701700555E12, 100.0], [1.701700645E12, 100.0], [1.701700215E12, 100.0], [1.70170035E12, 100.0], [1.70170069E12, 100.0], [1.701700305E12, 100.0], [1.701700735E12, 100.0], [1.70170042E12, 100.0], [1.701700715E12, 100.0], [1.701700375E12, 100.0], [1.70170017E12, 100.0], [1.701700465E12, 100.0], [1.701700125E12, 100.0], [1.70170051E12, 100.0], [1.70170011E12, 100.0], [1.70170045E12, 100.0], [1.701700495E12, 100.0], [1.70170054E12, 100.0], [1.701700245E12, 100.0], [1.701700155E12, 100.0], [1.701700585E12, 100.0], [1.7017002E12, 100.0], [1.70170027E12, 100.0], [1.70170061E12, 100.0], [1.701700225E12, 100.0], [1.701700655E12, 100.0], [1.7017007E12, 100.0], [1.701700405E12, 100.0], [1.701700315E12, 100.0], [1.701700745E12, 100.0], [1.70170036E12, 100.0], [1.701700175E12, 100.0], [1.70170047E12, 100.0], [1.70170056E12, 100.0], [1.70170013E12, 100.0], [1.701700515E12, 100.0], [1.701700605E12, 100.0], [1.701700265E12, 100.0], [1.70170022E12, 100.0], [1.70170065E12, 100.0], [1.701700335E12, 100.0], [1.70170063E12, 100.0], [1.70170072E12, 100.0], [1.70170029E12, 100.0], [1.701700675E12, 100.0], [1.701700425E12, 100.0], [1.701700085E12, 100.0], [1.70170038E12, 100.0], [1.70170041E12, 100.0], [1.701700705E12, 100.0], [1.701700365E12, 100.0], [1.701700115E12, 100.0], [1.701700455E12, 100.0], [1.70170016E12, 100.0], [1.7017005E12, 100.0], [1.701700525E12, 100.0], [1.701700185E12, 100.0], [1.70170014E12, 100.0], [1.70170057E12, 100.0], [1.701700275E12, 100.0], [1.701700615E12, 100.0], [1.70170032E12, 100.0], [1.70170023E12, 100.0], [1.70170066E12, 100.0], [1.70170043E12, 100.0], [1.70170009E12, 100.0], [1.701700385E12, 100.0], [1.70170052E12, 100.0], [1.70170018E12, 100.0], [1.701700475E12, 100.0], [1.701700565E12, 100.0], [1.701700135E12, 100.0], [1.70170025E12, 100.0], [1.701700545E12, 100.0], [1.701700205E12, 100.0], [1.70170059E12, 100.0], [1.70170068E12, 100.0], [1.70170034E12, 100.0], [1.701700635E12, 100.0], [1.701700725E12, 100.0], [1.701700295E12, 100.0], [1.70170062E12, 100.0], [1.701700325E12, 100.0], [1.701700235E12, 100.0], [1.701700665E12, 100.0], [1.70170028E12, 100.0], [1.701700415E12, 100.0], [1.70170071E12, 100.0], [1.70170037E12, 100.0], [1.70170044E12, 100.0], [1.7017001E12, 100.0], [1.701700395E12, 100.0], [1.701700485E12, 100.0], [1.70170019E12, 100.0], [1.70170053E12, 100.0], [1.701700145E12, 100.0], [1.701700575E12, 100.0], [1.701700685E12, 100.0], [1.701700345E12, 100.0], [1.7017003E12, 100.0], [1.70170073E12, 100.0], [1.701700435E12, 100.0], [1.701700095E12, 100.0], [1.70170039E12, 100.0], [1.70170048E12, 100.0], [1.70170046E12, 100.0], [1.701700165E12, 100.0], [1.701700505E12, 100.0], [1.70170012E12, 100.0], [1.701700255E12, 100.0], [1.70170055E12, 100.0], [1.70170064E12, 100.0], [1.70170021E12, 100.0], [1.701700595E12, 100.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701700745E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 442.93477980527547, "minX": 100.0, "maxY": 442.93477980527547, "series": [{"data": [[100.0, 442.93477980527547]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[100.0, 442.93477980527547]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.701700085E12, "maxY": 7106695.6, "series": [{"data": [[1.701700195E12, 6880199.8], [1.701700535E12, 13908.0], [1.70170024E12, 6578421.0], [1.70170015E12, 6937385.6], [1.70170058E12, 14193.0], [1.70170033E12, 409591.8], [1.701700625E12, 17181.0], [1.701700285E12, 4715144.8], [1.70170067E12, 107274.0], [1.701700355E12, 85397.4], [1.701700695E12, 14193.0], [1.7017004E12, 120315.6], [1.70170031E12, 2459749.6], [1.70170074E12, 2223.0], [1.701700445E12, 118411.8], [1.701700105E12, 4360348.2], [1.70170049E12, 42943.8], [1.7017006E12, 15024.0], [1.70170026E12, 7026087.8], [1.701700555E12, 14079.0], [1.701700645E12, 17112.0], [1.701700215E12, 7021792.0], [1.70170035E12, 127611.6], [1.70170069E12, 14079.0], [1.701700305E12, 4772335.4], [1.701700735E12, 5301.0], [1.70170042E12, 129105.0], [1.701700715E12, 129663.6], [1.701700375E12, 14022.0], [1.70170017E12, 6852436.8], [1.701700465E12, 114661.2], [1.701700125E12, 6852444.6], [1.70170051E12, 23313.0], [1.70170011E12, 5662742.2], [1.70170045E12, 71512.2], [1.701700495E12, 126004.2], [1.70170054E12, 12654.0], [1.701700245E12, 6045865.0], [1.701700155E12, 6908546.4], [1.701700585E12, 14079.0], [1.7017002E12, 7022827.0], [1.70170027E12, 4896756.4], [1.70170061E12, 17250.0], [1.701700225E12, 6795805.4], [1.701700655E12, 130199.4], [1.7017007E12, 12711.0], [1.701700405E12, 131806.8], [1.701700315E12, 4607734.2], [1.701700745E12, 627.0], [1.70170036E12, 22777.2], [1.701700175E12, 6766939.8], [1.70170047E12, 115390.8], [1.70170056E12, 15994.2], [1.70170013E12, 6993554.0], [1.701700515E12, 132342.6], [1.701700605E12, 17250.0], [1.701700265E12, 6682047.4], [1.70170022E12, 6824113.8], [1.70170065E12, 47202.6], [1.701700335E12, 131806.8], [1.70170063E12, 17250.0], [1.70170072E12, 120019.2], [1.70170029E12, 3669481.0], [1.701700675E12, 134485.8], [1.701700425E12, 130484.4], [1.701700085E12, 113255.2], [1.70170038E12, 14193.0], [1.70170041E12, 132342.6], [1.701700705E12, 118411.8], [1.701700365E12, 124761.6], [1.701700115E12, 6540425.4], [1.701700455E12, 14079.0], [1.70170016E12, 7106695.6], [1.7017005E12, 54526.2], [1.701700525E12, 14136.0], [1.701700185E12, 6993430.0], [1.70170014E12, 6710348.4], [1.70170057E12, 131271.0], [1.701700275E12, 4857225.6], [1.701700615E12, 17043.0], [1.70170032E12, 5202196.4], [1.70170023E12, 7078399.6], [1.70170066E12, 133414.2], [1.70170043E12, 130199.4], [1.70170009E12, 509651.6], [1.701700385E12, 14193.0], [1.70170052E12, 100719.0], [1.70170018E12, 6880739.6], [1.701700475E12, 14193.0], [1.701700565E12, 128592.0], [1.701700135E12, 6908553.4], [1.70170025E12, 6771277.6], [1.701700545E12, 117876.0], [1.701700205E12, 6882880.0], [1.70170059E12, 14307.0], [1.70170068E12, 106350.6], [1.70170034E12, 132878.4], [1.701700635E12, 17181.0], [1.701700725E12, 91450.8], [1.701700295E12, 5510836.4], [1.70170062E12, 17319.0], [1.701700325E12, 2992288.4], [1.701700235E12, 6432052.4], [1.701700665E12, 132878.4], [1.70170028E12, 4716740.0], [1.701700415E12, 133414.2], [1.70170071E12, 132342.6], [1.70170037E12, 74442.0], [1.70170044E12, 12597.0], [1.7017001E12, 3199442.2], [1.701700395E12, 118947.6], [1.701700485E12, 14136.0], [1.70170019E12, 6966813.4], [1.70170053E12, 14079.0], [1.701700145E12, 6936809.8], [1.701700575E12, 40926.0], [1.701700685E12, 14079.0], [1.701700345E12, 133414.2], [1.7017003E12, 4660084.0], [1.70170073E12, 7638.0], [1.701700435E12, 85876.2], [1.701700095E12, 2123515.8], [1.70170039E12, 14316.0], [1.70170048E12, 14136.0], [1.70170046E12, 12768.0], [1.701700165E12, 6908554.6], [1.701700505E12, 14079.0], [1.70170012E12, 6795301.2], [1.701700255E12, 6321523.2], [1.70170055E12, 72469.8], [1.70170064E12, 17112.0], [1.70170021E12, 6710334.4], [1.701700595E12, 14193.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.701700195E12, 6415.2], [1.701700535E12, 6441.6], [1.70170024E12, 6124.8], [1.70170015E12, 6468.0], [1.70170058E12, 6573.6], [1.70170033E12, 264.0], [1.701700625E12, 6573.6], [1.701700285E12, 4356.0], [1.70170067E12, 1293.6], [1.701700355E12, 4065.6], [1.701700695E12, 6573.6], [1.7017004E12, 633.6], [1.70170031E12, 2217.6], [1.70170074E12, 1029.6], [1.701700445E12, 0.0], [1.701700105E12, 4065.6], [1.70170049E12, 3511.2], [1.7017006E12, 6547.2], [1.70170026E12, 6547.2], [1.701700555E12, 6520.8], [1.701700645E12, 6547.2], [1.701700215E12, 6547.2], [1.70170035E12, 290.4], [1.70170069E12, 6520.8], [1.701700305E12, 4408.8], [1.701700735E12, 2455.2], [1.70170042E12, 237.6], [1.701700715E12, 0.0], [1.701700375E12, 6494.4], [1.70170017E12, 6388.8], [1.701700465E12, 0.0], [1.701700125E12, 6388.8], [1.70170051E12, 4593.6], [1.70170011E12, 5280.0], [1.70170045E12, 4831.2], [1.701700495E12, 290.4], [1.70170054E12, 5860.8], [1.701700245E12, 5623.2], [1.701700155E12, 6441.6], [1.701700585E12, 6520.8], [1.7017002E12, 6547.2], [1.70170027E12, 4540.8], [1.70170061E12, 6600.0], [1.701700225E12, 6336.0], [1.701700655E12, 0.0], [1.7017007E12, 5887.2], [1.701700405E12, 0.0], [1.701700315E12, 4250.4], [1.701700745E12, 290.4], [1.70170036E12, 4593.6], [1.701700175E12, 6309.6], [1.70170047E12, 2323.2], [1.70170056E12, 5174.4], [1.70170013E12, 6520.8], [1.701700515E12, 0.0], [1.701700605E12, 6600.0], [1.701700265E12, 6230.4], [1.70170022E12, 6362.4], [1.70170065E12, 3300.0], [1.701700335E12, 0.0], [1.70170063E12, 6600.0], [1.70170072E12, 0.0], [1.70170029E12, 3379.2], [1.701700675E12, 0.0], [1.701700425E12, 132.0], [1.701700085E12, 105.6], [1.70170038E12, 6573.6], [1.70170041E12, 0.0], [1.701700705E12, 0.0], [1.701700365E12, 211.2], [1.701700115E12, 6098.4], [1.701700455E12, 6520.8], [1.70170016E12, 6626.4], [1.7017005E12, 5649.6], [1.701700525E12, 6547.2], [1.701700185E12, 6520.8], [1.70170014E12, 6256.8], [1.70170057E12, 0.0], [1.701700275E12, 4488.0], [1.701700615E12, 6520.8], [1.70170032E12, 4831.2], [1.70170023E12, 6600.0], [1.70170066E12, 0.0], [1.70170043E12, 0.0], [1.70170009E12, 475.2], [1.701700385E12, 6573.6], [1.70170052E12, 3220.8], [1.70170018E12, 6415.2], [1.701700475E12, 6573.6], [1.701700565E12, 0.0], [1.701700135E12, 6441.6], [1.70170025E12, 6309.6], [1.701700545E12, 0.0], [1.701700205E12, 6415.2], [1.70170059E12, 6626.4], [1.70170068E12, 2851.2], [1.70170034E12, 0.0], [1.701700635E12, 6573.6], [1.701700725E12, 1161.6], [1.701700295E12, 5095.2], [1.70170062E12, 6626.4], [1.701700325E12, 2719.2], [1.701700235E12, 5992.8], [1.701700665E12, 0.0], [1.70170028E12, 4356.0], [1.701700415E12, 0.0], [1.70170071E12, 0.0], [1.70170037E12, 4699.2], [1.70170044E12, 5834.4], [1.7017001E12, 2983.2], [1.701700395E12, 0.0], [1.701700485E12, 6547.2], [1.70170019E12, 6494.4], [1.70170053E12, 6520.8], [1.701700145E12, 6468.0], [1.701700575E12, 6547.2], [1.701700685E12, 6520.8], [1.701700345E12, 0.0], [1.7017003E12, 4303.2], [1.70170073E12, 3537.6], [1.701700435E12, 4039.2], [1.701700095E12, 1980.0], [1.70170039E12, 5808.0], [1.70170048E12, 6547.2], [1.70170046E12, 5913.6], [1.701700165E12, 6441.6], [1.701700505E12, 6520.8], [1.70170012E12, 6336.0], [1.701700255E12, 5887.2], [1.70170055E12, 4778.4], [1.70170064E12, 6547.2], [1.70170021E12, 6256.8], [1.701700595E12, 6573.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701700745E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 44.51405622489961, "minX": 1.701700085E12, "maxY": 1034.6296296296296, "series": [{"data": [[1.701700195E12, 289.8724279835391], [1.701700535E12, 60.4016393442623], [1.70170024E12, 351.5400000000002], [1.70170015E12, 296.6341463414636], [1.70170058E12, 45.27710843373493], [1.70170033E12, 1028.3739837398375], [1.701700625E12, 44.51405622489961], [1.701700285E12, 533.1178861788618], [1.70170067E12, 894.5204918032791], [1.701700355E12, 523.8451178451178], [1.701700695E12, 45.305220883534155], [1.7017004E12, 942.0325203252031], [1.70170031E12, 738.0974576271184], [1.70170074E12, 45.79487179487179], [1.701700445E12, 1025.570135746606], [1.701700105E12, 192.64285714285717], [1.70170049E12, 370.3869346733666], [1.7017006E12, 45.24193548387097], [1.70170026E12, 247.84765625000006], [1.701700555E12, 45.08906882591092], [1.701700645E12, 45.4758064516129], [1.701700215E12, 206.1169354838711], [1.70170035E12, 991.177419354839], [1.70170069E12, 45.30769230769229], [1.701700305E12, 471.9076305220883], [1.701700735E12, 46.43010752688171], [1.70170042E12, 993.2730923694779], [1.701700715E12, 1030.9132231404947], [1.701700375E12, 45.227642276422735], [1.70170017E12, 348.68312757201625], [1.701700465E12, 1024.7196261682247], [1.701700125E12, 250.44855967078183], [1.70170051E12, 168.33165829145727], [1.70170011E12, 165.20999999999998], [1.70170045E12, 444.95959595959596], [1.701700495E12, 980.5224489795914], [1.70170054E12, 45.202702702702695], [1.701700245E12, 344.9543568464729], [1.701700155E12, 280.97131147540995], [1.701700585E12, 45.51417004048583], [1.7017002E12, 266.6359999999999], [1.70170027E12, 492.5045045045046], [1.70170061E12, 44.736], [1.701700225E12, 279.48132780082994], [1.701700655E12, 1034.6296296296296], [1.7017007E12, 45.4304932735426], [1.701700405E12, 1025.1016260162612], [1.701700315E12, 715.2885375494074], [1.701700745E12, 47.09090909090909], [1.70170036E12, 164.28787878787878], [1.701700175E12, 262.3012552301257], [1.70170047E12, 819.8163265306115], [1.70170056E12, 88.67317073170734], [1.70170013E12, 252.825910931174], [1.701700515E12, 1025.3481781376527], [1.701700605E12, 45.61600000000001], [1.701700265E12, 207.49576271186442], [1.70170022E12, 287.2644628099173], [1.70170065E12, 403.1979695431471], [1.701700335E12, 1024.7154471544711], [1.70170063E12, 44.97199999999999], [1.70170072E12, 1027.0535714285713], [1.70170029E12, 632.1361502347415], [1.701700675E12, 1025.219123505976], [1.701700425E12, 1004.697580645161], [1.701700085E12, 125.75], [1.70170038E12, 45.94377510040165], [1.70170041E12, 1023.9919028340086], [1.701700705E12, 1025.2941176470595], [1.701700365E12, 991.9666666666669], [1.701700115E12, 157.3419913419913], [1.701700455E12, 45.425101214574916], [1.70170016E12, 323.23505976095623], [1.7017005E12, 312.25255972696255], [1.701700525E12, 45.54838709677421], [1.701700185E12, 321.99190283400765], [1.70170014E12, 240.379746835443], [1.70170057E12, 1024.3387755102044], [1.701700275E12, 619.5357142857142], [1.701700615E12, 44.85020242914975], [1.70170032E12, 693.7387387387388], [1.70170023E12, 265.9959999999999], [1.70170066E12, 1024.7670682730925], [1.70170043E12, 1024.6995884773664], [1.70170009E12, 142.7222222222222], [1.701700385E12, 45.13253012048191], [1.70170052E12, 683.2053872053875], [1.70170018E12, 322.4139344262295], [1.701700475E12, 60.759036144578346], [1.701700565E12, 1025.1083333333338], [1.701700135E12, 211.92622950819668], [1.70170025E12, 286.1902834008099], [1.701700545E12, 1025.1636363636355], [1.701700205E12, 231.49193548387106], [1.70170059E12, 45.35856573705182], [1.70170068E12, 667.5491525423733], [1.70170034E12, 1024.395161290322], [1.701700635E12, 45.03614457831326], [1.701700725E12, 891.7714285714285], [1.701700295E12, 626.9571428571434], [1.70170062E12, 44.83266932270915], [1.701700325E12, 1031.0408163265304], [1.701700235E12, 294.31355932203405], [1.701700665E12, 1024.8750000000014], [1.70170028E12, 602.080321285141], [1.701700415E12, 1031.642570281124], [1.70170071E12, 1024.5263157894738], [1.70170037E12, 523.2449664429528], [1.70170044E12, 45.135746606334834], [1.7017001E12, 149.9469026548673], [1.701700395E12, 1024.7477477477482], [1.701700485E12, 45.56451612903227], [1.70170019E12, 316.7349397590362], [1.70170053E12, 45.73684210526312], [1.701700145E12, 283.66122448979587], [1.701700575E12, 288.00000000000006], [1.701700685E12, 45.68825910931173], [1.701700345E12, 1024.14859437751], [1.7017003E12, 495.56680161943325], [1.70170073E12, 44.81343283582091], [1.701700435E12, 596.5151515151516], [1.701700095E12, 120.38666666666663], [1.70170039E12, 44.954545454545446], [1.70170048E12, 45.50403225806453], [1.70170046E12, 45.35267857142851], [1.701700165E12, 314.26639344262327], [1.701700505E12, 45.396761133603256], [1.70170012E12, 257.18333333333334], [1.701700255E12, 291.0717299578061], [1.70170055E12, 440.06734006734], [1.70170064E12, 44.96774193548386], [1.70170021E12, 200.18565400843883], [1.701700595E12, 59.75100401606426]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.701700745E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.701700085E12, "maxY": 381.4684684684686, "series": [{"data": [[1.701700195E12, 205.2181069958848], [1.701700535E12, 60.38524590163934], [1.70170024E12, 197.16400000000007], [1.70170015E12, 210.24390243902437], [1.70170058E12, 45.265060240963834], [1.70170033E12, 34.195121951219505], [1.701700625E12, 44.510040160642546], [1.701700285E12, 137.86585365853668], [1.70170067E12, 75.50819672131146], [1.701700355E12, 23.693602693602685], [1.701700695E12, 45.305220883534155], [1.7017004E12, 17.764227642276424], [1.70170031E12, 52.47033898305082], [1.70170074E12, 45.79487179487179], [1.701700445E12, 0.0], [1.701700105E12, 120.54545454545455], [1.70170049E12, 30.175879396984918], [1.7017006E12, 45.229838709677416], [1.70170026E12, 142.5703124999999], [1.701700555E12, 45.08906882591092], [1.701700645E12, 45.4758064516129], [1.701700215E12, 132.80645161290326], [1.70170035E12, 11.943548387096756], [1.70170069E12, 45.29554655870443], [1.701700305E12, 86.3614457831325], [1.701700735E12, 46.43010752688171], [1.70170042E12, 6.056224899598393], [1.701700715E12, 0.0], [1.701700375E12, 45.21951219512198], [1.70170017E12, 257.6172839506173], [1.701700465E12, 0.0], [1.701700125E12, 166.1399176954732], [1.70170051E12, 39.50251256281407], [1.70170011E12, 94.98499999999997], [1.70170045E12, 51.774410774410754], [1.701700495E12, 2.048979591836734], [1.70170054E12, 45.193693693693696], [1.701700245E12, 157.38589211618267], [1.701700155E12, 195.05327868852447], [1.701700585E12, 45.50202429149798], [1.7017002E12, 179.30400000000006], [1.70170027E12, 191.3423423423424], [1.70170061E12, 44.728], [1.701700225E12, 192.15352697095435], [1.701700655E12, 0.0], [1.7017007E12, 45.4304932735426], [1.701700405E12, 0.0], [1.701700315E12, 251.46640316205546], [1.701700745E12, 47.09090909090909], [1.70170036E12, 40.13131313131318], [1.701700175E12, 179.020920502092], [1.70170047E12, 101.76530612244902], [1.70170056E12, 43.68780487804879], [1.70170013E12, 176.39676113360318], [1.701700515E12, 0.0], [1.701700605E12, 45.612], [1.701700265E12, 135.4364406779661], [1.70170022E12, 184.8305785123965], [1.70170065E12, 28.502538071066013], [1.701700335E12, 0.0], [1.70170063E12, 44.96799999999999], [1.70170072E12, 0.0], [1.70170029E12, 130.46009389671366], [1.701700675E12, 0.0], [1.701700425E12, 0.9354838709677424], [1.701700085E12, 65.5], [1.70170038E12, 45.94377510040165], [1.70170041E12, 0.0], [1.701700705E12, 0.0], [1.701700365E12, 1.4875000000000012], [1.701700115E12, 86.18614718614714], [1.701700455E12, 45.41700404858297], [1.70170016E12, 216.70119521912343], [1.7017005E12, 36.06143344709898], [1.701700525E12, 45.54838709677421], [1.701700185E12, 230.4817813765182], [1.70170014E12, 166.5274261603375], [1.70170057E12, 0.0], [1.701700275E12, 213.05952380952382], [1.701700615E12, 44.84615384615381], [1.70170032E12, 381.4684684684686], [1.70170023E12, 187.5200000000001], [1.70170066E12, 0.0], [1.70170043E12, 0.0], [1.70170009E12, 77.83333333333333], [1.701700385E12, 45.11244979919681], [1.70170052E12, 79.5656565656566], [1.70170018E12, 231.1475409836067], [1.701700475E12, 60.75502008032125], [1.701700565E12, 0.0], [1.701700135E12, 138.91393442622956], [1.70170025E12, 176.4048582995952], [1.701700545E12, 0.0], [1.701700205E12, 136.86290322580646], [1.70170059E12, 45.34262948207172], [1.70170068E12, 18.033898305084747], [1.70170034E12, 0.0], [1.701700635E12, 45.03212851405621], [1.701700725E12, 82.45714285714286], [1.701700295E12, 138.5714285714285], [1.70170062E12, 44.83266932270915], [1.701700325E12, 326.5224489795919], [1.701700235E12, 177.58474576271198], [1.701700665E12, 0.0], [1.70170028E12, 182.15662650602403], [1.701700415E12, 0.0], [1.70170071E12, 0.0], [1.70170037E12, 110.90268456375836], [1.70170044E12, 45.1131221719457], [1.7017001E12, 77.1769911504425], [1.701700395E12, 0.0], [1.701700485E12, 45.55645161290322], [1.70170019E12, 221.54618473895573], [1.70170053E12, 45.73684210526312], [1.701700145E12, 197.49795918367343], [1.701700575E12, 116.03691275167795], [1.701700685E12, 45.68421052631578], [1.701700345E12, 0.0], [1.7017003E12, 92.53441295546563], [1.70170073E12, 44.798507462686565], [1.701700435E12, 99.90572390572393], [1.701700095E12, 57.08000000000001], [1.70170039E12, 44.94090909090908], [1.70170048E12, 45.48387096774197], [1.70170046E12, 45.339285714285715], [1.701700165E12, 227.41803278688528], [1.701700505E12, 45.396761133603256], [1.70170012E12, 177.49583333333317], [1.701700255E12, 156.27848101265823], [1.70170055E12, 39.64646464646462], [1.70170064E12, 44.96774193548386], [1.70170021E12, 127.37130801687763], [1.701700595E12, 59.73895582329317]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.701700745E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 23.095238095238106, "minX": 1.701700085E12, "maxY": 52.86785714285714, "series": [{"data": [[1.701700195E12, 24.995884773662546], [1.701700535E12, 28.852459016393464], [1.70170024E12, 25.068000000000005], [1.70170015E12, 25.036585365853657], [1.70170058E12, 23.43373493975903], [1.70170033E12, 24.016260162601625], [1.701700625E12, 23.594377510040164], [1.701700285E12, 26.983739837398396], [1.70170067E12, 23.77049180327868], [1.701700355E12, 30.296296296296312], [1.701700695E12, 23.49799196787148], [1.7017004E12, 23.378048780487813], [1.70170031E12, 24.097457627118647], [1.70170074E12, 24.051282051282058], [1.701700445E12, 24.809954751131237], [1.701700105E12, 24.084415584415577], [1.70170049E12, 23.889447236180914], [1.7017006E12, 24.004032258064516], [1.70170026E12, 25.378906249999993], [1.701700555E12, 23.469635627530376], [1.701700645E12, 23.854838709677406], [1.701700215E12, 24.991935483870964], [1.70170035E12, 23.794354838709676], [1.70170069E12, 23.5991902834008], [1.701700305E12, 24.36546184738955], [1.701700735E12, 24.35483870967743], [1.70170042E12, 23.369477911646587], [1.701700715E12, 29.97933884297521], [1.701700375E12, 23.495934959349597], [1.70170017E12, 25.144032921810705], [1.701700465E12, 23.74766355140186], [1.701700125E12, 25.4320987654321], [1.70170051E12, 23.698492462311545], [1.70170011E12, 24.555], [1.70170045E12, 23.3973063973064], [1.701700495E12, 23.551020408163268], [1.70170054E12, 23.52252252252252], [1.701700245E12, 24.643153526970952], [1.701700155E12, 25.59016393442624], [1.701700585E12, 23.63157894736841], [1.7017002E12, 25.372], [1.70170027E12, 24.513513513513512], [1.70170061E12, 23.599999999999984], [1.701700225E12, 25.340248962655604], [1.701700655E12, 33.6090534979424], [1.7017007E12, 23.623318385650215], [1.701700405E12, 24.17479674796749], [1.701700315E12, 24.849802371541518], [1.701700745E12, 23.636363636363637], [1.70170036E12, 23.65151515151515], [1.701700175E12, 25.184100418410036], [1.70170047E12, 23.795918367346925], [1.70170056E12, 23.873170731707315], [1.70170013E12, 25.105263157894743], [1.701700515E12, 24.485829959514174], [1.701700605E12, 24.160000000000007], [1.701700265E12, 24.919491525423712], [1.70170022E12, 34.24793388429753], [1.70170065E12, 23.68527918781727], [1.701700335E12, 23.776422764227636], [1.70170063E12, 23.736000000000004], [1.70170072E12, 26.290178571428573], [1.70170029E12, 36.63849765258217], [1.701700675E12, 24.310756972111555], [1.701700425E12, 23.616935483870964], [1.701700085E12, 30.25], [1.70170038E12, 23.943775100401616], [1.70170041E12, 23.194331983805668], [1.701700705E12, 24.416289592760183], [1.701700365E12, 23.862499999999997], [1.701700115E12, 25.65800865800866], [1.701700455E12, 23.57085020242914], [1.70170016E12, 34.262948207171306], [1.7017005E12, 23.525597269624576], [1.701700525E12, 23.495967741935488], [1.701700185E12, 25.485829959514163], [1.70170014E12, 25.38396624472573], [1.70170057E12, 23.448979591836746], [1.701700275E12, 24.714285714285715], [1.701700615E12, 23.65182186234819], [1.70170032E12, 27.198198198198202], [1.70170023E12, 25.492000000000008], [1.70170066E12, 23.75502008032129], [1.70170043E12, 23.761316872427976], [1.70170009E12, 26.166666666666664], [1.701700385E12, 23.42971887550201], [1.70170052E12, 23.531986531986522], [1.70170018E12, 25.459016393442628], [1.701700475E12, 27.626506024096397], [1.701700565E12, 24.200000000000014], [1.701700135E12, 25.389344262295076], [1.70170025E12, 25.157894736842113], [1.701700545E12, 24.13636363636363], [1.701700205E12, 25.201612903225808], [1.70170059E12, 23.621513944223096], [1.70170068E12, 23.827118644067806], [1.70170034E12, 23.395161290322594], [1.701700635E12, 23.64658634538153], [1.701700725E12, 23.095238095238106], [1.701700295E12, 52.86785714285714], [1.70170062E12, 23.693227091633453], [1.701700325E12, 24.88163265306122], [1.701700235E12, 24.80084745762712], [1.701700665E12, 23.99193548387097], [1.70170028E12, 30.730923694779122], [1.701700415E12, 30.706827309236942], [1.70170071E12, 23.599190283400805], [1.70170037E12, 23.644295302013422], [1.70170044E12, 23.51131221719456], [1.7017001E12, 28.69026548672566], [1.701700395E12, 24.045045045045043], [1.701700485E12, 23.8467741935484], [1.70170019E12, 25.341365461847378], [1.70170053E12, 23.4493927125506], [1.701700145E12, 25.21632653061224], [1.701700575E12, 23.879194630872494], [1.701700685E12, 23.58299595141701], [1.701700345E12, 23.22088353413655], [1.7017003E12, 24.5587044534413], [1.70170073E12, 23.23134328358209], [1.701700435E12, 23.521885521885523], [1.701700095E12, 23.626666666666658], [1.70170039E12, 23.56818181818183], [1.70170048E12, 23.649193548387093], [1.70170046E12, 23.830357142857153], [1.701700165E12, 25.102459016393436], [1.701700505E12, 23.639676113360327], [1.70170012E12, 25.175000000000004], [1.701700255E12, 24.654008438818558], [1.70170055E12, 24.037037037037045], [1.70170064E12, 23.57661290322578], [1.70170021E12, 24.827004219409282], [1.701700595E12, 28.839357429718884]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.701700745E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 108.0, "minX": 1.701700085E12, "maxY": 2766.0, "series": [{"data": [[1.701700195E12, 938.0], [1.70170024E12, 792.0], [1.70170015E12, 704.0], [1.701700115E12, 501.0], [1.70170033E12, 1446.0], [1.70170016E12, 949.0], [1.701700285E12, 700.0], [1.701700185E12, 750.0], [1.70170031E12, 830.0], [1.70170014E12, 608.0], [1.701700275E12, 1234.0], [1.701700105E12, 1172.0], [1.70170032E12, 1227.0], [1.70170023E12, 730.0], [1.70170026E12, 665.0], [1.70170009E12, 276.0], [1.701700215E12, 590.0], [1.70170018E12, 775.0], [1.701700305E12, 507.0], [1.701700135E12, 672.0], [1.70170025E12, 630.0], [1.701700205E12, 747.0], [1.70170017E12, 1105.0], [1.701700295E12, 2766.0], [1.701700125E12, 691.0], [1.70170011E12, 579.0], [1.701700325E12, 1473.0], [1.701700235E12, 1051.0], [1.70170028E12, 1033.0], [1.701700245E12, 605.0], [1.701700155E12, 643.0], [1.7017002E12, 700.0], [1.70170027E12, 955.0], [1.7017001E12, 422.0], [1.701700225E12, 729.0], [1.70170019E12, 840.0], [1.701700315E12, 1307.0], [1.701700145E12, 1121.0], [1.701700175E12, 600.0], [1.7017003E12, 803.0], [1.70170013E12, 632.0], [1.701700265E12, 539.0], [1.701700095E12, 171.0], [1.70170022E12, 1106.0], [1.701700165E12, 749.0], [1.70170029E12, 1706.0], [1.70170012E12, 770.0], [1.701700255E12, 635.0], [1.701700085E12, 151.0], [1.70170021E12, 530.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.701700195E12, 112.0], [1.70170024E12, 115.0], [1.70170015E12, 120.0], [1.701700115E12, 109.0], [1.70170033E12, 871.0], [1.70170016E12, 114.0], [1.701700285E12, 115.0], [1.701700185E12, 117.0], [1.70170031E12, 111.0], [1.70170014E12, 113.0], [1.701700275E12, 118.0], [1.701700105E12, 113.0], [1.70170032E12, 117.0], [1.70170023E12, 112.0], [1.70170026E12, 113.0], [1.70170009E12, 111.0], [1.701700215E12, 113.0], [1.70170018E12, 118.0], [1.701700305E12, 114.0], [1.701700135E12, 111.0], [1.70170025E12, 113.0], [1.701700205E12, 114.0], [1.70170017E12, 119.0], [1.701700295E12, 113.0], [1.701700125E12, 113.0], [1.70170011E12, 109.0], [1.701700325E12, 596.0], [1.701700235E12, 112.0], [1.70170028E12, 116.0], [1.701700245E12, 114.0], [1.701700155E12, 116.0], [1.7017002E12, 115.0], [1.70170027E12, 114.0], [1.7017001E12, 112.0], [1.701700225E12, 114.0], [1.70170019E12, 126.0], [1.701700315E12, 114.0], [1.701700145E12, 112.0], [1.701700175E12, 113.0], [1.7017003E12, 112.0], [1.70170013E12, 114.0], [1.701700265E12, 110.0], [1.701700095E12, 108.0], [1.70170022E12, 113.0], [1.701700165E12, 114.0], [1.70170029E12, 116.0], [1.70170012E12, 113.0], [1.701700255E12, 114.0], [1.701700085E12, 115.0], [1.70170021E12, 112.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.701700195E12, 472.4], [1.70170024E12, 465.2000000000001], [1.70170015E12, 425.6000000000001], [1.701700115E12, 225.20000000000005], [1.70170033E12, 1427.6000000000001], [1.70170016E12, 607.8], [1.701700285E12, 407.6], [1.701700185E12, 559.2], [1.70170031E12, 294.5], [1.70170014E12, 400.20000000000005], [1.701700275E12, 668.7], [1.701700105E12, 266.0], [1.70170032E12, 1054.0], [1.70170023E12, 425.0], [1.70170026E12, 317.1], [1.70170009E12, 269.7], [1.701700215E12, 305.0], [1.70170018E12, 501.6], [1.701700305E12, 299.6], [1.701700135E12, 343.5], [1.70170025E12, 371.0], [1.701700205E12, 348.6], [1.70170017E12, 533.7], [1.701700295E12, 1199.1999999999996], [1.701700125E12, 416.5000000000001], [1.70170011E12, 248.0], [1.701700325E12, 1262.6000000000001], [1.701700235E12, 393.20000000000005], [1.70170028E12, 634.0], [1.701700245E12, 373.2], [1.701700155E12, 429.5], [1.7017002E12, 406.1], [1.70170027E12, 555.7000000000002], [1.7017001E12, 259.6], [1.701700225E12, 473.30000000000007], [1.70170019E12, 430.0], [1.701700315E12, 991.6], [1.701700145E12, 496.4], [1.701700175E12, 397.0], [1.7017003E12, 409.19999999999993], [1.70170013E12, 379.40000000000003], [1.701700265E12, 328.90000000000003], [1.701700095E12, 125.0], [1.70170022E12, 497.2000000000007], [1.701700165E12, 443.5], [1.70170029E12, 716.0000000000001], [1.70170012E12, 402.9], [1.701700255E12, 360.99999999999994], [1.701700085E12, 151.0], [1.70170021E12, 307.20000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.701700195E12, 794.6800000000001], [1.70170024E12, 722.7299999999998], [1.70170015E12, 629.4799999999999], [1.701700115E12, 409.80000000000024], [1.70170033E12, 1446.0], [1.70170016E12, 902.1999999999996], [1.701700285E12, 694.0600000000001], [1.701700185E12, 677.8000000000002], [1.70170031E12, 830.0], [1.70170014E12, 584.1200000000001], [1.701700275E12, 1124.6599999999987], [1.701700105E12, 1121.399999999999], [1.70170032E12, 1227.0], [1.70170023E12, 686.6000000000004], [1.70170026E12, 443.5899999999999], [1.70170009E12, 276.0], [1.701700215E12, 456.1399999999999], [1.70170018E12, 666.8000000000001], [1.701700305E12, 450.55999999999943], [1.701700135E12, 503.1], [1.70170025E12, 609.5999999999999], [1.701700205E12, 590.4000000000003], [1.70170017E12, 830.0999999999998], [1.701700295E12, 2217.0400000000013], [1.701700125E12, 633.5399999999998], [1.70170011E12, 466.5500000000004], [1.701700325E12, 1470.9999999999998], [1.701700235E12, 954.28], [1.70170028E12, 903.6400000000007], [1.701700245E12, 597.2799999999993], [1.701700155E12, 614.7500000000002], [1.7017002E12, 571.1499999999994], [1.70170027E12, 833.0900000000017], [1.7017001E12, 421.02], [1.701700225E12, 710.1800000000001], [1.70170019E12, 723.4000000000001], [1.701700315E12, 1279.1], [1.701700145E12, 815.78], [1.701700175E12, 552.9999999999999], [1.7017003E12, 753.7199999999989], [1.70170013E12, 552.7200000000004], [1.701700265E12, 489.5499999999996], [1.701700095E12, 171.0], [1.70170022E12, 844.919999999998], [1.701700165E12, 693.7500000000002], [1.70170029E12, 1692.6599999999996], [1.70170012E12, 692.21], [1.701700255E12, 604.4799999999996], [1.701700085E12, 151.0], [1.70170021E12, 473.62000000000023]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.701700195E12, 270.0], [1.70170024E12, 274.0], [1.70170015E12, 280.0], [1.701700115E12, 133.0], [1.70170033E12, 1090.0], [1.70170016E12, 284.0], [1.701700285E12, 272.0], [1.701700185E12, 280.0], [1.70170031E12, 201.0], [1.70170014E12, 220.0], [1.701700275E12, 372.5], [1.701700105E12, 125.0], [1.70170032E12, 629.0], [1.70170023E12, 244.5], [1.70170026E12, 214.0], [1.70170009E12, 126.5], [1.701700215E12, 201.0], [1.70170018E12, 299.0], [1.701700305E12, 192.0], [1.701700135E12, 192.0], [1.70170025E12, 246.0], [1.701700205E12, 198.0], [1.70170017E12, 311.5], [1.701700295E12, 221.0], [1.701700125E12, 223.0], [1.70170011E12, 137.0], [1.701700325E12, 1051.0], [1.701700235E12, 235.0], [1.70170028E12, 365.0], [1.701700245E12, 239.0], [1.701700155E12, 275.5], [1.7017002E12, 237.0], [1.70170027E12, 304.0], [1.7017001E12, 122.0], [1.701700225E12, 243.0], [1.70170019E12, 291.0], [1.701700315E12, 430.0], [1.701700145E12, 239.0], [1.701700175E12, 239.0], [1.7017003E12, 164.0], [1.70170013E12, 238.0], [1.701700265E12, 197.5], [1.701700095E12, 118.0], [1.70170022E12, 245.0], [1.701700165E12, 298.0], [1.70170029E12, 275.0], [1.70170012E12, 235.0], [1.701700255E12, 224.0], [1.701700085E12, 118.5], [1.70170021E12, 178.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.701700195E12, 579.4], [1.70170024E12, 571.4499999999999], [1.70170015E12, 494.8999999999998], [1.701700115E12, 278.79999999999995], [1.70170033E12, 1446.0], [1.70170016E12, 732.9999999999997], [1.701700285E12, 495.4], [1.701700185E12, 608.1999999999999], [1.70170031E12, 361.25], [1.70170014E12, 458.2], [1.701700275E12, 782.5499999999997], [1.701700105E12, 631.5], [1.70170032E12, 1156.8], [1.70170023E12, 482.44999999999976], [1.70170026E12, 357.19999999999993], [1.70170009E12, 276.0], [1.701700215E12, 329.54999999999995], [1.70170018E12, 560.5999999999999], [1.701700305E12, 350.9999999999999], [1.701700135E12, 407.0], [1.70170025E12, 412.0], [1.701700205E12, 416.0], [1.70170017E12, 611.0999999999999], [1.701700295E12, 1861.199999999999], [1.701700125E12, 474.8499999999999], [1.70170011E12, 275.74999999999994], [1.701700325E12, 1326.4], [1.701700235E12, 496.79999999999995], [1.70170028E12, 708.7], [1.701700245E12, 429.59999999999997], [1.701700155E12, 467.5], [1.7017002E12, 452.8999999999997], [1.70170027E12, 633.4499999999999], [1.7017001E12, 385.4], [1.701700225E12, 578.5999999999997], [1.70170019E12, 527.0], [1.701700315E12, 1098.7000000000003], [1.701700145E12, 587.1999999999997], [1.701700175E12, 442.0], [1.7017003E12, 618.5999999999998], [1.70170013E12, 442.5999999999999], [1.701700265E12, 372.0], [1.701700095E12, 130.20000000000005], [1.70170022E12, 649.5999999999997], [1.701700165E12, 497.75], [1.70170029E12, 877.8499999999999], [1.70170012E12, 462.34999999999985], [1.701700255E12, 399.4], [1.701700085E12, 151.0], [1.70170021E12, 351.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.70170033E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 43.5, "minX": 1.0, "maxY": 1122.5, "series": [{"data": [[32.0, 182.5], [33.0, 143.0], [35.0, 351.0], [34.0, 432.0], [37.0, 147.0], [36.0, 198.5], [38.0, 149.5], [39.0, 237.0], [41.0, 121.0], [43.0, 277.5], [42.0, 268.0], [45.0, 223.0], [44.0, 200.0], [47.0, 211.0], [46.0, 270.0], [3.0, 116.0], [48.0, 222.0], [49.0, 263.0], [51.0, 244.0], [50.0, 272.0], [53.0, 244.0], [52.0, 259.0], [55.0, 278.0], [54.0, 252.0], [57.0, 301.0], [56.0, 192.5], [58.0, 288.0], [68.0, 358.0], [78.0, 740.5], [8.0, 142.0], [10.0, 122.0], [12.0, 119.0], [14.0, 120.0], [1.0, 151.0], [16.0, 117.0], [17.0, 122.0], [20.0, 120.5], [22.0, 120.0], [24.0, 121.0], [26.0, 124.5], [27.0, 125.0], [30.0, 312.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 43.5], [3.0, 45.0], [4.0, 45.0], [5.0, 46.0], [7.0, 45.0], [9.0, 45.0], [10.0, 46.0], [14.0, 1024.0], [15.0, 45.0], [16.0, 45.0], [19.0, 1025.0], [21.0, 1024.0], [22.0, 45.0], [23.0, 534.0], [24.0, 45.5], [25.0, 1024.0], [26.0, 45.0], [27.0, 49.0], [29.0, 44.0], [31.0, 45.0], [33.0, 1024.0], [34.0, 1024.0], [36.0, 1024.0], [38.0, 658.5], [39.0, 1023.0], [40.0, 1024.0], [41.0, 45.0], [43.0, 1026.0], [42.0, 1024.0], [45.0, 1025.0], [44.0, 1025.0], [46.0, 1024.0], [47.0, 1024.0], [49.0, 46.0], [48.0, 1023.0], [51.0, 1023.0], [50.0, 45.0], [52.0, 1024.0], [53.0, 1025.0], [55.0, 1025.0], [54.0, 1024.0], [56.0, 1024.5], [57.0, 246.0], [58.0, 1024.0], [60.0, 1022.0], [64.0, 897.0], [66.0, 45.0], [65.0, 45.0], [75.0, 662.0], [78.0, 1122.5], [82.0, 1023.0], [80.0, 1023.0], [84.0, 47.0], [94.0, 47.0], [93.0, 47.0], [99.0, 706.5], [98.0, 404.0], [97.0, 482.0], [100.0, 1021.0], [1.0, 51.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 333.0, "series": [{"data": [[32.0, 119.0], [33.0, 64.0], [35.0, 256.0], [34.0, 297.0], [37.0, 83.0], [36.0, 120.5], [38.0, 76.0], [39.0, 159.0], [41.0, 55.0], [43.0, 188.0], [42.0, 195.5], [45.0, 144.0], [44.0, 123.0], [47.0, 139.0], [46.0, 197.0], [3.0, 56.0], [48.0, 143.0], [49.0, 179.0], [51.0, 166.0], [50.0, 191.5], [53.0, 161.0], [52.0, 176.0], [55.0, 205.0], [54.0, 171.0], [57.0, 231.0], [56.0, 112.0], [58.0, 203.0], [68.0, 251.5], [78.0, 333.0], [8.0, 72.5], [10.0, 55.5], [12.0, 56.5], [14.0, 55.0], [1.0, 95.0], [16.0, 54.0], [17.0, 56.0], [20.0, 56.5], [22.0, 56.5], [24.0, 55.5], [26.0, 58.0], [27.0, 61.0], [30.0, 215.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 43.5], [3.0, 45.0], [4.0, 45.0], [5.0, 46.0], [7.0, 45.0], [9.0, 45.0], [10.0, 46.0], [14.0, 0.0], [15.0, 45.0], [16.0, 45.0], [19.0, 0.0], [21.0, 0.0], [22.0, 45.0], [23.0, 21.0], [24.0, 45.0], [25.0, 0.0], [26.0, 45.0], [27.0, 42.0], [29.0, 44.0], [31.0, 45.0], [33.0, 0.0], [34.0, 0.0], [36.0, 0.0], [38.0, 21.5], [39.0, 0.0], [40.0, 0.0], [41.0, 45.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [46.0, 0.0], [47.0, 0.0], [49.0, 44.0], [48.0, 0.0], [51.0, 0.0], [50.0, 44.0], [52.0, 0.0], [53.0, 0.0], [55.0, 0.0], [54.0, 0.0], [56.0, 0.0], [57.0, 43.0], [58.0, 0.0], [60.0, 0.0], [64.0, 43.0], [66.0, 44.0], [65.0, 45.0], [75.0, 45.0], [78.0, 0.0], [82.0, 0.0], [80.0, 0.0], [84.0, 44.0], [94.0, 43.0], [93.0, 44.0], [99.0, 46.5], [98.0, 45.0], [97.0, 45.0], [100.0, 23.0], [1.0, 51.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 100.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.701700085E12, "maxY": 50.4, "series": [{"data": [[1.701700195E12, 48.2], [1.701700535E12, 48.8], [1.70170024E12, 48.6], [1.70170015E12, 49.2], [1.70170058E12, 49.8], [1.70170033E12, 49.0], [1.701700625E12, 50.0], [1.701700285E12, 48.8], [1.70170067E12, 49.6], [1.701700355E12, 49.6], [1.701700695E12, 49.8], [1.7017004E12, 49.2], [1.70170031E12, 49.4], [1.70170074E12, 7.8], [1.701700445E12, 49.4], [1.701700105E12, 31.2], [1.70170049E12, 48.2], [1.7017006E12, 49.6], [1.70170026E12, 48.6], [1.701700555E12, 49.4], [1.701700645E12, 49.6], [1.701700215E12, 48.6], [1.70170035E12, 49.6], [1.70170069E12, 49.6], [1.701700305E12, 49.8], [1.701700735E12, 18.4], [1.70170042E12, 49.6], [1.701700715E12, 49.0], [1.701700375E12, 49.0], [1.70170017E12, 48.4], [1.701700465E12, 48.8], [1.701700125E12, 48.6], [1.70170051E12, 49.4], [1.70170011E12, 40.0], [1.70170045E12, 49.6], [1.701700495E12, 49.4], [1.70170054E12, 49.0], [1.701700245E12, 49.0], [1.701700155E12, 49.2], [1.701700585E12, 49.2], [1.7017002E12, 49.4], [1.70170027E12, 49.4], [1.70170061E12, 50.0], [1.701700225E12, 49.2], [1.701700655E12, 49.8], [1.7017007E12, 49.0], [1.701700405E12, 49.4], [1.701700315E12, 49.0], [1.701700745E12, 2.2], [1.70170036E12, 48.0], [1.701700175E12, 48.6], [1.70170047E12, 49.2], [1.70170056E12, 49.8], [1.70170013E12, 48.8], [1.701700515E12, 49.4], [1.701700605E12, 50.0], [1.701700265E12, 48.2], [1.70170022E12, 49.2], [1.70170065E12, 49.0], [1.701700335E12, 49.2], [1.70170063E12, 49.8], [1.70170072E12, 41.6], [1.70170029E12, 49.4], [1.701700675E12, 49.0], [1.701700425E12, 49.6], [1.701700085E12, 0.8], [1.70170038E12, 49.8], [1.70170041E12, 49.4], [1.701700705E12, 49.6], [1.701700365E12, 49.4], [1.701700115E12, 47.0], [1.701700455E12, 49.4], [1.70170016E12, 49.4], [1.7017005E12, 50.0], [1.701700525E12, 49.6], [1.701700185E12, 48.8], [1.70170014E12, 49.2], [1.70170057E12, 49.2], [1.701700275E12, 48.8], [1.701700615E12, 49.6], [1.70170032E12, 48.8], [1.70170023E12, 48.8], [1.70170066E12, 48.6], [1.70170043E12, 49.0], [1.70170009E12, 3.8], [1.701700385E12, 49.8], [1.70170052E12, 49.8], [1.70170018E12, 49.2], [1.701700475E12, 49.8], [1.701700565E12, 49.0], [1.701700135E12, 48.4], [1.70170025E12, 48.4], [1.701700545E12, 49.2], [1.701700205E12, 49.6], [1.70170059E12, 50.4], [1.70170068E12, 49.6], [1.70170034E12, 49.6], [1.701700635E12, 49.8], [1.701700725E12, 34.4], [1.701700295E12, 48.8], [1.70170062E12, 50.0], [1.701700325E12, 49.6], [1.701700235E12, 48.8], [1.701700665E12, 49.8], [1.70170028E12, 49.4], [1.701700415E12, 49.6], [1.70170071E12, 49.6], [1.70170037E12, 50.0], [1.70170044E12, 48.8], [1.7017001E12, 22.6], [1.701700395E12, 49.0], [1.701700485E12, 49.6], [1.70170019E12, 49.4], [1.70170053E12, 49.4], [1.701700145E12, 48.6], [1.701700575E12, 49.6], [1.701700685E12, 49.2], [1.701700345E12, 49.8], [1.7017003E12, 49.6], [1.70170073E12, 26.8], [1.701700435E12, 49.6], [1.701700095E12, 15.6], [1.70170039E12, 49.0], [1.70170048E12, 49.4], [1.70170046E12, 48.6], [1.701700165E12, 48.8], [1.701700505E12, 49.2], [1.70170012E12, 48.8], [1.701700255E12, 49.0], [1.70170055E12, 49.6], [1.70170064E12, 49.6], [1.70170021E12, 48.4], [1.701700595E12, 49.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701700745E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701700085E12, "maxY": 50.2, "series": [{"data": [[1.701700195E12, 48.6], [1.70170024E12, 46.4], [1.70170015E12, 49.0], [1.701700115E12, 46.2], [1.70170033E12, 2.0], [1.70170016E12, 50.2], [1.701700285E12, 33.0], [1.701700185E12, 49.4], [1.70170031E12, 16.8], [1.70170014E12, 47.4], [1.701700275E12, 34.0], [1.701700105E12, 30.8], [1.70170032E12, 36.6], [1.70170023E12, 50.0], [1.70170026E12, 49.6], [1.70170009E12, 3.6], [1.701700215E12, 49.6], [1.70170018E12, 48.6], [1.701700305E12, 33.4], [1.701700135E12, 48.8], [1.70170025E12, 47.8], [1.701700205E12, 48.6], [1.70170017E12, 48.4], [1.701700295E12, 38.6], [1.701700125E12, 48.4], [1.70170011E12, 40.0], [1.701700325E12, 20.6], [1.701700235E12, 45.4], [1.70170028E12, 33.0], [1.701700245E12, 42.6], [1.701700155E12, 48.8], [1.7017002E12, 49.6], [1.70170027E12, 34.4], [1.7017001E12, 22.6], [1.701700225E12, 48.0], [1.70170019E12, 49.2], [1.701700315E12, 32.2], [1.701700145E12, 49.0], [1.701700175E12, 47.8], [1.7017003E12, 32.6], [1.70170013E12, 49.4], [1.701700265E12, 47.2], [1.701700095E12, 15.0], [1.70170022E12, 48.2], [1.701700165E12, 48.8], [1.70170029E12, 25.6], [1.70170012E12, 48.0], [1.701700255E12, 44.6], [1.701700085E12, 0.8], [1.70170021E12, 47.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70170041E12, 49.4], [1.701700705E12, 44.2], [1.70170024E12, 3.6], [1.70170015E12, 0.2], [1.701700365E12, 46.4], [1.70170033E12, 47.2], [1.7017005E12, 15.8], [1.701700285E12, 16.2], [1.70170067E12, 39.0], [1.701700355E12, 28.6], [1.7017004E12, 44.4], [1.70170031E12, 30.4], [1.70170057E12, 49.0], [1.701700275E12, 16.4], [1.701700445E12, 44.2], [1.70170032E12, 7.8], [1.70170049E12, 13.2], [1.70170066E12, 49.8], [1.70170043E12, 48.6], [1.70170026E12, 1.6], [1.70170035E12, 47.4], [1.70170052E12, 35.0], [1.70170018E12, 0.2], [1.701700565E12, 48.0], [1.701700305E12, 16.4], [1.70170042E12, 48.0], [1.70170025E12, 1.6], [1.701700545E12, 44.0], [1.701700715E12, 48.4], [1.701700205E12, 1.0], [1.70170068E12, 37.4], [1.70170034E12, 49.6], [1.70170017E12, 0.2], [1.701700465E12, 42.8], [1.701700725E12, 33.2], [1.701700295E12, 17.0], [1.701700125E12, 0.2], [1.70170051E12, 5.0], [1.70170045E12, 22.8], [1.701700325E12, 28.4], [1.701700235E12, 1.8], [1.701700495E12, 46.8], [1.701700665E12, 49.6], [1.70170028E12, 16.8], [1.701700415E12, 49.8], [1.701700245E12, 5.6], [1.70170071E12, 49.4], [1.70170037E12, 24.0], [1.7017002E12, 0.4], [1.70170027E12, 10.0], [1.701700395E12, 44.4], [1.701700225E12, 0.2], [1.701700655E12, 48.6], [1.70170019E12, 0.6], [1.701700405E12, 49.2], [1.701700315E12, 18.4], [1.701700575E12, 10.0], [1.70170036E12, 4.8], [1.701700345E12, 49.8], [1.70170047E12, 41.2], [1.70170056E12, 1.8], [1.7017003E12, 16.8], [1.701700515E12, 49.4], [1.701700435E12, 28.8], [1.70170022E12, 0.2], [1.70170065E12, 14.4], [1.701700335E12, 49.2], [1.70170072E12, 44.8], [1.70170029E12, 17.0], [1.701700675E12, 50.2], [1.701700425E12, 48.6], [1.701700255E12, 2.8], [1.70170055E12, 23.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.701700535E12, 48.8], [1.70170058E12, 49.8], [1.701700365E12, 1.6], [1.701700455E12, 49.4], [1.7017005E12, 42.8], [1.70170067E12, 9.8], [1.701700355E12, 30.8], [1.701700525E12, 49.6], [1.701700695E12, 49.8], [1.7017004E12, 4.8], [1.70170074E12, 7.8], [1.70170049E12, 26.6], [1.7017006E12, 34.8], [1.701700555E12, 49.4], [1.701700385E12, 49.8], [1.70170035E12, 2.2], [1.70170052E12, 24.4], [1.70170069E12, 49.4], [1.701700475E12, 49.8], [1.701700735E12, 18.6], [1.70170042E12, 1.8], [1.701700375E12, 49.2], [1.70170059E12, 50.2], [1.70170068E12, 21.6], [1.701700725E12, 8.8], [1.70170051E12, 34.8], [1.70170045E12, 36.6], [1.701700495E12, 2.2], [1.70170054E12, 44.4], [1.70170037E12, 35.6], [1.701700585E12, 49.4], [1.70170044E12, 44.2], [1.701700485E12, 49.6], [1.70170053E12, 49.4], [1.7017007E12, 44.6], [1.701700575E12, 49.6], [1.701700745E12, 2.2], [1.70170036E12, 34.8], [1.701700685E12, 49.4], [1.70170047E12, 17.6], [1.70170056E12, 39.2], [1.70170073E12, 26.8], [1.701700435E12, 30.6], [1.70170039E12, 14.4], [1.70170048E12, 49.6], [1.70170046E12, 44.8], [1.701700505E12, 49.4], [1.701700425E12, 1.0], [1.70170055E12, 36.2], [1.70170038E12, 49.8], [1.701700595E12, 49.8]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.7017006E12, 14.8], [1.70170061E12, 50.0], [1.70170062E12, 50.2], [1.70170063E12, 50.0], [1.701700645E12, 49.6], [1.701700605E12, 50.0], [1.701700615E12, 49.4], [1.701700625E12, 49.8], [1.701700635E12, 49.8], [1.70170039E12, 29.6], [1.70170064E12, 49.6], [1.70170065E12, 25.0]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.701700295E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.701700745E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701700085E12, "maxY": 59.6, "series": [{"data": [[1.701700195E12, 48.6], [1.70170024E12, 46.4], [1.70170015E12, 49.0], [1.701700115E12, 46.2], [1.70170033E12, 2.0], [1.70170016E12, 50.2], [1.701700285E12, 33.0], [1.701700185E12, 49.4], [1.70170031E12, 16.8], [1.70170014E12, 47.4], [1.701700275E12, 34.0], [1.701700105E12, 30.8], [1.70170032E12, 36.6], [1.70170023E12, 50.0], [1.70170026E12, 49.6], [1.70170009E12, 3.6], [1.701700215E12, 49.6], [1.70170018E12, 48.6], [1.701700305E12, 33.4], [1.701700135E12, 48.8], [1.70170025E12, 47.8], [1.701700205E12, 48.6], [1.70170017E12, 48.4], [1.701700295E12, 38.6], [1.701700125E12, 48.4], [1.70170011E12, 40.0], [1.701700325E12, 20.6], [1.701700235E12, 45.4], [1.70170028E12, 33.0], [1.701700245E12, 42.6], [1.701700155E12, 48.8], [1.7017002E12, 49.6], [1.70170027E12, 34.4], [1.7017001E12, 22.6], [1.701700225E12, 48.0], [1.70170019E12, 49.2], [1.701700315E12, 32.2], [1.701700145E12, 49.0], [1.701700175E12, 47.8], [1.7017003E12, 32.6], [1.70170013E12, 49.4], [1.701700265E12, 47.2], [1.701700095E12, 15.0], [1.70170022E12, 48.2], [1.701700165E12, 48.8], [1.70170029E12, 25.6], [1.70170012E12, 48.0], [1.701700255E12, 44.6], [1.701700085E12, 0.8], [1.70170021E12, 47.4]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.701700535E12, 48.8], [1.70170024E12, 3.6], [1.70170015E12, 0.2], [1.70170058E12, 49.8], [1.70170033E12, 47.2], [1.701700625E12, 49.8], [1.701700285E12, 16.2], [1.70170067E12, 48.8], [1.701700355E12, 59.4], [1.701700695E12, 49.8], [1.7017004E12, 49.2], [1.70170031E12, 30.4], [1.70170074E12, 7.8], [1.701700445E12, 44.2], [1.70170049E12, 39.8], [1.7017006E12, 49.6], [1.70170026E12, 1.6], [1.701700555E12, 49.4], [1.701700645E12, 49.6], [1.70170035E12, 49.6], [1.70170069E12, 49.4], [1.701700305E12, 16.4], [1.701700735E12, 18.6], [1.70170042E12, 49.8], [1.701700715E12, 48.4], [1.701700375E12, 49.2], [1.70170017E12, 0.2], [1.701700465E12, 42.8], [1.701700125E12, 0.2], [1.70170051E12, 39.8], [1.70170045E12, 59.4], [1.701700495E12, 49.0], [1.70170054E12, 44.4], [1.701700245E12, 5.6], [1.701700585E12, 49.4], [1.7017002E12, 0.4], [1.70170027E12, 10.0], [1.70170061E12, 50.0], [1.701700225E12, 0.2], [1.701700655E12, 48.6], [1.7017007E12, 44.6], [1.701700405E12, 49.2], [1.701700315E12, 18.4], [1.701700745E12, 2.2], [1.70170036E12, 39.6], [1.70170047E12, 58.8], [1.70170056E12, 41.0], [1.701700515E12, 49.4], [1.701700605E12, 50.0], [1.70170022E12, 0.2], [1.70170065E12, 39.4], [1.701700335E12, 49.2], [1.70170063E12, 50.0], [1.70170072E12, 44.8], [1.70170029E12, 17.0], [1.701700675E12, 50.2], [1.701700425E12, 49.6], [1.70170038E12, 49.8], [1.70170041E12, 49.4], [1.701700705E12, 44.2], [1.701700365E12, 48.0], [1.701700455E12, 49.4], [1.7017005E12, 58.6], [1.701700525E12, 49.6], [1.70170057E12, 49.0], [1.701700275E12, 16.4], [1.701700615E12, 49.4], [1.70170032E12, 7.8], [1.70170066E12, 49.8], [1.70170043E12, 48.6], [1.701700385E12, 49.8], [1.70170052E12, 59.4], [1.70170018E12, 0.2], [1.701700475E12, 49.8], [1.701700565E12, 48.0], [1.70170025E12, 1.6], [1.701700545E12, 44.0], [1.701700205E12, 1.0], [1.70170059E12, 50.2], [1.70170068E12, 59.0], [1.70170034E12, 49.6], [1.701700635E12, 49.8], [1.701700725E12, 42.0], [1.701700295E12, 17.4], [1.70170062E12, 50.2], [1.701700325E12, 28.4], [1.701700235E12, 1.8], [1.701700665E12, 49.6], [1.70170028E12, 16.8], [1.701700415E12, 49.8], [1.70170071E12, 49.4], [1.70170037E12, 59.6], [1.70170044E12, 44.2], [1.701700395E12, 44.4], [1.701700485E12, 49.6], [1.70170019E12, 0.6], [1.70170053E12, 49.4], [1.701700575E12, 59.6], [1.701700685E12, 49.4], [1.701700345E12, 49.8], [1.7017003E12, 16.8], [1.70170073E12, 26.8], [1.701700435E12, 59.4], [1.70170039E12, 44.0], [1.70170048E12, 49.6], [1.70170046E12, 44.8], [1.701700505E12, 49.4], [1.701700255E12, 2.8], [1.70170055E12, 59.4], [1.70170064E12, 49.6], [1.701700595E12, 49.8]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.701700745E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.701700085E12, "maxY": 59.6, "series": [{"data": [[1.701700195E12, 48.6], [1.70170024E12, 46.4], [1.70170015E12, 49.0], [1.701700115E12, 46.2], [1.70170033E12, 2.0], [1.70170016E12, 50.2], [1.701700285E12, 33.0], [1.701700185E12, 49.4], [1.70170031E12, 16.8], [1.70170014E12, 47.4], [1.701700275E12, 34.0], [1.701700105E12, 30.8], [1.70170032E12, 36.6], [1.70170023E12, 50.0], [1.70170026E12, 49.6], [1.70170009E12, 3.6], [1.701700215E12, 49.6], [1.70170018E12, 48.6], [1.701700305E12, 33.4], [1.701700135E12, 48.8], [1.70170025E12, 47.8], [1.701700205E12, 48.6], [1.70170017E12, 48.4], [1.701700295E12, 38.6], [1.701700125E12, 48.4], [1.70170011E12, 40.0], [1.701700325E12, 20.6], [1.701700235E12, 45.4], [1.70170028E12, 33.0], [1.701700245E12, 42.6], [1.701700155E12, 48.8], [1.7017002E12, 49.6], [1.70170027E12, 34.4], [1.7017001E12, 22.6], [1.701700225E12, 48.0], [1.70170019E12, 49.2], [1.701700315E12, 32.2], [1.701700145E12, 49.0], [1.701700175E12, 47.8], [1.7017003E12, 32.6], [1.70170013E12, 49.4], [1.701700265E12, 47.2], [1.701700095E12, 15.0], [1.70170022E12, 48.2], [1.701700165E12, 48.8], [1.70170029E12, 25.6], [1.70170012E12, 48.0], [1.701700255E12, 44.6], [1.701700085E12, 0.8], [1.70170021E12, 47.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.701700535E12, 48.8], [1.70170024E12, 3.6], [1.70170015E12, 0.2], [1.70170058E12, 49.8], [1.70170033E12, 47.2], [1.701700625E12, 49.8], [1.701700285E12, 16.2], [1.70170067E12, 48.8], [1.701700355E12, 59.4], [1.701700695E12, 49.8], [1.7017004E12, 49.2], [1.70170031E12, 30.4], [1.70170074E12, 7.8], [1.701700445E12, 44.2], [1.70170049E12, 39.8], [1.7017006E12, 49.6], [1.70170026E12, 1.6], [1.701700555E12, 49.4], [1.701700645E12, 49.6], [1.70170035E12, 49.6], [1.70170069E12, 49.4], [1.701700305E12, 16.4], [1.701700735E12, 18.6], [1.70170042E12, 49.8], [1.701700715E12, 48.4], [1.701700375E12, 49.2], [1.70170017E12, 0.2], [1.701700465E12, 42.8], [1.701700125E12, 0.2], [1.70170051E12, 39.8], [1.70170045E12, 59.4], [1.701700495E12, 49.0], [1.70170054E12, 44.4], [1.701700245E12, 5.6], [1.701700585E12, 49.4], [1.7017002E12, 0.4], [1.70170027E12, 10.0], [1.70170061E12, 50.0], [1.701700225E12, 0.2], [1.701700655E12, 48.6], [1.7017007E12, 44.6], [1.701700405E12, 49.2], [1.701700315E12, 18.4], [1.701700745E12, 2.2], [1.70170036E12, 39.6], [1.70170047E12, 58.8], [1.70170056E12, 41.0], [1.701700515E12, 49.4], [1.701700605E12, 50.0], [1.70170022E12, 0.2], [1.70170065E12, 39.4], [1.701700335E12, 49.2], [1.70170063E12, 50.0], [1.70170072E12, 44.8], [1.70170029E12, 17.0], [1.701700675E12, 50.2], [1.701700425E12, 49.6], [1.70170038E12, 49.8], [1.70170041E12, 49.4], [1.701700705E12, 44.2], [1.701700365E12, 48.0], [1.701700455E12, 49.4], [1.7017005E12, 58.6], [1.701700525E12, 49.6], [1.70170057E12, 49.0], [1.701700275E12, 16.4], [1.701700615E12, 49.4], [1.70170032E12, 7.8], [1.70170066E12, 49.8], [1.70170043E12, 48.6], [1.701700385E12, 49.8], [1.70170052E12, 59.4], [1.70170018E12, 0.2], [1.701700475E12, 49.8], [1.701700565E12, 48.0], [1.70170025E12, 1.6], [1.701700545E12, 44.0], [1.701700205E12, 1.0], [1.70170059E12, 50.2], [1.70170068E12, 59.0], [1.70170034E12, 49.6], [1.701700635E12, 49.8], [1.701700725E12, 42.0], [1.701700295E12, 17.4], [1.70170062E12, 50.2], [1.701700325E12, 28.4], [1.701700235E12, 1.8], [1.701700665E12, 49.6], [1.70170028E12, 16.8], [1.701700415E12, 49.8], [1.70170071E12, 49.4], [1.70170037E12, 59.6], [1.70170044E12, 44.2], [1.701700395E12, 44.4], [1.701700485E12, 49.6], [1.70170019E12, 0.6], [1.70170053E12, 49.4], [1.701700575E12, 59.6], [1.701700685E12, 49.4], [1.701700345E12, 49.8], [1.7017003E12, 16.8], [1.70170073E12, 26.8], [1.701700435E12, 59.4], [1.70170039E12, 44.0], [1.70170048E12, 49.6], [1.70170046E12, 44.8], [1.701700505E12, 49.4], [1.701700255E12, 2.8], [1.70170055E12, 59.4], [1.70170064E12, 49.6], [1.701700595E12, 49.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.701700745E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

